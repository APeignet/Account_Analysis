# -*- coding: utf-8 -*-
"""Account_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d3Vb3oxfS6uYvdb3ggH9gBMKGYwWOLvE

# <font color='#00458A'>**Imports**</font>
"""

# Connexion to the drive
from google.colab import drive
drive.mount('/content/drive')
from google.colab import files
import pandas as pd

# Uploading the retailers file
print("Upload retailers : ")
files.upload()
dataset_ttb = pd.read_excel("retailers.xlsx")
dataset_ttb.loc[dataset_ttb['coeff'].isnull()==True,'modifiedCoeff']= 1
dataset_ttb.loc[dataset_ttb['coeff'].isnull()==False,'modifiedCoeff']= dataset_ttb['coeff']

# Uploading the Analysis_Filters file
print("Upload filters : ")
files.upload()
dataset_filters = pd.read_excel("Analysis_Filters.xlsx")

# Uploading the invest_imp file
import os.path
print("Upload investment and social media impressions : ")
files.upload()
if os.path.isfile('invest_imp.xlsx') == True : 
  dataset_invest = pd.read_excel("invest_imp.xlsx")

# Commented out IPython magic to ensure Python compatibility.
!pip install plotly
import plotly
import xlrd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import copy
from functools import reduce
import math
import warnings
import os
if not os.path.exists("images"):
    os.mkdir("images")
import plotly.express as px
import plotly.graph_objects as go
import random
import holoviews as hv
from datetime import date
from datetime import time
from datetime import datetime
import datetime as dt
import json
from plotly.offline import init_notebook_mode, iplot
!pip install fpdf
from fpdf import FPDF
from google.colab import files
hv.extension('bokeh')
# %matplotlib notebook
# %matplotlib inline
import plotly.graph_objects as go
import plotly.offline as offline

plt.rcParams['figure.dpi'] = 300
warnings.filterwarnings("ignore")

!export AWS_SHARED_CREDENTIALS_FILE=!cat/content/drive/MyDrive/config/awscli.ini
path = "/content/drive/MyDrive/Colab_Analysis_Account/config/awscli.ini"
os.environ['AWS_SHARED_CREDENTIALS_FILE'] = path
print(os.environ['AWS_SHARED_CREDENTIALS_FILE'])

!pip install fsspec
!pip install s3fs
!pip install awscli
!pip install pyarrow==5
!pip install googledrivedownloader
from google_drive_downloader import GoogleDriveDownloader as gdd
import pyarrow.parquet as pq
import pyarrow.dataset as ds
from pyarrow import fs
import plotly.io as pio
s3  = fs.S3FileSystem(region="eu-west-1")

# Import of datasets
dataset_path = "swn-sframe/superset/Superset_Detailed_Dataset/"
dataset_path2 = "swn-sframe/superset/Superset_utms_impressions_to_sales/"
dataset_path3 = "swn-sframe/superset/Superset_all_wtb_lead_sales_by_leadid/"
dataset_path4 = "swn-sframe/superset/Superset_utms_impressions_to_sales_with_term/"
dataset_path5 = "swn-sframe/superset/raw_sales"
dataset_detailed = ds.dataset(dataset_path, format='parquet', filesystem=s3)
dataset_utm = ds.dataset(dataset_path2, format='parquet', filesystem=s3)
dataset_product = ds.dataset(dataset_path3, format='parquet', filesystem=s3)
dataset_utm_with_term = ds.dataset(dataset_path4, format='parquet', filesystem=s3)
dataset_sales = ds.dataset(dataset_path5, format='parquet', filesystem=s3)

"""# <font color='#00458A'>**Analysis filters**</font>"""

# Replace NaN with "null"
dataset_filters = dataset_filters.fillna("null")

# ----------------------------------------------------------------------
# Indications : 
# To change the filters below, the file "Analysis_Filter" must be changed

analysisAccount = dataset_filters['account'].values.tolist()[0]
analysisOperator = dataset_filters['operator'].values.tolist()
analysisCountry = dataset_filters['country'].values.tolist()
analysisTouchpoint = dataset_filters['touchpoint'].values.tolist()
analysisPoP = dataset_filters['pop'].values.tolist()



listIndex = []

for i in range(len(analysisOperator)) : 
  if (analysisOperator[i] == 'null')&(analysisCountry[i] == 'null')&(analysisTouchpoint[i] == 'null')&(analysisPoP[i] == 'null')&(i>0) : 
    print('Line null')
  else :
    listIndex.append(i)


while len(analysisOperator) != len(listIndex) : 
  for i in range(len(analysisOperator)) : 
    if (analysisOperator[i] == 'null')&(analysisCountry[i] == 'null')&(analysisTouchpoint[i] == 'null')&(analysisPoP[i] == 'null')&(i>0) : 
      analysisOperator.remove(analysisOperator[i])
      analysisCountry.remove(analysisCountry[i])
      analysisTouchpoint.remove(analysisTouchpoint[i])
      analysisPoP.remove(analysisPoP[i])
      break


if analysisCountry != 'null' : 
  countryCurrencyInEUR = dataset_filters['countryCurrencyInEUR'].values.tolist()[0]
else : 
  countryCurrencyInEUR = 'null'
competitorsAccount = dataset_filters['competitorsAccount'].values.tolist()
competitorsOperator = dataset_filters['competitorsOperator'].values.tolist()
competitorsCountry = dataset_filters['competitorsCountry'].values.tolist()
competitorsTypePoP = dataset_filters['competitorsTouchpoint'].values.tolist()
competitorsPoP = dataset_filters['competitorsPoP'].values.tolist()
competitorsCat = dataset_filters['competitorsCat'].values.tolist()


listIndexBis = []

for i in range(len(competitorsAccount)) : 
  if (competitorsAccount[i] == 'null')&(competitorsOperator[i] == 'null')&(competitorsCountry[i] == 'null')&(competitorsTypePoP[i] == 'null')&(competitorsPoP[i] == 'null')&(competitorsCat[i] == 'null')&(i>0) : 
    print('Line null')
  else :
    listIndexBis.append(i)


while len(competitorsAccount) != len(listIndexBis) : 
  for i in range(len(competitorsAccount)) : 
    if (competitorsAccount[i] == 'null')&(competitorsOperator[i] == 'null')&(competitorsCountry[i] == 'null')&(competitorsTypePoP[i] == 'null')&(competitorsPoP[i] == 'null')&(competitorsCat[i] == 'null')&(i>0) : 
      competitorsAccount.remove(competitorsAccount[i])
      competitorsOperator.remove(competitorsOperator[i])
      competitorsCountry.remove(competitorsCountry[i])
      competitorsTypePoP.remove(competitorsTypePoP[i])
      competitorsPoP.remove(competitorsPoP[i])
      competitorsCat.remove(competitorsCat[i])
      break


analysisDate1 = dataset_filters['analysisDateStart'].values.tolist()[0]
analysisDate2 = dataset_filters['analysisDateEnd'].values.tolist()[0]
comparisonDate1 = dataset_filters['comparisonDateStart'].values.tolist()[0]
comparisonDate2 = dataset_filters['comparisonDateEnd'].values.tolist()[0]
numberBenchmarkPeriod = dataset_filters['numberBenchmarkPeriod'].values.tolist()[0]
benchmarkPeriod = dataset_filters['benchmarkPeriod'].values.tolist()[0]


analysisDate1List = analysisDate1.split("-")
analysisDate2List = analysisDate2.split("-")


if benchmarkPeriod == "D" : 
  number = numberBenchmarkPeriod*1
elif benchmarkPeriod == "M" :
  number = numberBenchmarkPeriod*30
elif benchmarkPeriod == "Y" :
  number = numberBenchmarkPeriod*365

benchmarkDate1 = dt.date(int(analysisDate2List[0]), int(analysisDate2List[1]), int(analysisDate2List[2]))- dt.timedelta(days=number)
benchmarkDate2 = analysisDate2

"""# <font color='#00458A'>**!! Filters for graphs - TO BE COMPLETED !!**</font>"""

# ----------------------------------------------------------------------
# ------------------------ FILTERS FOR ANALYSIS ------------------------
# !!! NO NEED TO COMPLETE VARIABLE LIKE analysisTouchpointTypeLCR1 IF ON THE FILE ANALYSIS_FILTERS THERE IS ONLY ONE TOUCHPOINT !!!

# !!!! If you have completed Analysis_Filters with more than 1 touchpoint !!!!
# N if you want all the type of touchpoint at the same time, on the lead conversion rate analysis and utm completion rate analysis (NO THRESHOLD)
# Y otherwise
# IF YOU PUT Y, COMPLETE THE TOUCHPOINT TYPE FOR EACH GRAPH

withThresholdsByTouchpoint = 'N'


# LEAD CONVERSION RATE ------------------------

# TOP PoP by Account, Operator AND/OR Country
# analysisTouchpointTypeLCR1 : a touchpoint
# analysisByOperatorLCR1 : "null" OR an Operator
# analysisByCountryLCR1 : "null" OR a country
analysisTouchpointTypeLCR1 = 'IP'
analysisByOperatorLCR1 = 'null'
analysisByCountryLCR1 = 'null'

# PoPs under the lead conversion rate threshold by touchpoint
# analysisTouchpointTypeLCR2 : a touchpoint
analysisTouchpointTypeLCR2 = 'IP'

# Lead conversion rate by source by PoP
# analysisUtmTypeLCR3 : a UTM type ('source', 'medium' OR 'campaign')
# analysisByPopLCR3 : a PoP name (if it is filled incorrectly, a PoP that belongs to the analysis domain will be chosen by default)
# analysisByCountryLCR3 : "null" OR a country
analysisUtmTypeLCR3 = 'source'
analysisByPopLCR3 = 'GB - IP - COTY - Hugo Boss - TRAFFIC'
analysisByCountryLCR3 = 'null'

# Correction if the lead conversion rate is equal to the threshold
# analysisTouchpointTypeLCR4 : a touchpoint
analysisTouchpointTypeLCR4 = 'IP'

# UTM COMPLETION RATE -------------------------

# TOP PoP by Account, Operator AND/OR Country
# analysisUtmTypeUTM1 : a UTM type ('source', 'medium' OR 'campaign')
# analysisTouchpointTypeUTM1 : a touchpoint
# analysisByOperatorUTM1 : "null" OR an Operator
# analysisByCountryUTM1 : "null" OR a country
analysisUtmTypeUTM1 = 'source'
analysisTouchpointTypeUTM1 = 'IP'
analysisByOperatorUTM1 = 'null'
analysisByCountryUTM1 = 'null'

# PoPs under the UTM completion rate threshold by touchpoint and type of UTM
# analysisTouchpointTypeUTM2 : a touchpoint
# analysisUtmTypeUTM2 : a UTM type ('source', 'medium' OR 'campaign')
analysisTouchpointTypeUTM2 = 'IP'
analysisUtmTypeUTM2 = 'source'

# PRODUCTS ------------------------------------

# TOP Products by Account, Operator, Country OR/AND PoP
# analysisByOperatorP1 : "null" OR an Operator
# analysisByPopP1 : "null" OR a PoP name
# analysisByCountryP1 : "null" OR a country
analysisByOperatorP1 = 'null'
analysisByPopP1 = 'null'
analysisByCountryP1 = 'null'

# RETAILERS -----------------------------------

# Sales conversion rate by lead
# analysisByPoPR1 : "null" OR a PoP name
analysisByPoPR1 = 'null'

# Sale conversion rate by AVG lead value
# analysisByPoPR2 : "null" OR a PoP name
analysisByPoPR2 = 'null'

# SANKEYS ------------------------------------

# Sankey : UTM > PoP > Products > Retailers > minimum_item_qty
# analysisUtmTypeS1 : a UTM type ('source', 'medium', 'campaign' OR 'term')
# analysisPopSankeyS1 : a PoP name (if it is filled incorrectly, a PoP that belongs to the analysis domain will be chosen by default)
# analysisProductS1 : a product name (if it is filled incorrectly, a product that belongs to the analysis domain will be chosen by default)
# analysisByCountryS1 : "null" OR a country
analysisUtmTypeS1 = 'source'
analysisPopSankeyS1 = 'GB - IP - COTY - Hugo Boss - TRAFFIC'
analysisProductS1 = 'Good Girl'
analysisByCountryS1 = 'null'

# Sankey : UTM > PoP > Products > Retailers > Sale Value
# analysisUtmTypeS2 : a UTM type ('source', 'medium', 'campaign' OR 'term')
# analysisPopSankeyS2 : a PoP name (if it is filled incorrectly, a PoP that belongs to the analysis domain will be chosen by default)
# analysisProductS2 : a product name (if it is filled incorrectly, a product that belongs to the analysis domain will be chosen by default)
# analysisByCountryS2 : "null" OR a country
analysisUtmTypeS2 = 'source'
analysisPopSankeyS2 = 'GB - IP - COTY - Hugo Boss - TRAFFIC'
analysisProductS2 = 'Good Girl'
analysisByCountryS2 = 'null'

# Sankey : UTM > Countries > Retailers > minimum_item_qty
# analysisUtmTypeS3 : a UTM type ('source', 'medium', 'campaign' OR 'term')
# analysisByPoPS3 : "null" OR a PoP name
analysisUtmTypeS3 = 'source'
analysisByPoPS3 = 'null'

# Sankey : UTM > Countries > Retailers > Product's origin
# analysisUtmTypeS4 : a UTM type ('source', 'medium', 'campaign' OR 'term')
# analysisByPopS4 : "null" OR a PoP name
analysisUtmTypeS4 = 'source'
analysisByPopS4 = 'null'

# Sankey : UTM > Retailers > Has sale
# analysisUtmTypeS5 : a UTM type ('source', 'medium', 'campaign' OR 'term')
# analysisByPoPS5 : "null" OR a PoP name
analysisUtmTypeS5 = 'source'
analysisByPoPS5 = 'null'

# COMPETITORS --------------------------------

# Comparison of lead conversion rate with competitors
# analysisTouchpointTypeC1 : a touchpoint
analysisTouchpointTypeC1 = 'IP'

# Comparison of UTM completion rate with competitors
# analysisTouchpointTypeC2 : a touchpoint
# analysisUtmTypeC2 : a UTM type ('source', 'medium' OR 'campaign')
analysisTouchpointTypeC2 = 'IP'
analysisUtmTypeC2 = 'source'

if (len(analysisTouchpoint) > 1) & (withThresholdsByTouchpoint == 'N') : 
  analysisTouchpointTypeLCR1 = "all"
  analysisTouchpointTypeLCR2 = 'all'
  analysisTouchpointTypeLCR4 = 'all'
  analysisTouchpointTypeUTM1 = 'all'
  analysisTouchpointTypeUTM2 = 'all'

if len(analysisTouchpoint) == 1 : 
  analysisTouchpointTypeLCR1 = analysisTouchpoint[0]
  analysisTouchpointTypeLCR2 = analysisTouchpoint[0]
  analysisTouchpointTypeLCR4 = analysisTouchpoint[0]
  analysisTouchpointTypeUTM1 = analysisTouchpoint[0]
  analysisTouchpointTypeUTM2 = analysisTouchpoint[0]
  analysisTouchpointTypeC1 = analysisTouchpoint[0]
  analysisTouchpointTypeC2 = analysisTouchpoint[0]

"""# <font color='#00458A'>**Retrieving datasets**</font>

### <font size='4px' color='#0066CC'>**raw_sales**</font>
"""

# Recovery of necessary data in the dataset raw_sales

def necessaryDataSales(dataset, date1, date2) : 

    df = dataset.to_table(filter=(ds.field('transaction_date') >= pd.to_datetime(date1)) & (ds.field('transaction_date') <= pd.to_datetime(date2)),columns=['transaction_date','year','month','day','PoP','account','operator', 'country','swaven_retailer_id','retailer_code','touchpoint','swaven_provider_id', 'transaction_id','item_qty','line_item_value','session_utm_source','session_utm_medium','session_utm_campaign','session_utm_content','session_utm_term']).to_pandas()
    df.loc[(df['item_qty'].isnull() == True),'minimum_item_qty']= 1
    df.loc[(df['item_qty'].isnull() == False),'minimum_item_qty']= df['item_qty']
    df = df.rename(columns = {'session_utm_term': 's_utm_term'})
    df = df.rename(columns = {'session_utm_content': 's_utm_content'})
    df = df.rename(columns = {'account': 'Account'})
    df = df.rename(columns = {'operator': 'Operator'})

    return df

# Analysis period
necessaryDataSales1 = necessaryDataSales(dataset_sales, analysisDate1, analysisDate2)

"""
### <font size='4px' color='#0066CC'>**Detailed_Dataset**</font>

"""

# Recovery of necessary data in the dataset Detailed_Dataset

def necessaryData(dataset, date1, date2) : 
  
    if countryCurrencyInEUR == 'null' : 
      df = dataset.to_table(filter=(ds.field('date') >= pd.to_datetime(date1)) & (ds.field('date') <= pd.to_datetime(date2)),columns=['date','PoP','Account','Operator', 'country','retailer','touchpoint','leads', 'impressions','imp','pv','total_lead_value_incltaxes_EUR','product_label','pid','cat1','cat2','cat3']).to_pandas(categories=['PoP','Account','touchpoint','Retailer', 'Operator', 'country','cat1','cat2','cat3'])
      df = df.rename(columns = {'total_lead_value_incltaxes_EUR': 'total_lead_value_incltaxes'})
    elif countryCurrencyInEUR == 'N' : 
      df = dataset.to_table(filter=(ds.field('date') >= pd.to_datetime(date1)) & (ds.field('date') <= pd.to_datetime(date2)),columns=['date','PoP','Account','Operator', 'country','retailer','touchpoint','leads', 'impressions','imp','pv','total_lead_value_incltaxes','product_label','pid','cat1','cat2','cat3']).to_pandas(categories=['PoP','Account','touchpoint','Retailer', 'Operator', 'country','cat1','cat2','cat3'])
    else : 
      return 'countryCurrencyInEUR must be filled by N or not filled'

    return df

# Analysis period 
necessaryData_account1 = necessaryData(dataset_detailed, analysisDate1, analysisDate2)

# Comparison period
necessaryData_account2 = necessaryData(dataset_detailed, comparisonDate1, comparisonDate2)

# Benchmark period
if (benchmarkPeriod != 'null') & (numberBenchmarkPeriod != 'null') : 
  necessaryData_account3 = necessaryData(dataset_detailed, benchmarkDate1, benchmarkDate2)
else : 
  necessaryData_account3 = necessaryData_account1.assign()

"""
### <font size='4px' color='#0066CC'>**utms_impressions_to_sales**</font>"""

# Recovery of necessary data in the dataset utms_impressions_to_sales

def necessaryDataUtm(dataset, date1, date2) : 

    df = dataset.to_table(filter=(ds.field('date') >= pd.to_datetime(date1)) & (ds.field('date') <= pd.to_datetime(date2)),columns=['date','PoP','Account','Operator','country','touchpoint','leads', 'instances', 'sessions', 's_utm_source', 's_utm_medium', 's_utm_campaign','s_utm_content']).to_pandas(categories=['PoP','Account','touchpoint', 's_utm_source', 's_utm_medium', 's_utm_campaign'])
    

    return df

# Analysis period
necessaryData_utm1 = necessaryDataUtm(dataset_utm,analysisDate1, analysisDate2)

# Comparison period
necessaryData_utm2 = necessaryDataUtm(dataset_utm, comparisonDate1, comparisonDate2)

# Benchmark period
if (benchmarkPeriod != 'null') & (numberBenchmarkPeriod != 'null') : 
  necessaryData_utm3 = necessaryDataUtm(dataset_utm, benchmarkDate1, benchmarkDate2)
else : 
  necessaryData_utm3 = necessaryData_utm1.assign()

"""
### <font size='4px' color='#0066CC'>**all_wtb_lead_sales_by_leadid**</font>
"""

# Recovery of necessary data in the dataset all_wtb_lead_sales_by_leadid

def necessaryDataProduct(dataset, date1, date2) : 

    if countryCurrencyInEUR == 'null' : 
      df = dataset.to_table(filter=(ds.field('date') >= pd.to_datetime(date1)) & (ds.field('date') <= pd.to_datetime(date2)),columns=['date','PoP','Account','Operator','country','retailer','retailer_id','swaven_provider_id','Provider','prc_EUR','pid','product_label1','touchpoint','transactions','total_item_qty','account_item_qty','has_sale','s_utm_source', 's_utm_medium', 's_utm_campaign','s_utm_term','s_utm_content','currency','currency_rate', 'total_amount_EUR','leadid','has_generated_sale_on_account_brand']).to_pandas(categories=['leadid','pid','product_label','PoP','Account','Operator','retailer','retailer_id','country','touchpoint', 's_utm_source', 's_utm_medium', 's_utm_campaign','has_generated_sale_on_account_brand'])
      df = df.rename(columns = {'prc_EUR': 'prc'})
      df = df.rename(columns = {'total_amount_EUR': 'total_amount'})
    elif countryCurrencyInEUR == 'N' : 
      df = dataset.to_table(filter=(ds.field('date') >= pd.to_datetime(date1)) & (ds.field('date') <= pd.to_datetime(date2)),columns=['date','PoP','Account','Operator','country','retailer','retailer_id','swaven_provider_id','Provider','prc','pid','product_label1','touchpoint','transactions','total_item_qty','account_item_qty','has_sale','s_utm_source', 's_utm_medium', 's_utm_campaign','s_utm_term','s_utm_content','currency','currency_rate', 'total_amount_EUR','leadid','has_generated_sale_on_account_brand']).to_pandas(categories=['leadid','pid','product_brand','product_label1','PoP','Account','Operator','retailer','retailer_id','country','touchpoint', 's_utm_source', 's_utm_medium', 's_utm_campaign','has_generated_sale_on_account_brand'])
      df['total_amount'] = pd.to_numeric(df['total_amount_EUR'])*pd.to_numeric(df['currency_rate'])
      del df['total_amount_EUR']
    else : 
      return 'countryCurrencyInEUR must be filled by N or not filled'

    df.loc[(df['transactions']>0) & ((df['total_item_qty'] <= 0) | (df['total_item_qty'].isnull() == True)),'minimum_item_qty']= df['transactions']
    df.loc[(df['transactions']>0)&(df['total_item_qty'] > 0),'minimum_item_qty']= df['total_item_qty']

    return df

# Analysis period
necessaryData_product1 = necessaryDataProduct(dataset_product,analysisDate1, analysisDate2)

# Benchmark period
if (benchmarkPeriod != 'null') & (numberBenchmarkPeriod != 'null') : 
  necessaryData_product3 = necessaryDataProduct(dataset_product, benchmarkDate1, benchmarkDate2)
else : 
  necessaryData_product3 = necessaryData_product1.assign()

"""
### <font size='4px' color='#0066CC'>**utms_impressions_to_sales_with_term**</font>
"""

# Recovery of necessary data in the dataset utms_impressions_to_sales_with_term

def necessaryDataUtmWithTerm(dataset, date1, date2) : 

    df = dataset.to_table(filter=(ds.field('date') >= pd.to_datetime(date1)) & (ds.field('date') <= pd.to_datetime(date2)),columns=['date','PoP','Account','Operator','country','leads','impressions','lead_value','touchpoint','transactions','s_utm_source', 's_utm_medium', 's_utm_campaign','s_utm_content','s_utm_term']).to_pandas(categories=['PoP','Account','Operator','country','touchpoint', 's_utm_source', 's_utm_medium', 's_utm_campaign'])

    return df

# Analysis period
necessaryData_utm_with_term = necessaryDataUtmWithTerm(dataset_utm_with_term,analysisDate1, analysisDate2)

# Benchmark period
if (benchmarkPeriod != 'null') & (numberBenchmarkPeriod != 'null') : 
  necessaryData_utm_with_term3 = necessaryDataUtmWithTerm(dataset_utm_with_term, benchmarkDate1, benchmarkDate2)
else : 
  necessaryData_utm_with_term3 = necessaryData_utm_with_term.assign()

"""
### <font size='4px' color='#0066CC'>**Lead conversion rate threshold for each types of PoP in a given period (for comparison with competitors)**</font>
"""

# Indications : 
# Calculation of the lead conversion rate threshold only with defined PoP for a touchpoint type
def thresholdLeadConversionRate(df, touchpointType) : 

    df2 = df.assign()
    # Deletion of lead conversion rates equal to 0
    df2 = df2[['leadConversionRate','leadWeightLCR','leads']][df2['leadConversionRate']>0]
    # Calculation of the 1st, 3rd quartile and the interquartile range
    quartile1 = df2['leadConversionRate'].quantile(0.25)
    quartile3 = df2['leadConversionRate'].quantile(0.75)
    interquartileRange = quartile3 - quartile1

    # Calculation of the interval without the outliers
    intervalMin = quartile1-1.5*interquartileRange
    intervalMax = quartile3+1.5*interquartileRange
    if intervalMin < 0 : intervalMin = 0

    # Deletion of lead conversion rates not belonging to the interval
    df2 = df2[(df2['leadConversionRate'] <= intervalMax) & (df2['leadConversionRate'] >= intervalMin)]
    
    # Weighted average calculation
    weightedAverage = df2['leadWeightLCR'].sum()/df2['leads'].sum()

    if df2.shape[0] >= 100 : 
      # Determination of the threshold with the calculation of standard error and margin of error
      standardError  = math.sqrt((weightedAverage*(1-weightedAverage))/df2.shape[0])
      marginError = 1.96*standardError
      threshold = weightedAverage - marginError
      if threshold < 0 : 
        threshold = 0

      return threshold
    else : 
      return weightedAverage

"""
### <font size='4px' color='#0066CC'>**Lead conversion rate threshold for each types of PoP in a given period**</font>
"""

# Indications : 
# Calculation of the lead conversion rate threshold for all the PoP of Swaven for a touchpoint type

def thresholdLeadConversionRateByPop(touchpointType) : 

  df = necessaryData_account3.assign()
  df = df[df['touchpoint'] == touchpointType]
  df = df.groupby(['PoP'], as_index=False).sum()

  # Lead conversion rate calculation
  df['leadConversionRate'] = (df['leads']/df['impressions'])
  df.loc[df['impressions']==0,'leadConversionRate']=0
  df = df[df['leadConversionRate'] > 0]
  
  # PoP weight calculation
  df['leadWeightLCR'] = df['leads']*df['leadConversionRate'] 

  threshold = thresholdLeadConversionRate(df, touchpointType)

  return threshold
thresholdLeadConversionRateByPop('ST')

"""
### <font size='4px' color='#0066CC'>**UTM completion rate threshold for each types of PoP and UTM in a given period (for comparison with competitors)**</font>"""

# Indications : 
# Calculation of the UTM completion rate threshold only with defined PoP for a touchpoint type and a UTM type

def thresholdUtmCompletionRate(df, touchpointType, utmType) : 

    if touchpointType == 'IP' : 
      return 1.0

    if utmType == 'source' : 
      utmCompletion = 'utmSourceCompletionRate'
      leadWeight = 'leadWeightUSCR'
    elif utmType == 'medium' : 
      utmCompletion = 'utmMediumCompletionRate'
      leadWeight = 'leadWeightUMCR'
    else :
      utmCompletion = 'utmCampaignCompletionRate'
      leadWeight = 'leadWeightUCCR'

    # Deletion of utm completion rates equal to 0
    df2 = df.assign()
    df2 = df2[[utmCompletion, leadWeight,'leads']][df2[utmCompletion]>0]
    # Calculation of the 1st, 3rd quartile and the interquartile range
    quartile1 = df2[utmCompletion].quantile(0.25)
    quartile3 = df2[utmCompletion].quantile(0.75)
    interquartileRange = quartile3 - quartile1

    # Calculation of the interval without the outliers
    intervalMin = quartile1-1.5*interquartileRange
    intervalMax = quartile3+1.5*interquartileRange
    if intervalMin < 0 : intervalMin = 0

    # Deletion of utm completion rates not belonging to the interval
    df2 = df2[(df2[utmCompletion] <= intervalMax) & (df2[utmCompletion] >= intervalMin)]
    
    # Weighted average calculation
    weightedAverage = df2[leadWeight].sum()/df2['leads'].sum()

    if df2.shape[0] >= 100 : 
      # Determination of the threshold with the calculation of standard error and margin of error
      standardError  = math.sqrt((weightedAverage*(1-weightedAverage))/df2.shape[0])
      marginError = 1.96*standardError
      threshold = weightedAverage - marginError
      if threshold < 0 : 
        threshold = 0
      return threshold
    else : 
      return weightedAverage

"""
### <font size='4px' color='#0066CC'>**UTM completion rate threshold for each types of PoP and UTM in a given period**</font>"""

# Indications : 
# Calculation of the UTM completion rate threshold for all the PoP of Swaven for a touchpoint type and UTM type

def thresholdUtmCompletionRateByPop(touchpointType, utmType) :
   
  df =  necessaryData_utm3.assign()
  df = df[df['touchpoint'] == touchpointType]

  if df.shape[0] < 1 : 
    return 0
  

  if utmType == 'source' : 
    dfSource = df.assign()
    dfSource = dfSource[['PoP', 'touchpoint', 'leads','sessions','s_utm_source']]
    dfSource.loc[dfSource['s_utm_source'].isnull()==True,'sessionsWithSource']= 0
    dfSource.loc[dfSource['s_utm_source'].isnull()==False,'sessionsWithSource']= dfSource['sessions']
    dfSource.loc[dfSource['touchpoint']== touchpointType,'cpt']=2

    dfSource = dfSource.groupby(['PoP'], as_index=False).sum()
    dfSource = dfSource[dfSource['cpt'] > 0]

    # UTM completion rate calculation
    dfSource['utmSourceCompletionRate'] = (dfSource['sessionsWithSource']/dfSource['sessions'])
    dfSource.loc[dfSource['utmSourceCompletionRate'].isnull()==True,'utmSourceCompletionRate']= 0
    dfSource = dfSource[dfSource['utmSourceCompletionRate'] > 0]
  
    # PoP weight calculation
    dfSource['leadWeightUSCR'] = dfSource['leads']*dfSource['utmSourceCompletionRate'] 
    threshold = thresholdUtmCompletionRate(dfSource, touchpointType, utmType)


  elif utmType == 'medium' :   
    dfMedium = df.assign()
    dfMedium = dfMedium[['PoP', 'touchpoint', 'leads','sessions','s_utm_medium']]
    dfMedium.loc[dfMedium['s_utm_medium'].isnull()==True,'sessionsWithSource']= 0
    dfMedium.loc[dfMedium['s_utm_medium'].isnull()==False,'sessionsWithSource']= dfMedium['sessions']
    dfMedium.loc[dfMedium['touchpoint']== touchpointType,'cpt']=2

    dfMedium = dfMedium.groupby(['PoP'], as_index=False).sum()
    dfMedium = dfMedium[dfMedium['cpt'] > 0]

    # UTM completion rate calculation
    dfMedium['utmMediumCompletionRate'] = (dfMedium['sessionsWithSource']/dfMedium['sessions'])
    dfMedium.loc[dfMedium['utmMediumCompletionRate'].isnull()==True,'utmMediumCompletionRate']= 0
    dfMedium = dfMedium[dfMedium['utmMediumCompletionRate'] > 0]

    # PoP weight calculation
    dfMedium['leadWeightUMCR'] = dfMedium['leads']*dfMedium['utmMediumCompletionRate'] 
    threshold = thresholdUtmCompletionRate(dfMedium, touchpointType, utmType)

  elif utmType == 'campaign' : 
    dfCampaign = df.assign()
    dfCampaign = dfCampaign[['PoP', 'touchpoint', 'leads','sessions','s_utm_campaign']]
    dfCampaign.loc[dfCampaign['s_utm_campaign'].isnull()==True,'sessionsWithSource']= 0
    dfCampaign.loc[dfCampaign['s_utm_campaign'].isnull()==False,'sessionsWithSource']= dfCampaign['sessions']
    dfCampaign.loc[dfCampaign['touchpoint']== touchpointType,'cpt']=2

    dfCampaign = dfCampaign.groupby(['PoP'], as_index=False).sum()
    dfCampaign = dfCampaign[dfCampaign['cpt'] > 0]

    # UTM completion rate calculation
    dfCampaign['utmCampaignCompletionRate'] = (dfCampaign['sessionsWithSource']/dfCampaign['sessions'])
    dfCampaign.loc[dfCampaign['utmCampaignCompletionRate'].isnull()==True,'utmCampaignCompletionRate']= 0
    dfCampaign = dfCampaign[dfCampaign['utmCampaignCompletionRate'] > 0]

    # PoP weight calculation
    dfCampaign['leadWeightUCCR'] = dfCampaign['leads']*dfCampaign['utmCampaignCompletionRate']
    threshold = thresholdUtmCompletionRate(dfCampaign, touchpointType, utmType)

  return threshold
  
thresholdUtmCompletionRateByPop('ST', 'medium')

"""
### <font size='4px' color='#0066CC'>**Currency**</font>
"""

# A TESTER
def currencyAccount() : 

  if (countryCurrencyInEUR == 'N') & (analysisCountry.count(analysisCountry[0]) == len(analysisCountry)): 
    dfCurrencyName = necessaryData_product1.assign()
    dfCurrencyName = dfCurrencyName[dfCurrencyName['country'] == analysisCountry[0]]
    currencyCountry = dfCurrencyName['currency'].tolist()[0]
  else : 
    currencyCountry = 'EUR'

  return currencyCountry

currencyName = currencyAccount()

"""
# <font color='#00458A'>**Data**</font>"""

# Indications : 
# Filters datasets with filters from Analysis_Filters

def dataFiltering(dataset) : 

  df = dataset.assign() 
  df2 = dataset.assign()
  # Empties the dataframe
  df2.drop(df2.index , inplace=True)

  lenMax = max([len(analysisOperator),len(analysisCountry),len(analysisTouchpoint),len(analysisPoP)])
  allLineDf = []

  # Retrieves filters per line
  for i in  range(lenMax) : 
    lineDf = []
    lineDf.append(analysisOperator[i])
    lineDf.append(analysisCountry[i])
    lineDf.append(analysisTouchpoint[i])
    lineDf.append(analysisPoP[i])
    allLineDf.append(lineDf)

  for i in range(len(allLineDf)) : 
    listIndex = []
    for j in range(len(allLineDf[i])) : 
      if(allLineDf[i][j] != 'null') : 
        indexValue = allLineDf[i].index(allLineDf[i][j])
        listIndex.append(indexValue)
    if 0 in listIndex : 
      if 1 in listIndex : 
        if 2 in listIndex : 
          if 3 in listIndex : 
            df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])&(df['country'] == allLineDf[i][1])&(df['touchpoint'] == allLineDf[i][2])&(df['PoP'] == allLineDf[i][3]) ].assign()
          else : 
            df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])&(df['country'] == allLineDf[i][1])&(df['touchpoint'] == allLineDf[i][2])]
        else : 
          if 3 in listIndex : 
            df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])&(df['country'] == allLineDf[i][1])&(df['PoP'] == allLineDf[i][3]) ]
          else : 
            df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])&(df['country'] == allLineDf[i][1])]
      elif 2 in listIndex : 
        if 3 in listIndex :
          df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])&(df['touchpoint'] == allLineDf[i][2])&(df['PoP'] == allLineDf[i][3]) ]
        else : 
          df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])&(df['touchpoint'] == allLineDf[i][2]) ]
      elif 3 in listIndex :
        df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])&(df['PoP'] == allLineDf[i][3]) ]
      else : 
        df3 = df[(df['Account'] == analysisAccount)&(df['Operator'] == allLineDf[i][0])]

    elif 1 in listIndex : 
      if 2 in listIndex : 
        if 3 in listIndex : 
          df3 = df[(df['Account'] == analysisAccount)&(df['country'] == allLineDf[i][1])&(df['touchpoint'] == allLineDf[i][2])&(df['PoP'] == allLineDf[i][3]) ]
        else : 
          df3 = df[(df['Account'] == analysisAccount)&(df['country'] == allLineDf[i][1])&(df['touchpoint'] == allLineDf[i][2])]
      elif 3 in listIndex :
        df3 = df[(df['Account'] == analysisAccount)&(df['country'] == allLineDf[i][1])&(df['PoP'] == allLineDf[i][3]) ]
      else : 
        df3 = df[(df['Account'] == analysisAccount)&(df['country'] == allLineDf[i][1]) ]

    elif 2 in listIndex : 
      if 3 in listIndex : 
        df3 = df[(df['Account'] == analysisAccount)&(df['touchpoint'] == allLineDf[i][2])&(df['PoP'] == allLineDf[i][3]) ]
      else : 
        df3 = df[(df['Account'] == analysisAccount)&(df['touchpoint'] == allLineDf[i][2])]

    elif 3 in listIndex : 
      df3 = df[(df['Account'] == analysisAccount)&(df['PoP'] == allLineDf[i][3]) ]
    
    else : 
      df3 = df[(df['Account'] == analysisAccount)]
    
    # Adds to df2 the data that are part of the analysis dimension
    df2 = pd.concat([df2, df3])

  df2.reset_index(inplace=True, drop=False)
  df2['cpt'] = 1

  return df2


necessaryDataSales1OnlyAccount = dataFiltering(necessaryDataSales1).assign()
necessaryData_account1OnlyAccount = dataFiltering(necessaryData_account1).assign()
necessaryData_account2OnlyAccount = dataFiltering(necessaryData_account2).assign()
necessaryData_account3OnlyAccount = dataFiltering(necessaryData_account3).assign()
necessaryData_utm1OnlyAccount = dataFiltering(necessaryData_utm1).assign()
necessaryData_utm2OnlyAccount = dataFiltering(necessaryData_utm2).assign()
necessaryData_utm3OnlyAccount = dataFiltering(necessaryData_utm3).assign()
necessaryData_product1OnlyAccount = dataFiltering(necessaryData_product1).assign()
necessaryData_product3OnlyAccount = dataFiltering(necessaryData_product3).assign()
necessaryData_utm_with_termOnlyAccount = dataFiltering(necessaryData_utm_with_term).assign()
necessaryData_utm_with_term3OnlyAccount = dataFiltering(necessaryData_utm_with_term3).assign()

"""# <font color='#00458A'>**Figures**</font>

### <font size='4px' color='#0066CC'>**Main account figures**</font>
"""

# Indications : 
# To change the information of the analysed account, the file "Analysis_Filter" must be changed
# growth : 'Y' or 'N' , Y if it is used for the calculation of growth rates
# comparisonDate : 'Y' or 'N', Y if it is used for the calculation of growth rates

def mainFigures(account, growth, comparisonDate) : 

  
  # uses another dataframe with the comparison period if comparisonDate == 'Y'
  if (comparisonDate == 'Y')  : 
    dataDetailed = necessaryData_account2OnlyAccount.assign()
    dataUtm = necessaryData_utm2OnlyAccount.assign()
  else : 
    dataDetailed = necessaryData_account1OnlyAccount.assign()
    dataUtm = necessaryData_utm1OnlyAccount.assign()

  df = dataDetailed.assign()
  df2 = dataUtm.assign()

  df = df.groupby(['Account'], as_index=False).sum()

  # PoP that have impressions below 0 are considered inactive
  df = df[df['impressions']>0]

  df6 = df.assign()
  df6 = df6[['Account','leads','impressions']]
  df6['total_lead_value_incltaxes'] = df['total_lead_value_incltaxes']
  # Calculation of the lead unit value (lead value/leads)
  df6['leadUnitValue'] = df['total_lead_value_incltaxes']/df['leads']
  # Calculation of the impression unit value (lead value/impressions)
  df6['impressionUnitValue'] = df['total_lead_value_incltaxes']/df['impressions']
  # Calculation of the lead conversion rate (also known as PoP performance) (leads/impressions)
  df6['leadConversionRate'] = df['leads']/df['impressions']
  df6.loc[df['impressions']==0,'leadConversionRate']=0

  # We don't have information on UTM until 2021
  if (growth == 'Y')  : 
    return df6
  else : 
    
    # creation of dataframes without incomplete UTM
    dfSource = df2.dropna(subset = ['s_utm_source'])
    dfMedium = df2.dropna(subset = ['s_utm_medium'])
    dfCampaign = df2.dropna(subset = ['s_utm_campaign'])

    df2 = df2.groupby(['Account'], as_index=False).sum()
    dfSource = dfSource.groupby(['Account'], as_index=False).sum()
    dfMedium = dfMedium.groupby(['Account'], as_index=False).sum()
    dfCampaign = dfCampaign.groupby(['Account'], as_index=False).sum()

    df2[df2['Account'] == account]
    dfSource[dfSource['Account'] == account]
    dfMedium[dfMedium['Account'] == account]
    dfCampaign[dfCampaign['Account'] == account]
    df2 = df2.rename(columns = {'sessions': 'allSessions'})
  
    # Calculation of UTM completion rate(number of sessions with UTM completed/number of sessions)
    dfSourceUTM = pd.merge(df2,dfSource,on='Account')
    dfSourceUTM = dfSourceUTM[['Account','sessions','allSessions']]
    dfSourceUTM['utmSourceCompletionRate'] = dfSourceUTM['sessions']/dfSourceUTM['allSessions']
    dfSourceUTM = dfSourceUTM[['Account','utmSourceCompletionRate']]

    dfMediumUTM = pd.merge(df2,dfMedium,on='Account')
    dfMediumUTM = dfMediumUTM[['Account','sessions','allSessions']]
    dfMediumUTM['utmMediumCompletionRate'] = dfMediumUTM['sessions']/dfMediumUTM['allSessions']
    dfMediumUTM = dfMediumUTM[['Account','utmMediumCompletionRate']]

    dfCampaignUTM = pd.merge(df2,dfCampaign,on='Account')
    dfCampaignUTM = dfCampaignUTM[['Account','sessions','allSessions']]
    dfCampaignUTM['utmCampaignCompletionRate'] = dfCampaignUTM['sessions']/dfCampaignUTM['allSessions']
    dfCampaignUTM = dfCampaignUTM[['Account','utmCampaignCompletionRate']]

    df6 = pd.merge(df6,dfSourceUTM,on='Account')
    df6 = pd.merge(df6,dfMediumUTM,on='Account')
    df6 = pd.merge(df6,dfCampaignUTM,on='Account')
    
  
    return df6

mainFigures(analysisAccount, 'N', 'N')

"""
### <font size='4px' color='#0066CC'>**Growth rates**</font>"""

# Indications : 
# Calculations of growth rates for each concept analysed in mainFigures without UTM completion rates
# Results are already in percentage 

def growthRatesAccount(account) : 

    analysisData = mainFigures(account, 'Y', 'N' ).assign()
    comparisonData = mainFigures(account, 'Y', 'Y' ).assign()
    df = pd.merge(analysisData,comparisonData,on='Account')

    df['leadsGrowthRate'] = (df['leads_x']-df['leads_y'])/df['leads_y']*100
    df['impressionsGrowthRate'] = (df['impressions_x']-df['impressions_y'])/df['impressions_y']*100
    df['leadRevenueGrowthRate'] = (df['total_lead_value_incltaxes_x']-df['total_lead_value_incltaxes_y'])/df['total_lead_value_incltaxes_y']*100
    df['leadUnitValueGrowthRate'] = (df['leadUnitValue_x']-df['leadUnitValue_y'])/df['leadUnitValue_y']*100
    df['impressionUnitValueGrowthRate'] = (df['impressionUnitValue_x']-df['impressionUnitValue_y'])/df['impressionUnitValue_y']*100
    df['leadConversionRateGrowthRate'] = (df['leadConversionRate_x']-df['leadConversionRate_y'])/df['leadConversionRate_y']*100
    df = df[['Account','leadsGrowthRate','impressionsGrowthRate','leadRevenueGrowthRate','leadUnitValueGrowthRate', 'impressionUnitValueGrowthRate','leadConversionRateGrowthRate']]
    return df

growthRatesAccount(analysisAccount)

"""### <font size='4px' color='#0066CC'>**Main figures by PoP**</font>

"""

# Indications : 
# Display of main figures by PoP (also used to display the figures of PoP competitors)
# growth : 'Y' or 'N' , Y if it is used for the calculation of growth rates
# comparisonDate : 'Y' or 'N', Y if it is used for the calculation of growth rates
# competitorsDate : 'Y' or 'N' or 'O', Y if it is used for the benchmarks period but for competitors and O if it is used for the becnhmark period for the Account being analyzed
# pop and cat : 'null' or 'Y', Y if it is used for competitors 

def pop(account, operator, country, growth, comparisonDate,touchpointType, pop, cat,competitorsDate) : 

  # uses another dataframe with the comparison period if comparisonDate == 'Y'
  if comparisonDate == 'Y'  : 
    dataDetailed = necessaryData_account2OnlyAccount.assign()
    dataUtm = necessaryData_utm2OnlyAccount.assign()
    df = dataDetailed.assign()
    df2 = dataUtm.assign()
  # uses another dataframe with the comparison period if competitorsDate == 'O' OR 'Y'
  elif (competitorsDate == 'Y') | (competitorsDate == 'O')  : 
    if competitorsDate == 'O' : 
      dataDetailed = necessaryData_account3OnlyAccount.assign()
      dataUtm = necessaryData_utm3OnlyAccount.assign()
      df = dataDetailed.assign()
      df2 = dataUtm.assign()
    else : 
      dataDetailed = necessaryData_account3.assign()
      dataUtm = necessaryData_utm3.assign()
      if (operator == 'null') & (country == 'null') & (account == 'null') :
          df = dataDetailed.assign()
          df2 = dataUtm.assign()
      elif (operator == 'null') & (country == 'null') & (account != 'null') : 
          df = dataDetailed[(dataDetailed['Account'] == account)]
          df2 = dataUtm[(dataUtm['Account'] == account)]
      elif (operator != 'null') & (country == 'null') & (account == 'null') : 
          df = dataDetailed[(dataDetailed['Operator'] == operator)]
          df2 = dataUtm[(dataUtm['Operator'] == operator)]
      elif (operator == 'null') & (country != 'null') & (account == 'null') : 
          df = dataDetailed[(dataDetailed['country'] == country)]
          df2 = dataUtm[(dataUtm['country'] == country)]
      elif (operator != 'null') & (country == 'null') & (account != 'null') : 
          df = dataDetailed[(dataDetailed['Operator'] == operator)]
          df2 = dataUtm[(dataUtm['Operator'] == operator)]
      elif (operator != 'null') & (country != 'null') & (account == 'null') : 
          df = dataDetailed[(dataDetailed['Operator'] == operator)&(dataDetailed['country'] == country)]
          df2 = dataUtm[(dataUtm['Operator'] == operator)&(dataUtm['country'] == country)]
      elif (operator == 'null') & (country != 'null') & (account != 'null') : 
          df = dataDetailed[(dataDetailed['Account'] == account)&(dataDetailed['country'] == country)]
          df2 = dataUtm[(dataUtm['Account'] == account)&(dataUtm['country'] == country)]
      else : 
          df = dataDetailed[(dataDetailed['Operator'] == operator)&(dataDetailed['country'] == country)]
          df2 = dataUtm[(dataUtm['Operator'] == operator)&(dataUtm['country'] == country)]
        
  else : 
    dataDetailed = necessaryData_account1OnlyAccount.assign()
    dataUtm = necessaryData_utm1OnlyAccount.assign()
    df = dataDetailed.assign()
    df2 = dataUtm.assign()

  # Filters for competitors
  if (touchpointType != "all") & (pop == "null") & (cat == "null" ) :
    listPop = df['PoP'][(df['touchpoint'] == touchpointType)]
  elif (touchpointType != "all") & (pop != "null") & (cat == "null" ) :
    listPop = df['PoP'][(df['touchpoint'] == touchpointType)&(df['PoP']==pop)]
  elif (touchpointType != "all") & (pop != "null") & (cat != "null" ) :
    if (cat in set(df['cat1'])) == True :
      listPop = df['PoP'][(df['touchpoint'] == touchpointType)&(df['PoP']==pop)&(df['cat1']==cat)]
    elif (cat in set(df['cat2'])) == True :
      listPop = df['PoP'][(df['touchpoint'] == touchpointType)&(df['PoP']==pop)&(df['cat2']==cat)]
    elif (cat in set(df['cat3'])) == True :
      listPop = df['PoP'][(df['touchpoint'] == touchpointType)&(df['PoP']==pop)&(df['cat3']==cat)]
    else : 
      return 'This category does not exist or is misspelled.'
  elif (touchpointType != "all") & (pop == "null") & (cat != "null" ) :
    if (cat in set(df['cat1'])) == True :
      listPop = df['PoP'][(df['touchpoint'] == touchpointType)&(df['cat1']==cat)]
    elif (cat in set(df['cat2'])) == True :
      listPop = df['PoP'][(df['touchpoint'] == touchpointType)&(df['cat2']==cat)]
    elif (cat in set(df['cat3'])) == True :
      listPop = df['PoP'][(df['touchpoint'] == touchpointType)&(df['cat3']==cat)]
    else : 
      return 'This category does not exist or is misspelled.'
  elif (touchpointType == "all") & (pop != "null") & (cat != "null" ) :
    if (cat in set(df['cat1'])) == True :
      listPop = df['PoP'][(df['PoP']==pop)&(df['cat1']==cat)]
    elif (cat in set(df['cat2'])) == True :
      listPop = df['PoP'][(df['PoP']==pop)&(df['cat2']==cat)]
    elif (cat in set(df['cat3'])) == True :
      listPop = df['PoP'][(df['PoP']==pop)&(df['cat3']==cat)]
    else : 
      return 'This category does not exist or is misspelled.'
  elif(touchpointType == "all") & (pop != "null") & (cat == "null" ) :
    listPop = df['PoP'][(df['PoP']==pop)]
  elif (touchpointType == "all") & (pop == "null") & (cat != "null" ) :
    if (cat in set(df['cat1'])) == True :
      listPop = df['PoP'][(df['cat1']==cat)]
    elif (cat in set(df['cat2'])) == True :
      listPop = df['PoP'][(df['cat2']==cat)]
    elif (cat in set(df['cat3'])) == True :
      listPop = df['PoP'][(df['cat3']==cat)]
    else : 
      return 'This category does not exist or is misspelled.'
  else : 
    listPop = df['PoP']

  # Created a list with all PoP to analyze
  new_list = [] 
  for i in listPop : 
    if i not in new_list: 
        new_list.append(i)


  # Assigns a number to each country to facilitate the group by
  dfNumberCountry = df.assign()
  dfNumberCountry['numberCountry'] = 0
  dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
  dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
  numberList1 = []
  while len(numberList1) != dfNumberCountry.shape[0] : 
    for i in range(dfNumberCountry.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList1.append(number)
    numberList1 = list(set(numberList1))
  dfNumberCountry['numberCountry'] = numberList1
  
  df = df.join(dfNumberCountry.set_index('country'), on='country')

  # Assigns a number to each PoP to facilitate the group by
  dfNumberPop = df.assign()
  dfNumberPop['numberPop'] = 0
  dfNumberPop = dfNumberPop[['PoP', 'numberPop']]
  dfNumberPop = dfNumberPop.groupby(['PoP'], as_index=False).sum()
  numberList2 = []
  while len(numberList2) != dfNumberPop.shape[0] : 
    for i in range(dfNumberPop.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList2.append(number)
    numberList2 = list(set(numberList2))
  dfNumberPop['numberPop'] = numberList2
  
  df = df.join(dfNumberPop.set_index('PoP'), on='PoP')

  # Assigns a number to each touchpoint to facilitate the group by
  dfNumberTouchpoint = df.assign()
  dfNumberTouchpoint['numberTouchpoint'] = 0
  dfNumberTouchpoint = dfNumberTouchpoint[['touchpoint', 'numberTouchpoint']]
  dfNumberTouchpoint = dfNumberTouchpoint.groupby(['touchpoint'], as_index=False).sum()
  numberList3 = []
  while len(numberList3) != dfNumberTouchpoint.shape[0] : 
    for i in range(dfNumberTouchpoint.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList3.append(number)
    numberList3 = list(set(numberList3))
  dfNumberTouchpoint['numberTouchpoint'] = numberList3
  
  df = df.join(dfNumberTouchpoint.set_index('touchpoint'), on='touchpoint')

  # Assigns a number to each Account to facilitate the group by
  dfNumberAccount = df.assign()
  dfNumberAccount['numberAccount'] = 0
  dfNumberAccount = dfNumberAccount[['Account', 'numberAccount']]
  dfNumberAccount = dfNumberAccount.groupby(['Account'], as_index=False).sum()
  numberList4 = []
  while len(numberList4) != dfNumberAccount.shape[0] : 
    for i in range(dfNumberAccount.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList4.append(number)
    numberList4 = list(set(numberList4))
  dfNumberAccount['numberAccount'] = numberList4
  
  df = df.join(dfNumberAccount.set_index('Account'), on='Account')

  # Assigns a number to each operator to facilitate the group by
  dfNumberOperator = df.assign()
  dfNumberOperator['numberOperator'] = 0
  dfNumberOperator = dfNumberOperator[['Operator', 'numberOperator']]
  dfNumberOperator = dfNumberOperator.groupby(['Operator'], as_index=False).sum()
  numberList5 = []
  while len(numberList5) != dfNumberOperator.shape[0] : 
    for i in range(dfNumberOperator.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList5.append(number)
    numberList5 = list(set(numberList5))
  dfNumberOperator['numberOperator'] = numberList5
  
  df = df.join(dfNumberOperator.set_index('Operator'), on='Operator')

  df = df.groupby(['numberPop','numberOperator','numberCountry','numberAccount','numberTouchpoint'], as_index=False).sum()
  df = df.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
  df = df.join(dfNumberPop.set_index('numberPop'), on='numberPop')
  df = df.join(dfNumberTouchpoint.set_index('numberTouchpoint'), on='numberTouchpoint')
  df = df.join(dfNumberAccount.set_index('numberAccount'), on='numberAccount')
  df = df.join(dfNumberOperator.set_index('numberOperator'), on='numberOperator')
  df = df[['Account','Operator','country','PoP','touchpoint','leads','impressions','total_lead_value_incltaxes']]
  df = df.dropna(subset = ['impressions', 'leads', 'total_lead_value_incltaxes'])

  # Calculation of lead unit value, impression unit value, lead conversion and the weight of the PoP for the calculation of the UTM completion rate threshold
  df3 = df.assign()
  df3['leadUnitValue'] = df['total_lead_value_incltaxes']/df['leads']
  df3.loc[df['leads']==0,'leadUnitValue']=0
  df3['impressionUnitValue'] = df['total_lead_value_incltaxes']/df['impressions']
  df3.loc[df['impressions']==0,'impressionUnitValue']=0
  df3['leadConversionRate'] = df['leads']/df['impressions']
  df3.loc[df['impressions']==0,'leadConversionRate']=0
  df3['leadWeightLCR'] = df3['leads']*df3['leadConversionRate'] 

  if (growth == 'Y') : 
    return df3

  # Calculation of UTM completion rates
  else : 

    dfSource = df2.assign()
    dfSource = dfSource[['Account','Operator','country','PoP', 'sessions','s_utm_source']]
    dfSource.loc[dfSource['s_utm_source'].isnull()==True,'sessions']= 0
    dfSource['cpt'] = 0
    for i in new_list : 
      dfSource.loc[dfSource['PoP']== i,'cpt']=2
    dfSource = dfSource.join(dfNumberAccount.set_index('Account'), on='Account')
    dfSource = dfSource.join(dfNumberOperator.set_index('Operator'), on='Operator')
    dfSource = dfSource.join(dfNumberCountry.set_index('country'), on='country')
    dfSource = dfSource.join(dfNumberPop.set_index('PoP'), on='PoP')
    dfSource = dfSource.groupby(['numberAccount','numberOperator','numberCountry','numberPop'], as_index=False).sum()
    dfSource = dfSource.join(dfNumberAccount.set_index('numberAccount'), on='numberAccount')
    dfSource = dfSource.join(dfNumberOperator.set_index('numberOperator'), on='numberOperator')
    dfSource = dfSource.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    dfSource = dfSource.join(dfNumberPop.set_index('numberPop'), on='numberPop')
    dfSource = dfSource[dfSource['cpt'] > 0]
    dfSource = dfSource[['Account','Operator','country','PoP','sessions']]
    
    dfMedium = df2.assign()
    dfMedium = dfMedium[['Account','Operator','country','PoP', 'sessions','s_utm_medium']]
    dfMedium.loc[dfMedium['s_utm_medium'].isnull()==True,'sessions']= 0
    dfMedium['cpt'] = 0
    for i in new_list : 
      dfMedium.loc[dfMedium['PoP']== i,'cpt']=2
    dfMedium = dfMedium.join(dfNumberAccount.set_index('Account'), on='Account')
    dfMedium = dfMedium.join(dfNumberOperator.set_index('Operator'), on='Operator')
    dfMedium = dfMedium.join(dfNumberCountry.set_index('country'), on='country')
    dfMedium = dfMedium.join(dfNumberPop.set_index('PoP'), on='PoP')
    dfMedium = dfMedium.groupby(['numberAccount','numberOperator','numberCountry','numberPop'], as_index=False).sum()
    dfMedium = dfMedium.join(dfNumberAccount.set_index('numberAccount'), on='numberAccount')
    dfMedium = dfMedium.join(dfNumberOperator.set_index('numberOperator'), on='numberOperator')
    dfMedium = dfMedium.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    dfMedium = dfMedium.join(dfNumberPop.set_index('numberPop'), on='numberPop')
    dfMedium = dfMedium[dfMedium['cpt'] > 0]
    dfMedium = dfMedium[['Account','Operator','country','PoP','sessions']]


    dfCampaign = df2.assign()
    dfCampaign = dfCampaign[['Account','Operator','country','PoP', 'sessions','s_utm_campaign']]
    dfCampaign.loc[dfCampaign['s_utm_campaign'].isnull()==True,'sessions']= 0
    dfCampaign['cpt'] = 0
    for i in new_list : 
      dfCampaign.loc[dfCampaign['PoP']== i,'cpt']=2
    dfCampaign = dfCampaign.join(dfNumberAccount.set_index('Account'), on='Account')
    dfCampaign = dfCampaign.join(dfNumberOperator.set_index('Operator'), on='Operator')
    dfCampaign = dfCampaign.join(dfNumberCountry.set_index('country'), on='country')
    dfCampaign = dfCampaign.join(dfNumberPop.set_index('PoP'), on='PoP')
    dfCampaign = dfCampaign.groupby(['numberAccount','numberOperator','numberCountry','numberPop'], as_index=False).sum()
    dfCampaign = dfCampaign.join(dfNumberAccount.set_index('numberAccount'), on='numberAccount')
    dfCampaign = dfCampaign.join(dfNumberOperator.set_index('numberOperator'), on='numberOperator')
    dfCampaign = dfCampaign.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    dfCampaign = dfCampaign.join(dfNumberPop.set_index('numberPop'), on='numberPop')
    dfCampaign = dfCampaign[dfCampaign['cpt'] > 0]
    dfCampaign = dfCampaign[['Account','Operator','country','PoP','sessions']]

    df2 = df2.join(dfNumberAccount.set_index('Account'), on='Account')
    df2 = df2.join(dfNumberOperator.set_index('Operator'), on='Operator')
    df2 = df2.join(dfNumberCountry.set_index('country'), on='country')
    df2 = df2.join(dfNumberPop.set_index('PoP'), on='PoP')
    df2 = df2.groupby(['numberAccount','numberOperator','numberCountry','numberPop'], as_index=False).sum()
    df2 = df2.join(dfNumberAccount.set_index('numberAccount'), on='numberAccount')
    df2 = df2.join(dfNumberOperator.set_index('numberOperator'), on='numberOperator')
    df2 = df2.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df2 = df2.join(dfNumberPop.set_index('numberPop'), on='numberPop')

    df2 = df2.dropna(subset = ['instances', 'leads', 'sessions'])
    df2 = df2[['Account','Operator','country','PoP', 'sessions']]
    df2 = df2.rename(columns = {'sessions': 'allSessions'})

    dfSourceUTM = pd.merge(df2,dfSource,on=['Account','Operator','country','PoP'])
    dfSourceUTM['utmSourceCompletionRate'] = dfSourceUTM['sessions']/dfSourceUTM['allSessions']
    dfSourceUTM = dfSourceUTM[['Account','Operator','country','PoP', 'utmSourceCompletionRate']]

    dfMediumUTM = pd.merge(df2,dfMedium,on=['Account','Operator','country','PoP'])
    dfMediumUTM['utmMediumCompletionRate'] = dfMediumUTM['sessions']/dfMediumUTM['allSessions']
    dfMediumUTM = dfMediumUTM[['Account','Operator','country','PoP', 'utmMediumCompletionRate']]

    dfCampaignUTM = pd.merge(df2,dfCampaign,on=['Account','Operator','country','PoP'])
    dfCampaignUTM['utmCampaignCompletionRate'] = dfCampaignUTM['sessions']/dfCampaignUTM['allSessions']
    dfCampaignUTM = dfCampaignUTM[['Account','Operator','country','PoP', 'utmCampaignCompletionRate']]
  
    df3 = pd.merge(df3,dfSourceUTM,on=['Account','Operator','country','PoP'])
    df3 = pd.merge(df3,dfMediumUTM,on=['Account','Operator','country','PoP'])
    df3 = pd.merge(df3,dfCampaignUTM,on=['Account','Operator','country','PoP'])

    df3['leadWeightUSCR'] = df3['leads']*df3['utmSourceCompletionRate'] 
    df3['leadWeightUMCR'] = df3['leads']*df3['utmMediumCompletionRate'] 
    df3['leadWeightUCCR'] = df3['leads']*df3['utmCampaignCompletionRate'] 

    return df3.sort_values(['leads'], ascending = False)

pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N')

# If the filters are filled incorrectly at the top, for each graph that needs a PoP name, the 1st PoP of the pop function will be chosen by default

if analysisByPopLCR3 not in pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N')['PoP'] :   
  analysisByPopLCR3 = pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N')['PoP'].tolist()[0]

if analysisPopSankeyS1 not in pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N')['PoP'] :   
  analysisPopSankeyS1 = pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N')['PoP'].tolist()[0]

if analysisPopSankeyS2 not in pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N')['PoP'] :   
  analysisPopSankeyS2 = pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N')['PoP'].tolist()[0]



"""
### <font size='4px' color='#0066CC'>**Growth rates by PoP**</font>
"""

# Indications : 
# Calculations of growth rates for each concept analysed in pop without UTM completion rates
# Results are already in percentage 

def growthRatesPoP(account, operator, country) : 

    analysisData = pop(account, operator, country, 'Y', 'N',"all",'null','null','N').assign()
    comparisonData = pop(account, operator, country, 'Y', 'Y',"all",'null','null','N').assign()

    df = pd.merge(analysisData,comparisonData,on=['Account','Operator','country','PoP','touchpoint'])
    
    df['leadsGrowthRate'] = (df['leads_x']-df['leads_y'])/df['leads_y']*100
    df['impressionsGrowthRate'] = (df['impressions_x']-df['impressions_y'])/df['impressions_y']*100
    df['leadRevenueGrowthRate'] = (df['total_lead_value_incltaxes_x']-df['total_lead_value_incltaxes_y'])/df['total_lead_value_incltaxes_y']*100
    df['leadUnitValueGrowthRate'] = (df['leadUnitValue_x']-df['leadUnitValue_y'])/df['leadUnitValue_y']*100
    df['impressionUnitValueGrowthRate'] = (df['impressionUnitValue_x']-df['impressionUnitValue_y'])/df['impressionUnitValue_y']*100
    df['leadConversionRateGrowthRate'] = (df['leadConversionRate_x']-df['leadConversionRate_y'])/df['leadConversionRate_y']*100
    df = df[['Account','Operator','country','PoP','touchpoint','leadsGrowthRate','impressionsGrowthRate','leadRevenueGrowthRate','leadUnitValueGrowthRate', 'impressionUnitValueGrowthRate','leadConversionRateGrowthRate']]
    
    return df

growthRatesPoP(analysisAccount, analysisOperator, analysisCountry)

"""# <font color='#00458A'>**Analysis**</font>

## <font size='4px' color='#0066CC'>**Countries**</font>

### <font size='3px' color='#007FFF'>TOP Countries by account</font>
"""

# Indications : 
# Displays a TOP countries for the Account analysed according to the number of minimum_item_qty and the number of leads

def topCountries() : 

  df = necessaryData_product1OnlyAccount.assign()
  df['leads'] = 1

  df = df.groupby(['country'], as_index=False).sum()
  df = df[df['leads'] > 0]

  # Calculation of the threshold calculated only with the data of the Account

  # Deletion of minimum_item_qty equal to 0
  df6 = df[df['minimum_item_qty']>0]
  # Calculation of the 1st, 3rd quartile and the interquartile range
  quartile1 = df6['minimum_item_qty'].quantile(0.25)
  quartile3 = df6['minimum_item_qty'].quantile(0.75)
  interquartileRange = quartile3 - quartile1

  # Calculation of the interval without the outliers
  intervalMin = quartile1-1.5*interquartileRange
  intervalMax = quartile3+1.5*interquartileRange
  if intervalMin < 0 : intervalMin = 0

  # Deletion of minimum_item_qty not belonging to the interval
  df6 = df6[(df6['minimum_item_qty'] <= intervalMax) & (df6['minimum_item_qty'] >= intervalMin)]
  
  # Average calculation
  minimum_item_qtyMean = df6['minimum_item_qty'].mean()

  threshold = minimum_item_qtyMean
  threshold = round(threshold)

  # Graph creation
  figCountries = px.scatter(df, x="leads", y="minimum_item_qty", 
                 hover_name="country", hover_data=["minimum_item_qty"],color="country", size="total_amount",size_max=25, title= 'Repartition of countries per minimum item quantity per leads (threshold = {} minimum item quantity)'.format(threshold))
  # Threshold line
  figCountries.add_trace(go.Scatter(
        name='Minimum item quantity threshold',
        x = [0, df['leads'].max()*1.2],
        y = [threshold, threshold],
        mode = "lines",
        marker = dict(color = 'rgb(255,0,0, 0.8)')
    ),row=1, col=1)
  
  figCountries.update_traces(marker_sizemin=3, selector=dict(type='scatter'))

  return figCountries

topCountries()

"""## <font size='4px' color='#0066CC'>**Lead conversion rate**</font>

### <font size='3px' color='#007FFF'>TOP PoP by Account, Operator AND/OR Country</font>
"""

# Indication : 
# Displays a TOP PoP for the Account analysed according to the lead conversion rate and the number of leads
# touchpointType must be defined
# Filters on countries and operators can be added, otherwise set the variables equal to "null"
# touchpointType can be equal to 'all' : there is no threshold

def topPoPLCR(byOperator, byCountry, touchpointType) :

  df0 = necessaryData_account1OnlyAccount.assign()
  if touchpointType != 'all' : 
    df0 = df0[df0['touchpoint'] == touchpointType]

  df2 = df0.assign()

  # Filter on country and operator
  if (byCountry != 'null') & (byOperator == 'null') : 
    df2 = df2[df2['country'] == byCountry]
    df2 = df2.groupby(['country','PoP'], as_index=False).sum()
    df2 = df2[['country','PoP','leads','impressions','total_lead_value_incltaxes','cpt']]
    df2['PoP'] = df2[['country', 'PoP']].apply(' | '.join, axis=1)
  elif (byCountry == 'null') & (byOperator != 'null') :
    df2 = df2[df2['Operator'] == byOperator]
    df2['PoP'] = df2[['country', 'PoP']].apply(' | '.join, axis=1)
    df2 = df2.groupby(['Operator','PoP'], as_index=False).sum()
    df2 = df2[['Operator','PoP','leads','impressions','total_lead_value_incltaxes','cpt']]
  elif (byCountry != 'null') & (byOperator != 'null') : 
    df2['PoP'] = df2[['country', 'PoP']].apply(' | '.join, axis=1)   

    # Assigns a number to each operator to facilitate the group by
    dfNumberOperator = df2.assign()
    dfNumberOperator['numberOperator'] = 0
    dfNumberOperator = dfNumberOperator[['Operator', 'numberOperator']]
    dfNumberOperator = dfNumberOperator.groupby(['Operator'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberOperator.shape[0] : 
      for i in range(dfNumberOperator.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberOperator['numberOperator'] = numberList
    
    df2 = df2.join(dfNumberOperator.set_index('Operator'), on='Operator')
    
    # Assigns a number to each country to facilitate the group by
    dfNumberCountry = df2.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df2 = df2.join(dfNumberCountry.set_index('country'), on='country')

    # Assigns a number to each PoP to facilitate the group by
    dfNumberPop = df2.assign()
    dfNumberPop['numberPoP'] = 0
    dfNumberPop = dfNumberPop[['PoP', 'numberPoP']]
    dfNumberPop = dfNumberPop.groupby(['PoP'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberPop.shape[0] : 
      for i in range(dfNumberPop.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberPop['numberPoP'] = numberList
    
    df2 = df2.join(dfNumberPop.set_index('PoP'), on='PoP')

    df2 = df2[(df2['Operator'] == byOperator) & (df2['country'] == byCountry)]
    df2 = df2.groupby(['numberOperator','numberCountry','numberPoP'], as_index=False).sum()
    df2 = df2.join(dfNumberPop.set_index('numberPoP'), on='numberPoP')
    df2 = df2.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df2 = df2.join(dfNumberOperator.set_index('numberOperator'), on='numberOperator')

  elif (byOperator == 'null') & (byCountry == 'null') :
    df2['PoP'] = df2[['country', 'PoP']].apply(' | '.join, axis=1)  
    df2 = df2.groupby(['PoP'], as_index=False).sum()
    df2 = df2[['PoP','leads','impressions','total_lead_value_incltaxes','cpt']]
  df2 = df2[df2['cpt'] > 0]
  df2['size'] = df2['total_lead_value_incltaxes']+1

  if touchpointType != 'all' : 
    threshold = thresholdLeadConversionRateByPop(touchpointType)*100

  # Lead conversion rate calculation
  df2['leadConversionRate'] = (df2['leads']/df2['impressions'])*100
  df2.loc[df2['impressions']==0,'leadConversionRate']=0
  df2 = df2.sort_values(by=['leadConversionRate'])

  # Graph creation
  if touchpointType != 'all' :

    if (byOperator == 'null') & (byCountry == 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate"], color='PoP', size="total_lead_value_incltaxes",size_max=25,title= 'Repartition of PoP {} per lead conversion rate per leads (threshold = {}%)'.format(touchpointType, f"{threshold:.2f}"))
    elif (byOperator == 'null') & (byCountry != 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate"], color='PoP', size="total_lead_value_incltaxes",size_max=25,title= 'Repartition of PoP {} per lead conversion rate per leads in {} (threshold = {}%)'.format(touchpointType, byCountry, f"{threshold:.2f}"))
    elif (byOperator != 'null') & (byCountry == 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate"], color='PoP', size="total_lead_value_incltaxes",size_max=25,title= 'Repartition of PoP {} per lead conversion rate per leads for the operator {} (threshold = {}%)'.format(touchpointType, byOperator, f"{threshold:.2f}"))
    elif (byOperator != 'null') & (byCountry != 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate","total_lead_value_incltaxes"], color='PoP', size="size",size_max=25,title= 'Repartition of PoP {} per lead conversion rate per leads for the operator {} in {} (threshold = {}%)'.format(touchpointType,byOperator, byCountry, f"{threshold:.2f}"))
      
    # Threshold line
    fig.add_trace(go.Scatter(
          name='Lead conversion rate threshold',
          x = [0, df2['leads'].max()*2],
          y = [threshold, threshold],
          mode = "lines",
          marker = dict(color = 'rgb(255,0,0, 0.8)')
      ),row=1, col=1)
    fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))

    df2 = df2[df2['leadConversionRate'] < threshold]
    df2 = df2.sort_values(['leadConversionRate'])

    if df2.shape[0] > 0 : 
      print("PoPs that are not performing enough : ")
      for i in df2['PoP'].tolist() :
        print(i)

  # Graph creation
  else : 
    if (byOperator == 'null') & (byCountry == 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate"], color='PoP', size="total_lead_value_incltaxes",size_max=25,title= 'Repartition of PoP per lead conversion rate per leads')
    elif (byOperator == 'null') & (byCountry != 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate"], color='PoP', size="total_lead_value_incltaxes",size_max=25,title= 'Repartition of PoP per lead conversion rate per leads in {}'.format(byCountry))
    elif (byOperator != 'null') & (byCountry == 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate"], color='PoP', size="total_lead_value_incltaxes",size_max=25,title= 'Repartition of PoP per lead conversion rate per leads for the operator {}'.format(byOperator))
    elif (byOperator != 'null') & (byCountry != 'null') :
      fig = px.scatter(df2, x="leads", y="leadConversionRate", 
                  hover_name='PoP', hover_data=["leadConversionRate","total_lead_value_incltaxes"], color='PoP', size="size",size_max=25,title= 'Repartition of PoP per lead conversion rate per leads for the operator {} in {}'.format(byOperator, byCountry))
      

  return fig
 
topPoPLCR(analysisByOperatorLCR1, analysisByCountryLCR1, analysisTouchpointTypeLCR1)

"""### <font size='3px' color='#007FFF'>PoPs under the lead conversion rate threshold by touchpoint</font>"""

# Indication : 
# Displays all PoPs that are below the lead conversion rate threshold
# touchpointType must be defined
# If touchpointType is equal to 'all', this function will display nothing

def popUnderThresholdLeadConversionRate(touchpointType) :

  df2 = necessaryData_account1OnlyAccount.assign()
  df2 = df2[df2['touchpoint'] == touchpointType]

  df2['PoP'] = df2[['country', 'PoP']].apply(' | '.join, axis=1)   
  df2 = df2.groupby(['PoP'], as_index=False).sum()
  df2 = df2[df2['cpt'] > 0]
  df2 = df2[['PoP','leads','impressions','total_lead_value_incltaxes']]

  # Lead conversion rate calculation
  df2['leadConversionRate'] = (df2['leads']/df2['impressions'])
  df2.loc[df2['impressions']==0,'leadConversionRate']=0

  threshold = thresholdLeadConversionRateByPop(touchpointType)
  df3 = df2[df2['leadConversionRate'] < threshold]
  df3['leadConversionRate'] = df3['leadConversionRate']*100
  df3 = df3.sort_values(by=['leads'], ascending = False)
  df3 = df3[df3['leadConversionRate'] > 0]
  threshold = threshold*100

  return df3

if analysisTouchpointTypeLCR2 != 'all' : 
  popUnderThresholdLeadConversionRate(analysisTouchpointTypeLCR2)

"""### <font size='3px' color='#007FFF'>Lead conversion rate by source by PoP</font>"""

# Indications : 
# Displays the sources of a PoP based on its lead conversion rate and number of leads
# The threshold is calculated based on all Swaven data by type of PoP
# Filters on countries can be added, otherwise set the variable equal to "null"
# touchpointType and pop must be defined
# result and reco are used in the part Recommendation, to display sources below the threshold on the HTML file : 'Y' OR 'N' (Y if it is used in Recommendations)

def sourceUTMPop(utmType, pop, country, result,reco) : 

  df = necessaryData_utm_with_termOnlyAccount.assign()
  df = df[(df['PoP'] == pop)]
  if country != "null" : 
    df = df[(df['country'] == country)]

  touchpoint = df['touchpoint'].tolist()[0]

  threshold = thresholdLeadConversionRateByPop(touchpoint)*100

  if utmType == 'source' : 
    source = 's_utm_source'
  elif utmType == 'medium' : 
    source = 's_utm_medium'
  elif utmType == 'campaign' : 
    source ='s_utm_campaign'
  else : 
    source = 's_utm_term'

  df = df[['PoP','country',source,'leads','impressions']]

  df['cpt']=1
  df = df.groupby([source], as_index=False).sum()
  df= df[df['cpt'] > 0]
  df['leadConversionRate'] = df['leads']/df['impressions']*100
  df = df[[source, 'leads', 'impressions','leadConversionRate']]
  df = df.sort_values(['leadConversionRate'],ascending=False)

  # Graph creation
  if result == 'N' : 
    if country != 'null' : 
      fig = px.scatter(df, x="leads", y="leadConversionRate", log_x=True,
                  hover_name=source, hover_data=["leadConversionRate"], color=source, size="impressions",size_max=25, title= 'Repartition of {} per lead conversion rate per leads for the PoP {} in {} (threshold = {}%)'.format(source, pop, country, f"{threshold:.2f}"))
    else : 
      fig = px.scatter(df, x="leads", y="leadConversionRate", log_x=True,
                  hover_name=source, hover_data=["leadConversionRate"], color=source, size="impressions",size_max=25, title= 'Repartition of {} per lead conversion rate per leads for the PoP {} (threshold = {}%)'.format(source, pop, f"{threshold:.2f}"))
     
    # Threshold line
    fig.add_trace(go.Scatter(
          name='Lead conversion rate threshold ({} %)'.format(f"{threshold:.2f}"),
          x = [0, df['leads'].max()*2],
          y = [threshold, threshold],
          mode = "lines",
          marker = dict(color = 'rgb(255,0,0, 0.8)')
      ),row=1, col=1)
    fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))
    
    if reco == 'Y' : 
      return fig
    else : 
      fig.show()

  df = df[df['leadConversionRate'] < threshold]
  print('{} under the threshold of PoP {} :'.format(source,touchpoint))
  return df.sort_values(['impressions'], ascending = False).head(5)

sourceUTMPop(analysisUtmTypeLCR3, analysisByPopLCR3, analysisByCountryLCR3, 'N','N')

"""
### <font size='3px' color='#007FFF'>Correction if the lead conversion rate is equal to the threshold</font>"""

# Indications : 
# Displays the number of leads and lead value if the PoPs below the thresholds had a lead conversion rate equal to the threshold
# listPop is a dataframe with all underperforming PoPs
# touchpointType and listPop must be defined
# It only shows the PoPs below the lead conversion rate threshold by type of PoP 

def correction(listPop, touchpointType) : 

  threshold = thresholdLeadConversionRateByPop(touchpointType)*100 
  listPop['leadsCorrection'] = listPop['leads']*threshold/listPop['leadConversionRate']
  listPop['total_lead_value_incltaxesCorrection'] = listPop['total_lead_value_incltaxes']*threshold/listPop['leadConversionRate']
  listPop['leadConversionRateCorrection'] = threshold

  listPop['leadsGrowth'] = listPop['leadsCorrection'] - listPop['leads']
  listPop['total_lead_value_incltaxesGrowth'] = listPop['total_lead_value_incltaxesCorrection'] - listPop['total_lead_value_incltaxes']
  listPop['leadConversionRateGrowth'] = listPop['leadConversionRateCorrection'] - listPop['leadConversionRate']

  listPop = listPop[['PoP','leads','leadsCorrection','leadsGrowth','total_lead_value_incltaxes','total_lead_value_incltaxesCorrection','total_lead_value_incltaxesGrowth','leadConversionRate','leadConversionRateCorrection','leadConversionRateGrowth']]

  return listPop

if analysisTouchpointTypeLCR4 != 'all' : 
  correction(popUnderThresholdLeadConversionRate(analysisTouchpointTypeLCR4), analysisTouchpointTypeLCR4)

"""## <font size='4px' color='#0066CC'>**UTM completion rate**</font>

### <font size='3px' color='#007FFF'>TOP PoP by Account, Operator AND/OR Country</font>
"""

# Indications : 
# Displays a TOP PoP for the Account analysed according to the UTM completion rate and the number of leads
# touchpointType and utmType must be defined
# touchpointType can be equal to 'all' : there is no threshold
# Filters on countries and operators can be added, otherwise set the variables equal to "null"


def utmCompletionRateDef(byOperator, byCountry, utmType, touchpointType, account, operator, country):

  if utmType == 'source' : 
      utmCompletion = 'utmSourceCompletionRate'
  elif utmType == 'medium' : 
      utmCompletion = 'utmMediumCompletionRate'
  else :
      utmCompletion = 'utmCampaignCompletionRate'

  mainFiguresPoP = pop(account, operator, country, 'N','N','all','null','null','N')
  df = mainFiguresPoP.assign()

  if analysisTouchpointTypeUTM1 != 'all' : 
    df = mainFiguresPoP[mainFiguresPoP['touchpoint'] == touchpointType]

    threshold = thresholdUtmCompletionRateByPop(touchpointType, utmType)*100
    df[utmCompletion] = df[utmCompletion]*100
    df['PoP'] = df[['country', 'PoP']].apply(' | '.join, axis=1)  

    # Graph creation
    fig = px.scatter(df, x="leads", y=utmCompletion, log_x=True,
                  hover_name="PoP", hover_data=[utmCompletion], color="PoP", size="total_lead_value_incltaxes",size_max=25, title= 'Repartition of PoP {} per UTM completion rate per leads (threshold = {}%)'.format(touchpointType, f"{threshold:.2f}"))
   
    # Threshold line
    fig.add_trace(go.Scatter(
          name='UTM completion rate threshold',
          x = [0, df['leads'].max()*2],
          y = [threshold, threshold],
          mode = "lines",
          marker = dict(color = 'rgb(255,0,0, 0.8)')
      ),row=1, col=1)
    fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))
  else : 
    df[utmCompletion] = df[utmCompletion]*100
    df['PoP'] = df[['country', 'PoP']].apply(' | '.join, axis=1)  

    # Graph creation
    fig = px.scatter(df, x="leads", y=utmCompletion, log_x=True,
                  hover_name="PoP", hover_data=[utmCompletion], color="PoP", size="total_lead_value_incltaxes",size_max=25, title= 'Repartition of PoP per UTM completion rate per leads')

  return fig

utmCompletionRateDef(analysisByOperatorUTM1, analysisByCountryUTM1, analysisUtmTypeUTM1, analysisTouchpointTypeUTM1, analysisAccount, analysisOperator, analysisCountry)

"""### <font size='3px' color='#007FFF'>PoPs under the UTM completion rate threshold by touchpoint and type of UTM</font>"""

# Indication : 
# Displays all PoPs that are below the UTM completion rate threshold
# touchpointType and utmType must be defined
# If touchpointType is equal to 'all', this function will display nothing

def popUnderThresholdUtmCompletionRate(touchpointType, utmType, account, operator, country) :

  if utmType == 'source' : 
      utmCompletion = 'utmSourceCompletionRate'
  elif utmType == 'medium' : 
      utmCompletion = 'utmMediumCompletionRate'
  else :
      utmCompletion = 'utmCampaignCompletionRate'

  mainFiguresPoP = pop(account, operator, country, 'N','N','all','null','null','N')

  df = mainFiguresPoP[mainFiguresPoP['touchpoint'] == touchpointType]

  threshold = thresholdUtmCompletionRateByPop(touchpointType, utmType)*100
  df[utmCompletion] = df[utmCompletion]*100
  df['PoP'] = df[['country', 'PoP']].apply(' | '.join, axis=1)  
  df = df[df[utmCompletion] < threshold]
  df = df[df['leads'] > 0]
  df = df[['Account', 'Operator', 'country', 'PoP', 'touchpoint', 'leads', 'impressions', 'total_lead_value_incltaxes', utmCompletion]]

  return df.sort_values(["leads"], ascending = False)

if analysisTouchpointTypeUTM2 != 'all' : 
  popUnderThresholdUtmCompletionRate(analysisTouchpointTypeUTM2, analysisUtmTypeUTM2, analysisAccount, analysisOperator, analysisCountry)

"""## <font size='4px' color='#0066CC'>**Products**</font>

### <font size='3px' color='#007FFF'>Average price of products</font>
"""

# Indications : 
# Displays the distribution of PoP by average price of their product that generate leads (AVG lead value)

def meanPriceProduct() : 

  df = necessaryData_product1OnlyAccount.assign()
  df2 = necessaryData_account1OnlyAccount.assign()

  
  df['PoP'] = df[['country', 'PoP']].apply(' | '.join, axis=1)
  df2 = df2[['pid','product_label']].drop_duplicates()

  df3 = df.join(df2.set_index('pid'), on='pid')
  df4 = df3.assign()
  df4 = df4[['product_label','prc']].drop_duplicates()
  df4 = df4.groupby(['product_label'], as_index=False).mean()

  meanPrice = df4['prc'].mean()

  df3['leads'] = 1

  df5 = df3.assign()
  df5 = df5[['PoP','prc','cpt']]
  df5 = df5.groupby(['PoP'], as_index=False).mean()
  df6 = df3.assign()
  df6 = df6[['PoP','leads','cpt']]
  df6 = df6.groupby(['PoP'], as_index=False).sum()
  df5 = df5[['PoP','prc']][df5['cpt'] > 0]
  df6 = df6[['PoP','leads']][df6['cpt'] > 0]

  df6 = df6.join(df5.set_index('PoP'), on='PoP')
  df6 = df6.rename(columns={'prc' : 'AVG_leadValue'})

  # Graph creation
  fig = px.scatter(df6, x="leads", y="AVG_leadValue", log_x=True,
                 hover_name='PoP', size = "AVG_leadValue", size_max = 25,hover_data=["AVG_leadValue"], color='PoP', title = "PoP distribution based on average lead value (for the entire account being analysed : {} {})".format(f"{meanPrice:.2f}",currencyName))
  
  # Threshold line
  fig.add_trace(go.Scatter(
        name='Average price',
        x = [0, df6['leads'].max()*2],
        y = [meanPrice, meanPrice],
        mode = "lines",
        marker = dict(color = 'rgb(255,0,0, 0.8)')
    ),row=1, col=1)
  fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))

  return fig
  
meanPriceProduct()

"""### <font size='3px' color='#007FFF'>TOP Products by Account, Operator, Country OR/AND PoP</font>"""

# Indications : 
# Displays a TOP product based on the number of minimum_item_qty and the number of leads
# The threshold is calculated based on the data of the analysed account
# If a product doesn't appear on the scatter plot, its number of minimum_item_qty is null.
# Filters on countries, operators and PoPs can be added, otherwise set the variables equal to "null"

def analysisProductMinItemQty(byPop, byOperator, byCountry) : 
  
  df0 = necessaryData_product1OnlyAccount.assign()

  df = df0.assign()
  if byCountry != 'null': 
    df = df[df['country'] == byCountry]
  
  if byOperator != 'null' : 
    df = df[df['Operator'] == byOperator]

  if byPop != 'null' : 
    df = df[df['PoP'] == byPop]

  if df.shape[0] == 0 : 
    return "Mauvais filtre"
  
  df8 = df.assign()
  df8 = df8[['product_label1','prc']].drop_duplicates().groupby(['product_label1'], as_index=False).mean()
  df4 = df.assign()
  df4 = df4.groupby(['product_label1'], as_index=False).size().sort_values(['size'], ascending=False)
  df4 = df4.rename(columns={'size' : 'leads'})
  df5 = df.assign()
  df5 = df5.groupby(['product_label1'], as_index=False).sum()
  df5 = df5.join(df4.set_index('product_label1'), on='product_label1')
  df5 = df5[['product_label1', 'minimum_item_qty','leads']]
  df5 = df5.join(df8.set_index('product_label1'), on='product_label1')

  # Deletion of minimum_item_qty equal to 0
  df6 = df5.assign()
  df6 = df6[df5['minimum_item_qty']>0]
  # Calculation of the 1st, 3rd quartile and the interquartile range
  quartile1 = df6['minimum_item_qty'].quantile(0.25)
  quartile3 = df6['minimum_item_qty'].quantile(0.75)
  interquartileRange = quartile3 - quartile1

  # Calculation of the interval without the outliers
  intervalMin = quartile1-1.5*interquartileRange
  intervalMax = quartile3+1.5*interquartileRange
  if intervalMin < 0 : intervalMin = 0

  # Deletion of minimum_item_qty not belonging to the interval
  df6 = df6[(df6['minimum_item_qty'] <= intervalMax) & (df6['minimum_item_qty'] >= intervalMin)]
  
  # Average calculation
  minimum_item_qtyMean = df6['minimum_item_qty'].mean()

  threshold = minimum_item_qtyMean
  threshold = round(threshold)

  df5 = df5[df5['minimum_item_qty']>0]

  # Graph creation
  if (byCountry == 'null') & (byOperator == 'null') & (byPop == 'null') : 
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads (threshold = {} minimum item quantity)'.format(threshold))
  elif (byCountry != 'null') & (byOperator == 'null') & (byPop == 'null'): 
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads in {} (threshold = {} minimum item quantity)'.format(byCountry,threshold))
  elif (byCountry != 'null') & (byOperator != 'null') & (byPop == 'null'): 
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads for the operator {} in {} (threshold = {} minimum item quantity)'.format(byOperator,byCountry,threshold))
  elif (byCountry != 'null') & (byOperator == 'null') & (byPop != 'null'): 
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads for the PoP {} in {} (threshold = {} minimum item quantity)'.format(byPop,byCountry,threshold))
  elif (byCountry == 'null') & (byOperator != 'null') & (byPop != 'null'): 
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads for the operator {} for the PoP {} (threshold = {} minimum item quantity)'.format(byOperator,byPop,threshold))
  elif (byCountry == 'null') & (byOperator != 'null') & (byPop == 'null'): 
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads for the operator {} (threshold = {} minimum item quantity)'.format(byOperator,threshold))
  elif (byCountry == 'null') & (byOperator == 'null') & (byPop != 'null') :
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads for the PoP {} (threshold = {} minimum item quantity)'.format(byPop,threshold))
  elif (byCountry != 'null') & (byOperator != 'null') & (byPop != 'null'): 
    fig = px.scatter(df5, x="leads", y="minimum_item_qty", log_x=True,
                 hover_name="product_label1", hover_data=["minimum_item_qty"],color="product_label1", size="prc",size_max=25,title= 'Repartition of products per minimum item quantity per leads for the operator {} in {} for the PoP {} (threshold = {} minimum item quantity)'.format(byOperator,byCountry,byPop,threshold))
  
   # Threshold line
  fig.add_trace(go.Scatter(
        name='Minimum item quantity threshold',
        x = [0, df5['leads'].max()*2],
        y = [threshold, threshold],
        mode = "lines",
        marker = dict(color = 'rgb(255,0,0, 0.8)')
    ),row=1, col=1)
  
  fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))

  # To display products that are below the threshold
  #return df5.sort_values("leads", ascending=False)
  
  return fig

 
analysisProductMinItemQty(analysisByPopP1, analysisByOperatorP1, analysisByCountryP1)

"""## <font size='4px' color='#0066CC'>**Retailers**</font>

### <font size='3px' color='#007FFF'>Sales conversion rate by lead</font>
"""

# Indication : 
# Thresholds are calculated based on the data of the analysed account
# best : is used for Sankey, to display only retailers above the two thresholds
# forReco : is used in the part Recommendations
# Filter on PoPs can be added, otherwise set the variable equal to "null"

def retailersSales(best, forReco, pop) : 


  df = necessaryDataSales1OnlyAccount.assign()
  df2 = necessaryData_product1OnlyAccount.assign()

  df2['leads'] = 1
  df2['retailer_id'] = pd.to_numeric(df2['retailer_id'])
  df2['swaven_provider_id'] = pd.to_numeric(df2['swaven_provider_id'])

  # For the group by
  dfNumberCountry = df2.assign()
  dfNumberCountry['numberCountry'] = 0
  dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
  dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
  numberList1 = []
  while len(numberList1) != dfNumberCountry.shape[0] : 
    for i in range(dfNumberCountry.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList1.append(number)
    numberList1 = list(set(numberList1))
  dfNumberCountry['numberCountry'] = numberList1
  
  df2 = df2.join(dfNumberCountry.set_index('country'), on='country')

  dfNumberRetailer = df2.assign()
  dfNumberRetailer['numberRetailer'] = 0
  dfNumberRetailer = dfNumberRetailer[['retailer', 'numberRetailer']]
  dfNumberRetailer = dfNumberRetailer.groupby(['retailer'], as_index=False).sum()
  numberList2 = []
  while len(numberList2) != dfNumberRetailer.shape[0] : 
    for i in range(dfNumberRetailer.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList2.append(number)
    numberList2 = list(set(numberList2))
  dfNumberRetailer['numberRetailer'] = numberList2
  
  df2 = df2.join(dfNumberRetailer.set_index('retailer'), on='retailer')

  # We have per retailer the number of leads and the lead value
  df2 = df2.groupby(['swaven_provider_id','retailer_id','numberRetailer','numberCountry'], as_index=False).sum()
  df2 = df2.join(dfNumberRetailer.set_index('numberRetailer'), on='numberRetailer')
  df2 = df2.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')

  df2 = df2[df2['leads']>1]
  df2 = df2[['swaven_provider_id','retailer','country','retailer_id','leads','prc']]


  # We have per retailer the number of minimum_item_qty and the sale value
  df = df.groupby(['retailer_code','swaven_retailer_id','swaven_provider_id','country'], as_index=False).sum()
  df = df[df['minimum_item_qty']>0]
  df = df[['swaven_provider_id','swaven_retailer_id','retailer_code','country','line_item_value','minimum_item_qty']]
  df = df.rename(columns = {'swaven_retailer_id': 'retailer_id'})

  # Join the two dataframes
  df = pd.merge(df, df2, on=['swaven_provider_id','retailer_id','country'])

  df['retailer'] = df[['retailer', 'country']].apply(' '.join, axis=1)

  # Calculation of the sales conversion rate (sale value/lead value)
  df['SalesConversionRate'] = df['minimum_item_qty']/df['leads']*100
  df = df.rename(columns = {'line_item_value': 'sales_value'})

  

  # Determination of the sale conversion rate threshold
  # Calculation of the 1st, 3rd quartile and the interquartile range
  quartileSCR1 = df['SalesConversionRate'].quantile(0.25)
  quartileSCR3 = df['SalesConversionRate'].quantile(0.75)
  interquartileRangeSCR = quartileSCR3 - quartileSCR1

  # Calculation of the interval without the outliers
  intervalMinSCR = quartileSCR1-1.5*interquartileRangeSCR
  intervalMaxSCR = quartileSCR3+1.5*interquartileRangeSCR
  if intervalMinSCR < 0 : intervalMinSCR = 0

  # Deletion of sale conversion rates not belonging to the interval
  df2 = df.assign()
  df2 = df2[(df2['SalesConversionRate'] <= intervalMaxSCR) & (df2['SalesConversionRate'] >= intervalMinSCR)]
  
  # Weighted average calculation
  SalesConversionRateMean = (df2['leads']*df2['SalesConversionRate']).sum()/df2['leads'].sum()
  standardErrorSalesConversionRate  = math.sqrt((SalesConversionRateMean/100*(1-SalesConversionRateMean/100))/df2.shape[0])
  marginErrorSalesConversionRate = 1.96*standardErrorSalesConversionRate
  thresholdSalesConversionRate = SalesConversionRateMean - marginErrorSalesConversionRate

  # Determination of the lead threshold
  # Calculation of the 1st, 3rd quartile and the interquartile range
  quartileLeads1 = df['leads'].quantile(0.25)
  quartileLeads3 = df['leads'].quantile(0.75)
  interquartileRangeSCR = quartileLeads3 - quartileLeads1

  # Calculation of the interval without the outliers
  intervalMinLeads = quartileLeads1-1.5*interquartileRangeSCR
  intervalMaxLeads = quartileLeads3+1.5*interquartileRangeSCR
  if intervalMinLeads < 0 : intervalMinLeads = 0

  # Deletion of lead not belonging to the interval
  df3 = df.assign()
  df3 = df3[(df3['leads'] <= intervalMaxLeads) & (df3['leads'] >= intervalMinLeads)]

  
  # Average calculation
  thresholdLeads = df3['leads'].mean()

  df4 = df.assign()
  df4 = df4[(df4['leads'] > thresholdLeads) & (df4['SalesConversionRate'] > thresholdSalesConversionRate)]

  df5 = df.assign()
  df5 = df5[(df5['leads'] < thresholdLeads) & (df5['SalesConversionRate'] < thresholdSalesConversionRate)]

  df.loc[df['sales_value'] < 0, 'sales_valueBis'] = 0
  df.loc[df['sales_value'] >= 0, 'sales_valueBis'] = df['sales_value']

  if best == False : 
    # Graph creation
    fig = px.scatter(df, x="leads", y="SalesConversionRate", 
                  hover_name="retailer", hover_data=["SalesConversionRate"],color="retailer", size="sales_valueBis",size_max=25,title= 'Repartition of retailers per sales conversion rate per leads (SCR threshold : {} % - Lead threshold : {})'.format(f"{thresholdSalesConversionRate:.2f}",round(thresholdLeads)))
    
    # Sale conversion rate threshold line
    fig.add_trace(go.Scatter(
          name='Sales conversion rate threshold',
          x = [0, df['leads'].max()*1.1],
          y = [thresholdSalesConversionRate, thresholdSalesConversionRate],
          mode = "lines",
          marker = dict(color = 'rgb(255,0,0, 0.8)')
      ),row=1, col=1)
    
    # Leads threshold line
    fig.add_trace(go.Scatter(
          name='Leads threshold',
          x = [thresholdLeads, thresholdLeads],
          y = [0, df['SalesConversionRate'].max()*1.1],
          mode = "lines",
          marker = dict(color = 'rgb(70,130,180)')
      ),row=1, col=1)

    fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))

    if forReco == False : 
      return fig
    else : 
      df5['thresholdSCR'] = thresholdSalesConversionRate
      df5['thresholdLead'] = thresholdLeads
      return df5.sort_values(["leads"], ascending = False)
  else : 
    return df4

retailersSales(False,False,analysisByPoPR1)

"""### <font size='3px' color='#007FFF'>Sale conversion rate by AVG lead value</font>"""

# Indication : 
# Thresholds are calculated based on the data of the analysed account
# best : is used for Sankey, to display only retailers above the two thresholds
# forReco : is used in the part Recommendations
# Filter on PoPs can be added, otherwise set the variable equal to "null"

def retailersSalesAVGLeadValue(best, forReco, pop) : 


  df = necessaryDataSales1OnlyAccount.assign()
  df2 = necessaryData_product1OnlyAccount.assign()

  df2['leads'] = 1
  df2['retailer_id'] = pd.to_numeric(df2['retailer_id'])
  df2['swaven_provider_id'] = pd.to_numeric(df2['swaven_provider_id'])

  # For the group by
  dfNumberCountry = df2.assign()
  dfNumberCountry['numberCountry'] = 0
  dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
  dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
  numberList1 = []
  while len(numberList1) != dfNumberCountry.shape[0] : 
    for i in range(dfNumberCountry.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList1.append(number)
    numberList1 = list(set(numberList1))
  dfNumberCountry['numberCountry'] = numberList1
  
  df2 = df2.join(dfNumberCountry.set_index('country'), on='country')

  dfNumberRetailer = df2.assign()
  dfNumberRetailer['numberRetailer'] = 0
  dfNumberRetailer = dfNumberRetailer[['retailer', 'numberRetailer']]
  dfNumberRetailer = dfNumberRetailer.groupby(['retailer'], as_index=False).sum()
  numberList2 = []
  while len(numberList2) != dfNumberRetailer.shape[0] : 
    for i in range(dfNumberRetailer.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList2.append(number)
    numberList2 = list(set(numberList2))
  dfNumberRetailer['numberRetailer'] = numberList2
  
  df2 = df2.join(dfNumberRetailer.set_index('retailer'), on='retailer')

  df2AVGLeadValue = df2.assign()

  # We have per retailer the number of leads and the lead value
  df2 = df2.groupby(['swaven_provider_id','retailer_id','numberRetailer','numberCountry'], as_index=False).sum()
  df2 = df2.join(dfNumberRetailer.set_index('numberRetailer'), on='numberRetailer')
  df2 = df2.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')

  df2 = df2[df2['leads']>1]
  df2 = df2[['swaven_provider_id','retailer','country','retailer_id','leads']]
  

  df2AVGLeadValue = df2AVGLeadValue.groupby(['swaven_provider_id','retailer_id','numberRetailer','numberCountry'], as_index=False).mean()
  df2AVGLeadValue = df2AVGLeadValue.join(dfNumberRetailer.set_index('numberRetailer'), on='numberRetailer')
  df2AVGLeadValue = df2AVGLeadValue.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')

  df2AVGLeadValue = df2AVGLeadValue[df2AVGLeadValue['leads']>0]
  df2AVGLeadValue = df2AVGLeadValue[['swaven_provider_id','retailer','country','retailer_id','prc']]
  df2AVGLeadValue = df2AVGLeadValue.rename(columns = {'prc': 'AVG_leadValue'})

  df2 = pd.merge(df2, df2AVGLeadValue, on=['swaven_provider_id','retailer','retailer_id','country'])


  # We have per retailer the number of minimum_item_qty and the sale value
  df = df.groupby(['retailer_code','swaven_retailer_id','swaven_provider_id','country'], as_index=False).sum()
  df = df[df['minimum_item_qty']>0]
  df = df[['swaven_provider_id','swaven_retailer_id','retailer_code','country','line_item_value','minimum_item_qty']]
  df = df.rename(columns = {'swaven_retailer_id': 'retailer_id'})

  # Join the two dataframes
  df = pd.merge(df, df2, on=['swaven_provider_id','retailer_id','country'])

  df['retailer'] = df[['retailer', 'country']].apply(' '.join, axis=1)

  # Calculation of the sales conversion rate (sale value/lead value)
  df['SalesConversionRate'] = df['minimum_item_qty']/df['leads']*100
  df = df.rename(columns = {'line_item_value': 'sales_value'})

  

  # Determination of the sale conversion rate threshold
  # Calculation of the 1st, 3rd quartile and the interquartile range
  quartileSCR1 = df['SalesConversionRate'].quantile(0.25)
  quartileSCR3 = df['SalesConversionRate'].quantile(0.75)
  interquartileRangeSCR = quartileSCR3 - quartileSCR1

  # Calculation of the interval without the outliers
  intervalMinSCR = quartileSCR1-1.5*interquartileRangeSCR
  intervalMaxSCR = quartileSCR3+1.5*interquartileRangeSCR
  if intervalMinSCR < 0 : intervalMinSCR = 0

  # Deletion of sale conversion rates not belonging to the interval
  df2 = df.assign()
  df2 = df2[(df2['SalesConversionRate'] <= intervalMaxSCR) & (df2['SalesConversionRate'] >= intervalMinSCR)]
  
  # Weighted average calculation
  SalesConversionRateMean = (df2['leads']*df2['SalesConversionRate']).sum()/df2['leads'].sum()
  standardErrorSalesConversionRate  = math.sqrt((SalesConversionRateMean/100*(1-SalesConversionRateMean/100))/df2.shape[0])
  marginErrorSalesConversionRate = 1.96*standardErrorSalesConversionRate
  thresholdSalesConversionRate = SalesConversionRateMean - marginErrorSalesConversionRate

  # Determination of the AVG_leadValue threshold
  # Calculation of the 1st, 3rd quartile and the interquartile range
  quartileLeads1 = df['AVG_leadValue'].quantile(0.25)
  quartileLeads3 = df['AVG_leadValue'].quantile(0.75)
  interquartileRangeSCR = quartileLeads3 - quartileLeads1

  # Calculation of the interval without the outliers
  intervalMinLeads = quartileLeads1-1.5*interquartileRangeSCR
  intervalMaxLeads = quartileLeads3+1.5*interquartileRangeSCR
  if intervalMinLeads < 0 : intervalMinLeads = 0

  # Deletion of lead not belonging to the interval
  df3 = df.assign()
  df3 = df3[(df3['AVG_leadValue'] <= intervalMaxLeads) & (df3['AVG_leadValue'] >= intervalMinLeads)]

  
  # Average calculation
  thresholdLeads = df3['AVG_leadValue'].mean()

  df4 = df.assign()
  df4 = df4[(df4['AVG_leadValue'] > thresholdLeads) & (df4['SalesConversionRate'] > thresholdSalesConversionRate)]

  df5 = df.assign()
  df5 = df5[(df5['AVG_leadValue'] < thresholdLeads) & (df5['SalesConversionRate'] < thresholdSalesConversionRate)]

  df.loc[df['sales_value'] < 0, 'sales_valueBis'] = 0
  df.loc[df['sales_value'] >= 0, 'sales_valueBis'] = df['sales_value']

  if best == False : 
    # Graph creation
    fig = px.scatter(df, x="AVG_leadValue", y="SalesConversionRate", 
                  hover_name="retailer", hover_data=["SalesConversionRate"],color="retailer", size="sales_valueBis",size_max=25,title= 'Repartition of retailers per sales conversion rate per AVG_leadValue (SCR threshold : {} % - AVG_leadValue threshold : {})'.format(f"{thresholdSalesConversionRate:.2f}",round(thresholdLeads)))
    
    # Sale conversion rate threshold line
    fig.add_trace(go.Scatter(
          name='Sales conversion rate threshold',
          x = [0, df['AVG_leadValue'].max()*1.1],
          y = [thresholdSalesConversionRate, thresholdSalesConversionRate],
          mode = "lines",
          marker = dict(color = 'rgb(255,0,0, 0.8)')
      ),row=1, col=1)
    
    # Leads threshold line
    fig.add_trace(go.Scatter(
          name='Leads threshold',
          x = [thresholdLeads, thresholdLeads],
          y = [0, df['SalesConversionRate'].max()*1.1],
          mode = "lines",
          marker = dict(color = 'rgb(70,130,180)')
      ),row=1, col=1)

    fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))

    if forReco == False : 
      return fig
    else : 
      df5['thresholdSCR'] = thresholdSalesConversionRate
      df5['thresholdLead'] = thresholdLeads
      return df5.sort_values(["leads"], ascending = False)
  else : 
    return df4

retailersSalesAVGLeadValue(False,False,analysisByPoPR2)

"""## <font size='4px' color='#0066CC'>**Sortie excel COTY HB without utm_medium**</font>"""

def append_df_to_excel(filename, df, sheetname='Sheet1', startrow=None,
                       truncate_sheet=False, 
                       **to_excel_kwargs):
    """
    Append a DataFrame [df] to existing Excel file [filename]
    into [sheet_name] Sheet.
    If [filename] doesn't exist, then this function will create it.

    Parameters:
      filename : File path or existing ExcelWriter
                 (Example: '/path/to/file.xlsx')
      df : dataframe to save to workbook
      sheet_name : Name of sheet which will contain DataFrame.
                   (default: 'Sheet1')
      startrow : upper left cell row to dump data frame.
                 Per default (startrow=None) calculate the last row
                 in the existing DF and write to the next row...
      truncate_sheet : truncate (remove and recreate) [sheet_name]
                       before writing DataFrame to Excel file
      to_excel_kwargs : arguments which will be passed to `DataFrame.to_excel()`
                        [can be dictionary]

    Returns: None
    """
    from openpyxl import load_workbook

    # ignore [engine] parameter if it was passed
    if 'engine' in to_excel_kwargs:
        to_excel_kwargs.pop('engine')

    writer = pd.ExcelWriter(filename, engine='openpyxl')

    # Python 2.x: define [FileNotFoundError] exception if it doesn't exist 
    try:
        FileNotFoundError
    except NameError:
        FileNotFoundError = IOError


    try:
        # try to open an existing workbook
        writer.book = load_workbook(filename)

        # get the last row in the existing Excel sheet
        # if it was not specified explicitly
        if startrow is None and sheetname in writer.book.sheetnames:
            startrow = writer.book[sheetname].max_row

        # truncate sheet
        if truncate_sheet and sheetname in writer.book.sheetnames:
            # index of [sheet_name] sheet
            idx = writer.book.sheetnames.index(sheetname)
            # remove [sheet_name]
            writer.book.remove(writer.book.worksheets[idx])
            # create an empty sheet [sheet_name] using old index
            writer.book.create_sheet(sheetname, idx)

        # copy existing sheets
        writer.sheets = {ws.title:ws for ws in writer.book.worksheets}
    except FileNotFoundError:
        # file does not exist yet, we will create it
        pass

    if startrow is None:
        startrow = 0

    # write out the new sheet
    df.to_excel(writer, sheetname, startrow=startrow, **to_excel_kwargs)

    # save the workbook
    writer.save()

def analysisCoty(account, operator, country) : 

  df = necessaryData_utm_with_termOnlyAccount.assign()
  df3 = necessaryData_product1OnlyAccount.assign()


  dfRetailer = necessaryData_product1OnlyAccount.assign()
  dfEachRetailer = necessaryData_product1OnlyAccount.assign()

  df3['leads'] = 1
  dfRetailer['leads'] = 1
  dfEachRetailer['leads'] = 1


  ############# IMPRESSIONS #############

  dfNumberCampaign = df.assign()
  dfNumberCampaign['numberCampaign'] = 0
  dfNumberCampaign = dfNumberCampaign[['s_utm_campaign', 'numberCampaign']]
  dfNumberCampaign = dfNumberCampaign.groupby(['s_utm_campaign'], as_index=False).sum()
  numberList = []
  while len(numberList) != dfNumberCampaign.shape[0] : 
    for i in range(dfNumberCampaign.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList.append(number)
    numberList = list(set(numberList))
  dfNumberCampaign['numberCampaign'] = numberList
  
  df = df.join(dfNumberCampaign.set_index('s_utm_campaign'), on='s_utm_campaign')

  dfNumberTerm = df.assign()
  dfNumberTerm['numberTerm'] = 0
  dfNumberTerm = dfNumberTerm[['s_utm_term', 'numberTerm']]
  dfNumberTerm = dfNumberTerm.groupby(['s_utm_term'], as_index=False).sum()
  numberList2 = []
  while len(numberList2) != dfNumberTerm.shape[0] : 
    for i in range(dfNumberTerm.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList2.append(number)
    numberList2 = list(set(numberList2))
  dfNumberTerm['numberTerm'] = numberList2

  df = df.join(dfNumberTerm.set_index('s_utm_term'), on='s_utm_term')

  df = df.groupby(['numberCampaign','numberTerm'], as_index=False).sum()
  df = df.join(dfNumberCampaign.set_index('numberCampaign'), on='numberCampaign')
  df = df.join(dfNumberTerm.set_index('numberTerm'), on='numberTerm')
  df = df[['s_utm_campaign','s_utm_term','impressions']]

  ############# LEADS #############

  dfNumberCampaign = df3.assign()
  dfNumberCampaign['numberCampaign'] = 0
  dfNumberCampaign = dfNumberCampaign[['s_utm_campaign', 'numberCampaign']]
  dfNumberCampaign = dfNumberCampaign.groupby(['s_utm_campaign'], as_index=False).sum()
  numberList = []
  while len(numberList) != dfNumberCampaign.shape[0] : 
    for i in range(dfNumberCampaign.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList.append(number)
    numberList = list(set(numberList))
  dfNumberCampaign['numberCampaign'] = numberList
  
  df3 = df3.join(dfNumberCampaign.set_index('s_utm_campaign'), on='s_utm_campaign')

  dfNumberTerm = df3.assign()
  dfNumberTerm['numberTerm'] = 0
  dfNumberTerm = dfNumberTerm[['s_utm_term', 'numberTerm']]
  dfNumberTerm = dfNumberTerm.groupby(['s_utm_term'], as_index=False).sum()
  numberList2 = []
  while len(numberList2) != dfNumberTerm.shape[0] : 
    for i in range(dfNumberTerm.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList2.append(number)
    numberList2 = list(set(numberList2))
  dfNumberTerm['numberTerm'] = numberList2

  df3 = df3.join(dfNumberTerm.set_index('s_utm_term'), on='s_utm_term')

  df3 = df3.groupby(['numberCampaign','numberTerm'], as_index=False).sum()
  df3 = df3.join(dfNumberCampaign.set_index('numberCampaign'), on='numberCampaign')
  df3 = df3.join(dfNumberTerm.set_index('numberTerm'), on='numberTerm')
  df3 = df3[['s_utm_campaign','s_utm_term','leads','prc','transactions','total_item_qty','minimum_item_qty','account_item_qty','total_amount']]
  df3 = df3.rename(columns = {'prc': 'lead_value'})
  df3 = df3.rename(columns = {'total_amount': 'sales_value'})

  df = pd.merge(df,df3,on=['s_utm_campaign','s_utm_term'])

  df = pd.merge(dataset_invest,df,on=['s_utm_campaign','s_utm_term'])

  sumSMImp = df['social_media_impressions'].sum()

  df['lead_conversion'] = df['leads']/df['impressions']
  df['lead_unit_value'] = df['lead_value']/df['leads']
  df['sales_conversion'] = df['minimum_item_qty']/df['leads']
  df['sales_value_conversion'] = df['sales_value']/df['lead_value']
  df['share_social_media_impressions'] = df['social_media_impressions']/sumSMImp
  df['investment_social_media_impressions_ratio'] = df['investment']/df['social_media_impressions']
  df['social_media_impressions_ratio'] = df['impressions']/df['social_media_impressions']
  df['CAC_unit_lead'] = df['investment']/df['leads']
  df['CAC_unit_imp'] = df['investment']/df['impressions']
  df['ROI'] = df['lead_unit_value']/df['CAC_unit_lead']
  df['lead_value_investment_ratio'] = df['lead_value']/df['investment']

  df = df[['s_utm_campaign','s_utm_term','investment','social_media_impressions','share_social_media_impressions','investment_social_media_impressions_ratio','social_media_impressions_ratio','CAC_unit_imp','impressions','CAC_unit_lead','leads','lead_conversion','lead_unit_value','ROI','lead_value','lead_value_investment_ratio','transactions','total_item_qty','minimum_item_qty','account_item_qty','sales_value','sales_conversion','sales_value_conversion']]
  
  df.to_excel(r'Sankey_analysis_Hugo_Boss.xlsx', sheet_name='without utm_medium (all period)', index = False)

  df1 = df.assign()
  sumInvest = df['investment'].sum()
  sumImp = df['impressions'].sum()
  sumLeads = df['leads'].sum()
  sumLeadValue = df['lead_value'].sum()
  sumTotalItemQ  = df['total_item_qty'].sum()
  sumMinItemQ = df['minimum_item_qty'].sum()
  sumAccountItemQ = df['account_item_qty'].sum()
  sumSaleValue = df['sales_value'].sum()
  sumShareSMI = df['share_social_media_impressions'].sum()
  sumTransactions = df['transactions'].sum()
  sumCACLead = sumInvest/sumLeads
  sumCACImp = sumInvest/sumImp
  sumLeadUnitValue = sumLeadValue/sumLeads
  df1.loc[df1.shape[0]+1] = ['TOTAL','',sumInvest,sumSMImp,sumShareSMI,sumInvest/sumSMImp,sumImp/sumSMImp,sumCACImp, sumImp,sumCACLead, sumLeads,sumLeads/sumImp,sumLeadUnitValue,sumLeadUnitValue/sumCACLead,sumLeadValue,sumLeadValue/sumInvest,sumTransactions,sumTotalItemQ,sumMinItemQ,sumAccountItemQ,sumSaleValue,sumMinItemQ/sumLeads,sumSaleValue/sumLeadValue]

  df1.to_excel(r'analysis_Hugo_Boss.xlsx', sheet_name='without utm_medium (all period)', index = False)
  dfBisCampaign = df.groupby(['s_utm_campaign'], as_index=False).sum()
  dfBisTerm = df.groupby(['s_utm_term'], as_index=False).sum()

  totalValue = []
  startrow = 13


  ################## Social media impressions to impressions ##################
  listCampaign = ['SM imp/imp ratio']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  listTotalColumn = []
  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    listTotalColumn.append(dfList['impressions'].sum()/dfList['social_media_impressions'].sum())
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['social_media_impressions_ratio'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)

  listTotalLine = []
  for k in range (dfBisCampaign.shape[0]) :
      dfTotalLine = df[df['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listTotalLine.append(dfTotalLine['impressions'].sum()/dfTotalLine['social_media_impressions'].sum())
  
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',listTotalLine[0], listTotalLine[1]]

  listTotalColumn.append(sumImp/sumSMImp)
  dfMini['TOTAL'] = listTotalColumn

  totalValue.clear()
  listValue.clear()
  listTotalLine.clear()
  listTotalColumn.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## Share of social media impressions ##################
  listCampaign = ['Share of SMI']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  listTotalColumn = []
  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    listTotalColumn.append(dfList['social_media_impressions'].sum()/sumSMImp)
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['share_social_media_impressions'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)

  listTotalLine = []
  for k in range (dfBisCampaign.shape[0]) :
      dfTotalLine = df[df['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listTotalLine.append(dfTotalLine['social_media_impressions'].sum()/sumSMImp)

  dfMini.loc[dfMini.shape[0]] = ['TOTAL',listTotalLine[0], listTotalLine[1]]

  listTotalColumn.append(sumShareSMI)
  dfMini['TOTAL'] = listTotalColumn

  totalValue.clear()
  listValue.clear()
  listTotalLine.clear()
  listTotalColumn.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## Share of leads ##################
  df['share_Leads'] = df['leads']/df['leads'].sum()
  listCampaign = ['Share of leads']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['share_Leads'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)
  totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
  totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
  dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
  totalValue.clear()
  listValue.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## Share of investment ##################
  df['share_investment'] = df['investment']/df['investment'].sum()
  listCampaign = ['Share of investment']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['share_investment'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)
  totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
  totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
  dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
  totalValue.clear()
  listValue.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## CAC Imp ##################
  
  listCampaign = ['CAC Impressions']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  listTotalColumn = []
  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    listTotalColumn.append(dfList['investment'].sum()/dfList['impressions'].sum())
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['CAC_unit_imp'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)

  listTotalLine = []
  for k in range (dfBisCampaign.shape[0]) :
      dfTotalLine = df[df['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listTotalLine.append(dfTotalLine['investment'].sum()/dfTotalLine['impressions'].sum())

  dfMini.loc[dfMini.shape[0]] = ['TOTAL',listTotalLine[0], listTotalLine[1]]

  listTotalColumn.append(sumCACImp)
  dfMini['TOTAL'] = listTotalColumn

  totalValue.clear()
  listValue.clear()
  listTotalLine.clear()
  listTotalColumn.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## CAC Lead ##################
  
  listCampaign = ['CAC Leads']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  listTotalColumn = []
  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    listTotalColumn.append(dfList['investment'].sum()/dfList['leads'].sum())
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['CAC_unit_lead'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)

  listTotalLine = []
  for k in range (dfBisCampaign.shape[0]) :
      dfTotalLine = df[df['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listTotalLine.append(dfTotalLine['investment'].sum()/dfTotalLine['leads'].sum())

  dfMini.loc[dfMini.shape[0]] = ['TOTAL',listTotalLine[0], listTotalLine[1]]

  listTotalColumn.append(sumCACLead)
  dfMini['TOTAL'] = listTotalColumn

  totalValue.clear()
  listValue.clear()
  listTotalLine.clear()
  listTotalColumn.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## Share of lead value ##################
  df['share_Lead_Value'] = df['lead_value']/df['lead_value'].sum()
  listCampaign = ['Share of lead value']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['share_Lead_Value'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)
  totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
  totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
  dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
  totalValue.clear()
  listValue.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  for i in range(dfMini.shape[0]) :
    dfMini.drop( i, inplace=True)

  ################## ROI ##################
  listCampaign = ['ROI']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  listTotalColumn = []
  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    listTotalColumn.append((dfList['lead_value'].sum()/dfList['leads'].sum())/(dfList['investment'].sum()/dfList['leads'].sum()))
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['ROI'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)

  listTotalLine = []
  for k in range (dfBisCampaign.shape[0]) :
      dfTotalLine = df[df['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listTotalLine.append((dfTotalLine['lead_value'].sum()/dfTotalLine['leads'].sum())/(dfTotalLine['investment'].sum()/dfTotalLine['leads'].sum()))

  dfMini.loc[dfMini.shape[0]] = ['TOTAL',listTotalLine[0], listTotalLine[1]]

  listTotalColumn.append(sumLeadUnitValue/sumCACLead)
  dfMini['TOTAL'] = listTotalColumn

  totalValue.clear()
  listValue.clear()
  listTotalLine.clear()
  listTotalColumn.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## Sales (minimum_item_qty) ##################

  listCampaign = ['Sales']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['minimum_item_qty'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)
  totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
  totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
  dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
  totalValue.clear()
  listValue.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  ################## Share of sales ##################
  df['share_Sales'] = df['minimum_item_qty']/df['minimum_item_qty'].sum()
  listCampaign = ['Share of sales']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['share_Sales'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)
  totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
  totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
  dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
  totalValue.clear()
  listValue.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  for i in range(dfMini.shape[0]) :
    dfMini.drop( i, inplace=True)


  ################## Sales conversion ##################
  
  listCampaign = ['Sales conversion']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  listTotalColumn = []
  for j in range(dfBisTerm.shape[0]) :  
    dfList = df[df['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
    listValue = []
    listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
    listTotalColumn.append(dfList['minimum_item_qty'].sum()/dfList['leads'].sum())
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['sales_conversion'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)

  listTotalLine = []
  for k in range (dfBisCampaign.shape[0]) :
      dfTotalLine = df[df['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listTotalLine.append(dfList['minimum_item_qty'].sum()/dfList['leads'].sum())

  dfMini.loc[dfMini.shape[0]] = ['TOTAL',listTotalLine[0], listTotalLine[1]]

  listTotalColumn.append(sumMinItemQ/sumLeads)
  dfMini['TOTAL'] = listTotalColumn

  totalValue.clear()
  listValue.clear()
  listTotalLine.clear()
  listTotalColumn.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7


  ################## Leads by retailer ##################

  dfNumberCampaign = dfRetailer.assign()
  dfNumberCampaign['numberCampaign'] = 0
  dfNumberCampaign = dfNumberCampaign[['s_utm_campaign', 'numberCampaign']]
  dfNumberCampaign = dfNumberCampaign.groupby(['s_utm_campaign'], as_index=False).sum()
  numberList1 = []
  while len(numberList1) != dfNumberCampaign.shape[0] : 
    for i in range(dfNumberCampaign.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList1.append(number)
    numberList1 = list(set(numberList1))
  dfNumberCampaign['numberCampaign'] = numberList1
  
  dfRetailer = dfRetailer.join(dfNumberCampaign.set_index('s_utm_campaign'), on='s_utm_campaign')

  dfNumberRetailer = dfRetailer.assign()
  dfNumberRetailer['numberRetailer'] = 0
  dfNumberRetailer = dfNumberRetailer[['retailer', 'numberRetailer']]
  dfNumberRetailer = dfNumberRetailer.groupby(['retailer'], as_index=False).sum()
  numberList2 = []
  while len(numberList2) != dfNumberRetailer.shape[0] : 
    for i in range(dfNumberRetailer.shape[0]) : 
      number = ''.join([random.choice('0123456789') for j in range(10)])
      numberList2.append(number)
    numberList2 = list(set(numberList2))
  dfNumberRetailer['numberRetailer'] = numberList2
  
  dfRetailer = dfRetailer.join(dfNumberRetailer.set_index('retailer'), on='retailer')

  dfRetailer = dfRetailer.groupby(['numberRetailer','numberCampaign'], as_index=False).sum()
  dfRetailer = dfRetailer[dfRetailer['leads'] > 0]

  dfRetailer = dfRetailer.join(dfNumberCampaign.set_index('numberCampaign'), on='numberCampaign')
  dfRetailer = dfRetailer.join(dfNumberRetailer.set_index('numberRetailer'), on='numberRetailer')

  listRetailer = []
  for i in range(dfRetailer.shape[0]) : 
      listRetailer.append(dfRetailer['retailer'].tolist()[i])
  listRetailer = list(set(listRetailer))
  listRetailer.sort()
  print(listRetailer)

  listCampaign = ['Leads by retailer']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  for retailer in listRetailer :  
    dfList = dfRetailer[dfRetailer['retailer'] == retailer].assign()
    listValue = []
    listValue.append(retailer)
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['leads'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)
  totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
  totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
  dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
  totalValue.clear()
  listValue.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  for i in range(dfMini.shape[0]) :
    dfMini.drop( i, inplace=True)

  

  ################## Share of leads by retailer ##################

  dfRetailer['share_Leads_Retailer'] = dfRetailer['leads']/dfRetailer['leads'].sum()

  listRetailer = []
  for i in range(dfRetailer.shape[0]) : 
      listRetailer.append(dfRetailer['retailer'].tolist()[i])
  listRetailer = list(set(listRetailer))
  listRetailer.sort()

  listCampaign = ['Share of leads by retailer']
  for l in range (dfBisCampaign.shape[0]) : 
      listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

  for retailer in listRetailer :  
    dfList = dfRetailer[dfRetailer['retailer'] == retailer].assign()
    listValue = []
    listValue.append(retailer)
    for k in range (dfBisCampaign.shape[0]) : 
      dfListBis = dfList[dfList['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listValue.append(dfListBis['share_Leads_Retailer'].tolist()[0])
    totalValue.append(listValue)

  dfMini = pd.DataFrame(totalValue, columns = listCampaign)
  totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
  totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
  dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
  dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
  totalValue.clear()
  listValue.clear()

  append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
  startrow = startrow + 7

  for i in range(dfMini.shape[0]) :
    dfMini.drop( i, inplace=True)


  ################## Leads for each retailer ##################

  for retailer in listRetailer : 
    dfEachRetailerBis = dfEachRetailer[dfEachRetailer['retailer'] == retailer]
    txt = retailer+' Leads'
    listCampaign = [txt]
    for l in range (dfBisCampaign.shape[0]) : 
        listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

    for j in range(dfBisTerm.shape[0]) :  
      dfEachRetailerTer = dfEachRetailerBis[dfEachRetailerBis['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
      listValue = []
      listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
      for k in range (dfBisCampaign.shape[0]) : 
        dfEachRetailerQ = dfEachRetailerTer[dfEachRetailerTer['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
        listValue.append(dfEachRetailerQ['leads'].sum())
      totalValue.append(listValue)

    dfMini = pd.DataFrame(totalValue, columns = listCampaign)
    totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
    totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
    dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
    dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
    totalValue.clear()
    listValue.clear()
    append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
    startrow = startrow + 7

    for i in range(dfMini.shape[0]) :
      dfMini.drop( i, inplace=True)

    dfEachRetailerBis = dfEachRetailerBis.reset_index()
    for i in range(dfEachRetailerBis.shape[0]) :
      dfEachRetailerBis.drop( i, inplace=True)

    dfEachRetailerTer = dfEachRetailerTer.reset_index()
    for i in range(dfEachRetailerTer.shape[0]) :
      dfEachRetailerTer.drop( i, inplace=True)

    dfEachRetailerQ = dfEachRetailerQ.reset_index()
    for i in range(dfEachRetailerQ.shape[0]) :
      dfEachRetailerQ.drop( i, inplace=True)


  
  ################## Sales for each retailer ##################

  for retailer in listRetailer : 
    dfEachRetailerBis = dfEachRetailer[dfEachRetailer['retailer'] == retailer].assign()
    txt = retailer+' Sales'
    listCampaign = [txt]
    for l in range (dfBisCampaign.shape[0]) : 
        listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

    for j in range(dfBisTerm.shape[0]) :  
      dfEachRetailerTer = dfEachRetailerBis[dfEachRetailerBis['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
      listValue = []
      listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
      for k in range (dfBisCampaign.shape[0]) : 
        dfEachRetailerQ = dfEachRetailerTer[dfEachRetailerTer['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
        listValue.append(dfEachRetailerQ['minimum_item_qty'].sum())
      totalValue.append(listValue)

    dfMini = pd.DataFrame(totalValue, columns = listCampaign)
    totalReach = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]].sum()
    totalTraffic = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]].sum()
    dfMini.loc[dfMini.shape[0]] = ['TOTAL',totalReach, totalTraffic]
    dfMini['TOTAL'] = dfMini[dfBisCampaign['s_utm_campaign'].tolist()[0]]+dfMini[dfBisCampaign['s_utm_campaign'].tolist()[1]]
    totalValue.clear()
    listValue.clear()

    append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
    startrow = startrow + 7

    for i in range(dfMini.shape[0]) :
      dfMini.drop( i, inplace=True)
    
    dfEachRetailerBis = dfEachRetailerBis.reset_index()
    for i in range(dfEachRetailerBis.shape[0]) :
      dfEachRetailerBis.drop( i, inplace=True)

    dfEachRetailerTer = dfEachRetailerTer.reset_index()
    for i in range(dfEachRetailerTer.shape[0]) :
      dfEachRetailerTer.drop( i, inplace=True)

    dfEachRetailerQ = dfEachRetailerQ.reset_index()
    for i in range(dfEachRetailerQ.shape[0]) :
      dfEachRetailerQ.drop( i, inplace=True)


  ################## Sale Conversion for each retailer ##################

  for retailer in listRetailer : 
    listTotalColumn = []
    dfEachRetailerBis = dfEachRetailer[dfEachRetailer['retailer'] == retailer].assign()
    txt = retailer+' Sale Conversion'
    listCampaign = [txt]
    for l in range (dfBisCampaign.shape[0]) : 
        listCampaign.append(dfBisCampaign['s_utm_campaign'].tolist()[l])

    for j in range(dfBisTerm.shape[0]) :  
      dfEachRetailerTer = dfEachRetailerBis[dfEachRetailerBis['s_utm_term'] == dfBisTerm['s_utm_term'].tolist()[j]].assign()
      listValue = []
      listValue.append(dfBisTerm['s_utm_term'].tolist()[j])
      listTotalColumn.append(dfEachRetailerTer['minimum_item_qty'].sum()/dfEachRetailerTer['leads'].sum())
      for k in range (dfBisCampaign.shape[0]) : 
        dfEachRetailerQ = dfEachRetailerTer[dfEachRetailerTer['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
        conversion = dfEachRetailerQ['minimum_item_qty'].sum()/dfEachRetailerQ['leads'].sum()
        listValue.append(conversion)
      totalValue.append(listValue)

    dfMini = pd.DataFrame(totalValue, columns = listCampaign)

    listTotalLine = []
    for k in range (dfBisCampaign.shape[0]) :
      dfTotalLine = dfEachRetailerBis[dfEachRetailerBis['s_utm_campaign'] == dfBisCampaign['s_utm_campaign'].tolist()[k]].assign()
      listTotalLine.append(dfTotalLine['minimum_item_qty'].sum()/dfTotalLine['leads'].sum())

    dfMini.loc[dfMini.shape[0]] = ['TOTAL',listTotalLine[0], listTotalLine[1]]

    listTotalColumn.append(dfEachRetailerBis['minimum_item_qty'].sum()/dfEachRetailerBis['leads'].sum())
    dfMini['TOTAL'] = listTotalColumn

    listTotalColumn.clear()
    listTotalLine.clear()
    totalValue.clear()
    listValue.clear()

    append_df_to_excel('analysis_Hugo_Boss.xlsx', dfMini, sheetname='without utm_medium (all period)', index=False, startrow=startrow)
    startrow = startrow + 7

    for i in range(dfMini.shape[0]) :
      dfMini.drop( i, inplace=True)

    dfEachRetailerBis = dfEachRetailerBis.reset_index()
    for i in range(dfEachRetailerBis.shape[0]) :
      dfEachRetailerBis.drop( i, inplace=True)

    dfEachRetailerTer = dfEachRetailerTer.reset_index()
    for i in range(dfEachRetailerTer.shape[0]) :
      dfEachRetailerTer.drop( i, inplace=True)

    dfEachRetailerQ = dfEachRetailerQ.reset_index()
    for i in range(dfEachRetailerQ.shape[0]) :
      dfEachRetailerQ.drop( i, inplace=True)

  files.download('analysis_Hugo_Boss.xlsx')

if os.path.isfile('invest_imp.xlsx') == True : 
  analysisCoty(analysisAccount, analysisOperator, analysisCountry)

"""## <font size='4px' color='#0066CC'>**Sankeys**</font>

### <font size='3px' color='#007FFF'>Sankey : UTM > PoP > Products > Retailers > minimum_item_qty </font>
"""

# Indications : 
# bestRetailers = True, it only takes top retailers that have the highest sales conversion rates and leads 
# bestRetailers = False, it takes all retailers
# utmType, pop and product must be defined
# A country filter can be added
# Colors of Swaven : ["#426C9B","#70BCCE","#89E8E9",'#000000']

def sankeyUtmSource1(bestRetailers, listRetailers, utmType, pop, countryPop, product) :

  df = necessaryData_account1OnlyAccount.assign()
  df3 = necessaryData_product1OnlyAccount.assign()

  df = df[df['PoP'] == pop]
  df3 = df3[df3['PoP'] == pop]
  if countryPop != 'null': 
    df = df[df['country'] == countryPop]
    df3 = df3[df3['country'] == countryPop]

  df = df[['pid','product_label']].drop_duplicates()
  df4 = df3.assign()
  df4 = df4.join(df.set_index('pid'), on='pid')
  df4 = df4[df4['product_label'] == product].assign()

  df4['has_sale'] = df4['has_sale'].replace(False, "has not sale")
  df4['has_sale'] = df4['has_sale'].replace(True, "has sale")

  df4['retailer'] = df4['retailer'].str.cat(df4['country'],sep=" ")
  df4['currency_rate'] = df4['currency_rate'].astype(float)
  df4.loc[df4['has_sale'] == "has sale", 'total_amount']= df4['total_amount']*df4['currency_rate']

  # For UTM Source
  if utmType == 'source' : 
    df4.loc[df4['s_utm_source'].isnull() == True, 's_utm_sourceBis']= "null"
    df4.loc[df4['s_utm_source'].isnull() == False, 's_utm_sourceBis']= df3['s_utm_source']

    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_sourceBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    dfColors = dfColors[['s_utm_source','color']]

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_sourceBis']]
    df5.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != 'null' :
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else : 
        df5.loc[df5['PoP']==pop,'cpt']=2
    df5 = df5.groupby(['s_utm_source'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df8 = df4.assign()
    df8 = df8[['s_utm_sourceBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != 'null' :
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_source'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df11 = df4.assign()
    df11 = df11[['s_utm_sourceBis','retailer','PoP','country','minimum_item_qty']]
    df11.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != 'null' :
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop),'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_source'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_source'), on='s_utm_source')


    all_nodes = df5.s_utm_source.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_source] 
 
  # For UTM Medium
  elif utmType == 'medium' : 
    
    df4.loc[df4['s_utm_medium'].isnull() == True, 's_utm_mediumBis']= "null"
    df4.loc[df4['s_utm_medium'].isnull() == False, 's_utm_mediumBis']= df4['s_utm_medium']
    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_mediumBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    dfColors = dfColors[['s_utm_medium','color']]

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_mediumBis']]
    df5.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else :
        df5.loc[df5['PoP']==pop ,'cpt']=2
    df5 = df5.groupby(['s_utm_medium'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df8 = df4.assign()
    df8 = df8[['s_utm_mediumBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_medium'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df11 = df4.assign()
    df11 = df11[['s_utm_mediumBis','retailer','PoP','country','minimum_item_qty']]
    df11.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop) ,'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_medium'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')


    all_nodes = df5.s_utm_medium.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_medium]
  
  # For UTM Campaign
  elif utmType == 'campaign' : 

    df4.loc[df4['s_utm_campaign'].isnull() == True, 's_utm_campaignBis']= "null"
    df4.loc[df4['s_utm_campaign'].isnull() == False, 's_utm_campaignBis']= df4['s_utm_campaign']

    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_campaignBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    dfColors = dfColors[['s_utm_campaign','color']]

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_campaignBis']]
    df5.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else :
        df5.loc[df5['PoP']==pop ,'cpt']=2
    df5 = df5.groupby(['s_utm_campaign'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    df8 = df4.assign()
    df8 = df8[['s_utm_campaignBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_campaign'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')


    df11 = df4.assign()
    df11 = df11[['s_utm_campaignBis','retailer','PoP','country','minimum_item_qty']]
    df11.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop) ,'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_campaign'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    all_nodes = df5.s_utm_campaign.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_campaign] 

  # For UTM Term
  elif utmType == 'term' : 
    
    df4.loc[df4['s_utm_term'].isnull() == True, 's_utm_termBis']= "null"
    df4.loc[df4['s_utm_term'].isnull() == False, 's_utm_termBis']= df4['s_utm_term']
    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_termBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    # We can change the colors here if there are only 4 sources, otherwise add colors manually
    #colorsSourceBis = ["#426C9B","#70BCCE","#89E8E9",'#000000']
    #dfColors['color'] = colorsSourceBis
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    dfColors = dfColors[['s_utm_term','color']]

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_termBis']]
    df5.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else :
        df5.loc[df5['PoP']==pop ,'cpt']=2
    df5 = df5.groupby(['s_utm_term'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df8 = df4.assign()
    df8 = df8[['s_utm_termBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_term'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df11 = df4.assign()
    df11 = df11[['s_utm_termBis','retailer','PoP','country','minimum_item_qty']]
    df11.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop) ,'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_term'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_term'), on='s_utm_term')


    all_nodes = df5.s_utm_term.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_term]

  else : 
    return 'Choose between : source, medium, campaign, term'

  target_indices = []
  for i in range(df5.shape[0]) : 
    target_indices.append(all_nodes.index(pop))
    source_indices.append(all_nodes.index(pop))

  for i in range(df5.shape[0]) : 
    target_indices.append(all_nodes.index(product))

  for i in range(df8.shape[0]) :  
    source_indices.append(all_nodes.index(product))

  for retailer in df8.retailer :  
    target_indices.append(all_nodes.index(retailer))

  for retailer in df8.retailer :  
    source_indices.append(all_nodes.index(retailer))

  for amount in df11.minimum_item_qty :  
    target_indices.append(all_nodes.index(amount))

  values = []
  node_colors = []

  for leads in df5.leads : 
    values.append(leads)
  
  for leads in df5.leads : 
    values.append(leads)

  for leads in df8.leads : 
    values.append(leads)

  for leads in df11.leads : 
    values.append(leads)


  for color in df5.color : 
    node_colors.append(color)
  
  for color in df5.color : 
    node_colors.append(color)

  for color in df8.color : 
    node_colors.append(color)

  for color in df11.color : 
    node_colors.append(color)


  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors,
  ))])

  if countryPop != "null" : 
    fig.update_layout(title_text="UTM {} and retailers for the PoP {} in {} and the product {}".format(utmType,pop,countryPop,product),
                    font_size=10)
  else : 
    fig.update_layout(title_text="UTM {} and retailers for the PoP {} and the product {}".format(utmType,pop,product),
                    font_size=10)
  
  
  return fig

sankeyUtmSource1(False,retailersSales(True, False,analysisPopSankeyS1),analysisUtmTypeS1, analysisPopSankeyS1, analysisByCountryS1, analysisProductS1)

"""### <font size='3px' color='#007FFF'>Sankey : UTM > PoP > Products > Retailers > Sale Value </font>"""

# Indications : 
# bestRetailers = True, it only takes top retailers that have the highest sales conversion rates and leads 
# bestRetailers = False, it takes all retailers
# utmType, pop and product must be defined
# A country filter can be added
# Colors of Swaven : ["#426C9B","#70BCCE","#89E8E9",'#000000']

def sankeyUtmSource2(bestRetailers, listRetailers, utmType, pop, countryPop, product) :

  df = necessaryData_account1OnlyAccount.assign()
  df3 = necessaryData_product1OnlyAccount.assign()

  df = df[df['PoP'] == pop]
  df3 = df3[df3['PoP'] == pop]
  if countryPop != 'null': 
    df = df[df['country'] == countryPop]
    df3 = df3[df3['country'] == countryPop]

  df = df[['pid','product_label']].drop_duplicates()
  df4 = df3.assign()
  df4 = df4.join(df.set_index('pid'), on='pid')
  df4 = df4[df4['product_label'] == product].assign()

  df4['has_sale'] = df4['has_sale'].replace(False, "has not sale")
  df4['has_sale'] = df4['has_sale'].replace(True, "has sale")

  df4['retailer'] = df4['retailer'].str.cat(df4['country'],sep=" ")
  df4['currency_rate'] = df4['currency_rate'].astype(float)
  df4.loc[df4['has_sale'] == "has sale", 'total_amount']= df4['total_amount']*df4['currency_rate']

  if utmType == 'source' : 
    df4.loc[df4['s_utm_source'].isnull() == True, 's_utm_sourceBis']= "null"
    df4.loc[df4['s_utm_source'].isnull() == False, 's_utm_sourceBis']= df3['s_utm_source']

    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_sourceBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    dfColors = dfColors[['s_utm_source','color']]
    dfColors.loc[dfColors['s_utm_source']=='google','color']='#326899'

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_sourceBis']]
    df5.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != 'null' :
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else : 
        df5.loc[df5['PoP']==pop,'cpt']=2
    df5 = df5.groupby(['s_utm_source'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df8 = df4.assign()
    df8 = df8[['s_utm_sourceBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != 'null' :
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_source'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df11 = df4.assign()
    df11 = df11[['s_utm_sourceBis','retailer','PoP','country','total_amount']]
    df11.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != 'null' :
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop),'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_source'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_source'), on='s_utm_source')
    df11["total_amount"]= round(df11["total_amount"],2)
    df11.loc[df11['total_amount']==0.00 ,'total_amount']=0


    all_nodes = df5.s_utm_source.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.total_amount.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_source] 
 
  elif utmType == 'medium' : 
    
    df4.loc[df4['s_utm_medium'].isnull() == True, 's_utm_mediumBis']= "null"
    df4.loc[df4['s_utm_medium'].isnull() == False, 's_utm_mediumBis']= df4['s_utm_medium']
    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_mediumBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    dfColors = dfColors[['s_utm_medium','color']]
    dfColors.loc[dfColors['s_utm_medium']=='fb','color']='#326899'

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_mediumBis']]
    df5.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else :
        df5.loc[df5['PoP']==pop ,'cpt']=2
    df5 = df5.groupby(['s_utm_medium'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df8 = df4.assign()
    df8 = df8[['s_utm_mediumBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_medium'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df11 = df4.assign()
    df11 = df11[['s_utm_mediumBis','retailer','PoP','country','total_amount']]
    df11.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop) ,'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_medium'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')
    df11["total_amount"]= round(df11["total_amount"],2)
    df11.loc[df11['total_amount']==0.00 ,'total_amount']=0


    all_nodes = df5.s_utm_medium.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.total_amount.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_medium]
  
  elif utmType == 'campaign' : 

    df4.loc[df4['s_utm_campaign'].isnull() == True, 's_utm_campaignBis']= "null"
    df4.loc[df4['s_utm_campaign'].isnull() == False, 's_utm_campaignBis']= df4['s_utm_campaign']

    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_campaignBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    dfColors = dfColors[['s_utm_campaign','color']]

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_campaignBis']]
    df5.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else :
        df5.loc[df5['PoP']==pop ,'cpt']=2
    df5 = df5.groupby(['s_utm_campaign'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    df8 = df4.assign()
    df8 = df8[['s_utm_campaignBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_campaign'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')


    df11 = df4.assign()
    df11 = df11[['s_utm_campaignBis','retailer','PoP','country','total_amount']]
    df11.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop) ,'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_campaign'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')
    df11["total_amount"]= round(df11["total_amount"],2)
    df11.loc[df11['total_amount']==0.00 ,'total_amount']=0

    all_nodes = df5.s_utm_campaign.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.total_amount.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_campaign] 

  elif utmType == 'term' : 
    
    df4.loc[df4['s_utm_term'].isnull() == True, 's_utm_termBis']= "null"
    df4.loc[df4['s_utm_term'].isnull() == False, 's_utm_termBis']= df4['s_utm_term']
    dfColors = df4.assign()
    if bestRetailers == True : 
      dfColors.loc[dfColors['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      dfColors.loc[dfColors['PoP']==pop ,'cpt']=2
    dfColors = dfColors.groupby(['s_utm_termBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    #colorsSourceBis = ["#426C9B","#70BCCE","#89E8E9",'#000000']
    #dfColors['color'] = colorsSourceBis
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    dfColors = dfColors[['s_utm_term','color']]
    dfColors.loc[dfColors['s_utm_term']=='fb','color']='#326899'

    df5 = df4.assign()
    df5 = df5[['PoP','country','retailer','s_utm_termBis']]
    df5.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df5['leads'] = 1
    if bestRetailers == True : 
      df5.loc[df5['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df5.loc[(df5['PoP']==pop)&(df5['country']==countryPop) ,'cpt']=2
      else :
        df5.loc[df5['PoP']==pop ,'cpt']=2
    df5 = df5.groupby(['s_utm_term'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df8 = df4.assign()
    df8 = df8[['s_utm_termBis','retailer','PoP','country']]
    df8.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df8['leads'] = 1
    if bestRetailers == True : 
      df8.loc[df8['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df8.loc[(df8['PoP']==pop)&(df8['country']==countryPop) ,'cpt']=2
      else :
        df8.loc[df8['PoP']==pop ,'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_term'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df11 = df4.assign()
    df11 = df11[['s_utm_termBis','retailer','PoP','country','total_amount']]
    df11.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df11['leads'] = 1
    if bestRetailers == True : 
      df11.loc[df11['retailer'].isin(listRetailers['retailer']) ,'cpt']=2
    else : 
      if countryPop != "null" : 
        df11.loc[(df11['PoP']==pop)&(df11['country']==countryPop) ,'cpt']=2
      else :
        df11.loc[df11['PoP']==pop ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_term'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_term'), on='s_utm_term')
    df11["total_amount"]= round(df11["total_amount"],2)
    df11.loc[df11['total_amount']==0.00 ,'total_amount']=0


    all_nodes = df5.s_utm_term.values.tolist() + df4.PoP.values.tolist() + df4.product_label.values.tolist() + df4.retailer.values.tolist() + df11.total_amount.values.tolist()
    source_indices = [all_nodes.index(source) for source in df5.s_utm_term]

  else : 
    return 'Choose between : source, medium, campaign, term'

  target_indices = []
  for i in range(df5.shape[0]) : 
    target_indices.append(all_nodes.index(pop))
    source_indices.append(all_nodes.index(pop))

  for i in range(df5.shape[0]) : 
    target_indices.append(all_nodes.index(product))

  for i in range(df8.shape[0]) :  
    source_indices.append(all_nodes.index(product))

  for retailer in df8.retailer :  
    target_indices.append(all_nodes.index(retailer))

  for retailer in df8.retailer :  
    source_indices.append(all_nodes.index(retailer))

  for amount in df11.total_amount :  
    target_indices.append(all_nodes.index(amount))

  values = []
  node_colors = []

  for leads in df5.leads : 
    values.append(leads)
  
  for leads in df5.leads : 
    values.append(leads)

  for leads in df8.leads : 
    values.append(leads)

  for leads in df11.leads : 
    values.append(leads)


  for color in df5.color : 
    node_colors.append(color)
  
  for color in df5.color : 
    node_colors.append(color)

  for color in df8.color : 
    node_colors.append(color)

  for color in df11.color : 
    node_colors.append(color)





  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors,
  ))])

  if countryPop != "null" : 
    fig.update_layout(title_text="UTM {} and retailers for the PoP {} in {} and the product {}".format(utmType,pop,countryPop,product),
                    font_size=10)
  else : 
    fig.update_layout(title_text="UTM {} and retailers for the PoP {} and the product {}".format(utmType,pop,product),
                    font_size=10)
  
  return fig
  #pio.write_image(fig, 'sankey_two.png', width=1700, height=700)

sankeyUtmSource2(False,retailersSales(True, False,analysisPopSankeyS2),analysisUtmTypeS2,analysisPopSankeyS2, analysisByCountryS2, analysisProductS2)

"""### <font size='3px' color='#007FFF'>Sankey : UTM > Countries > Retailers > minimum_item_qty</font>"""

# Indications : 
# bestRetailers = True, it only takes top retailers that have the highest sales conversion rates and leads 
# bestRetailers = False, it takes all retailers
# utmType must be defined
# A PoP filter can be added
# Colors of Swaven : ["#426C9B","#70BCCE","#89E8E9",'#000000']

def sankeyUtmSource3(bestRetailers, listRetailers, utmType, account, operator, country, pop) :

  df = necessaryData_account1OnlyAccount.assign()
  df3 = necessaryData_product1OnlyAccount.assign()


  df4 = df3.assign()

  df4['has_generated_sale_on_account_brand'] = df4['has_generated_sale_on_account_brand'].replace('Not sure', "No information")

  df4['has_sale'] = df4['has_sale'].replace(False, "has not sale")
  df4['has_sale'] = df4['has_sale'].replace(True, "has sale")
  df4 = df4[df4['has_sale'] == 'has sale']

  df4['currency_rate'] = df4['currency_rate'].astype(float)
  df4.loc[df4['has_sale'] == "has sale", 'total_amount']= df4['total_amount']*df4['currency_rate']


  if utmType == 'source' : 

    df4.loc[df4['s_utm_source'].isnull() == True, 's_utm_sourceBis']= "null"
    df4.loc[df4['s_utm_source'].isnull() == False, 's_utm_sourceBis']= df3['s_utm_source']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_sourceBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    dfColors = dfColors[['s_utm_source','color']]
    dfColors.loc[dfColors['s_utm_source']=='google','color']='#326899'


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_sourceBis','has_sale']]
    df5.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_source'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_source'), on='s_utm_source')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_sourceBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_source'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_source'), on='s_utm_source')


    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_sourceBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_source'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df11 = df4.assign()
    df11 = df11[['Account','touchpoint','s_utm_sourceBis','retailer','PoP','country','minimum_item_qty','has_sale']]
    df11.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df11['leads'] = 1    
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_source'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_source'), on='s_utm_source')
    df11["minimum_item_qty"]= round(df11["minimum_item_qty"],2)
    df11.loc[df11['minimum_item_qty']==0.00 ,'minimum_item_qty']=0


    all_nodes = df5.s_utm_source.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_source] 

  elif utmType == 'medium' : 

    df4.loc[df4['s_utm_medium'].isnull() == True, 's_utm_mediumBis']= "null"
    df4.loc[df4['s_utm_medium'].isnull() == False, 's_utm_mediumBis']= df3['s_utm_medium']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_mediumBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    dfColors = dfColors[['s_utm_medium','color']]
    dfColors.loc[dfColors['s_utm_medium']=='organic','color']='#326899'


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_mediumBis','has_sale']]
    df5.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_medium'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_mediumBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_medium'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')


    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_mediumBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_medium'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df11 = df4.assign()
    df11 = df11[['Account','touchpoint','s_utm_mediumBis','retailer','PoP','country','minimum_item_qty','has_sale']]
    df11.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df11['leads'] = 1    
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_medium'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')



    all_nodes = df5.s_utm_medium.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_medium] 

  elif utmType == 'campaign' : 

    df4.loc[df4['s_utm_campaign'].isnull() == True, 's_utm_campaignBis']= "null"
    df4.loc[df4['s_utm_campaign'].isnull() == False, 's_utm_campaignBis']= df3['s_utm_campaign']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_campaignBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    dfColors = dfColors[['s_utm_campaign','color']]
    dfColors.loc[dfColors['s_utm_campaign']=='organic','color']='#326899'


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_campaignBis','has_sale']]
    df5.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_campaign'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_campaignBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_campaign'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')


    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_campaignBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_campaign'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    df11 = df4.assign()
    df11 = df11[['Account','touchpoint','s_utm_campaignBis','retailer','PoP','country','minimum_item_qty','has_sale']]
    df11.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df11['leads'] = 1    
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_campaign'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')



    all_nodes = df5.s_utm_campaign.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_campaign] 

  elif utmType == 'term' : 

    df4.loc[df4['s_utm_term'].isnull() == True, 's_utm_termBis']= "null"
    df4.loc[df4['s_utm_term'].isnull() == False, 's_utm_termBis']= df3['s_utm_term']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_termBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    #colorsSourceBis = ["#426C9B","#70BCCE","#89E8E9"]
    #dfColors['color'] = colorsSourceBis
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    dfColors = dfColors[['s_utm_term','color']]
    dfColors.loc[dfColors['s_utm_term']=='organic','color']='#326899'


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_termBis','has_sale']]
    df5.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_term'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_term'), on='s_utm_term')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_termBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_term'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_term'), on='s_utm_term')


    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_termBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_term'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df11 = df4.assign()
    df11 = df11[['Account','touchpoint','s_utm_termBis','retailer','PoP','country','minimum_item_qty','has_sale']]
    df11.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df11['leads'] = 1    
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['retailer','s_utm_term'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_term'), on='s_utm_term')



    all_nodes = df5.s_utm_term.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.minimum_item_qty.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_term] 

 
  target_indices = []
  for country in df8.country : 
    target_indices.append(all_nodes.index(country))

  for country in df9.country : 
    source_indices.append(all_nodes.index(country))

  for retailer in df9.retailer :  
    target_indices.append(all_nodes.index(retailer))

  for retailer in df11.retailer :  
    source_indices.append(all_nodes.index(retailer))

  for amount in df11.minimum_item_qty :  
    target_indices.append(all_nodes.index(amount))

  values = []
  node_colors = []

  for leads in df8.leads : 
    values.append(leads)

  for leads in df9.leads : 
    values.append(leads)

  for leads in df11.leads : 
    values.append(leads)


  
  for color in df8.color : 
    node_colors.append(color)

  for color in df9.color : 
    node_colors.append(color)

  for color in df11.color : 
    node_colors.append(color)




  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors,
  ))])


  fig.update_layout(title_text="UTM {} > Countries > Retailers > Minimum item quantity".format(utmType),
                      font=dict(size = 10, color = 'black'))
  
  return fig
  
  
sankeyUtmSource3(False, retailersSales(True, False,analysisByPoPS3), analysisUtmTypeS3, analysisAccount, analysisOperator, analysisCountry, analysisByPoPS3)

"""### <font size='3px' color='#007FFF'>Sankey : UTM > Countries > Retailers > Product's origin</font>"""

# Indications : 
# bestRetailers = True, it only takes top retailers that have the highest sales conversion rates and leads 
# bestRetailers = False, it takes all retailers
# utmType  must be defined
# A PoP filter can be added
# Colors of Swaven : ["#426C9B","#70BCCE","#89E8E9",'#000000']

def sankeyUtmSource4(bestRetailers, listRetailers, utmType, account, operator, country,pop) :

  df = necessaryData_account1OnlyAccount.assign()
  df3 = necessaryData_product1OnlyAccount.assign()

  df4 = df3.assign()

  df4['has_generated_sale_on_account_brand'] = df4['has_generated_sale_on_account_brand'].replace('No', "Product from another account")
  df4['has_generated_sale_on_account_brand'] = df4['has_generated_sale_on_account_brand'].replace('Yes', "Product from {}".format(account))
  df4['has_generated_sale_on_account_brand'] = df4['has_generated_sale_on_account_brand'].replace('Not sure', "No information")

  df4['has_sale'] = df4['has_sale'].replace(False, "has not sale")
  df4['has_sale'] = df4['has_sale'].replace(True, "has sale")
  df4 = df4[df4['has_sale'] == 'has sale']

  df4['currency_rate'] = df4['currency_rate'].astype(float)
  df4.loc[df4['has_sale'] == "has sale", 'total_amount']= df4['total_amount']*df4['currency_rate']


  if utmType == 'source' : 

    df4.loc[df4['s_utm_source'].isnull() == True, 's_utm_sourceBis']= "null"
    df4.loc[df4['s_utm_source'].isnull() == False, 's_utm_sourceBis']= df3['s_utm_source']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_sourceBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    dfColors = dfColors[['s_utm_source','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_sourceBis','has_sale']]
    df5.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_source'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_source'), on='s_utm_source')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_sourceBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_source'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_source'), on='s_utm_source')


    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_sourceBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_source'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df11 = df4.assign()
    df11 = df11[['Account','has_generated_sale_on_account_brand','touchpoint','s_utm_sourceBis','retailer','PoP','has_sale']]
    df11.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df11['leads'] = 1
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['has_generated_sale_on_account_brand','retailer','s_utm_source'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_source'), on='s_utm_source')


    all_nodes = df5.s_utm_source.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.has_generated_sale_on_account_brand.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_source] 
 
  elif utmType == 'medium' : 

    df4.loc[df4['s_utm_medium'].isnull() == True, 's_utm_mediumBis']= "null"
    df4.loc[df4['s_utm_medium'].isnull() == False, 's_utm_mediumBis']= df3['s_utm_medium']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_mediumBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    dfColors = dfColors[['s_utm_medium','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_mediumBis','has_sale']]
    df5.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_medium'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_mediumBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_medium'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_mediumBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_medium'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df11 = df4.assign()
    df11 = df11[['Account','has_generated_sale_on_account_brand','touchpoint','s_utm_mediumBis','retailer','PoP','has_sale']]
    df11.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df11['leads'] = 1
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['has_generated_sale_on_account_brand','retailer','s_utm_medium'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')


    all_nodes = df5.s_utm_medium.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.has_generated_sale_on_account_brand.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_medium] 

  elif utmType == 'campaign' : 

    df4.loc[df4['s_utm_campaign'].isnull() == True, 's_utm_campaignBis']= "null"
    df4.loc[df4['s_utm_campaign'].isnull() == False, 's_utm_mediumBis']= df3['s_utm_campaign']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_campaignBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    dfColors = dfColors[['s_utm_campaign','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_campaignBis','has_sale']]
    df5.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_campaign'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_campaignBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_campaign'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_campaignBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_campaign'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    df11 = df4.assign()
    df11 = df11[['Account','has_generated_sale_on_account_brand','touchpoint','s_utm_campaignBis','retailer','PoP','has_sale']]
    df11.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df11['leads'] = 1
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['has_generated_sale_on_account_brand','retailer','s_utm_campaign'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')


    all_nodes = df5.s_utm_campaign.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.has_generated_sale_on_account_brand.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_campaign] 

  elif utmType == 'term' : 

    df4.loc[df4['s_utm_term'].isnull() == True, 's_utm_termBis']= "null"
    df4.loc[df4['s_utm_term'].isnull() == False, 's_utm_termBis']= df3['s_utm_term']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account)&(dfColors['has_sale']== 'has sale'),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_termBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    #colorsSourceBis = ["#426C9B","#70BCCE","#89E8E9"]
    #dfColors['color'] = colorsSourceBis
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    dfColors = dfColors[['s_utm_term','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_termBis','has_sale']]
    df5.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account)&(df5['has_sale'] == 'has sale'),'cpt']=2
    df5 = df5.groupby(['s_utm_term'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_term'), on='s_utm_term')
   

    df8 = df4.assign()
    df8 = df8[['Account','country','touchpoint','s_utm_termBis','retailer','PoP','has_sale']]
    df8.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account)&(df8['has_sale']== 'has sale'),'cpt']=2
    df8 = df8.groupby(['country','s_utm_term'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df9 = df4.assign()
    df9 = df9[['Account','country','touchpoint','s_utm_termBis','retailer','retailer_id','PoP','has_sale']]
    df9.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account)&(df9['has_sale']== 'has sale') ,'cpt']=2

    dfNumberCountry = df9.assign()
    dfNumberCountry['numberCountry'] = 0
    dfNumberCountry = dfNumberCountry[['country', 'numberCountry']]
    dfNumberCountry = dfNumberCountry.groupby(['country'], as_index=False).sum()
    numberList = []
    while len(numberList) != dfNumberCountry.shape[0] : 
      for i in range(dfNumberCountry.shape[0]) : 
        number = ''.join([random.choice('0123456789') for j in range(6)])
        numberList.append(number)
      numberList = list(set(numberList))
    dfNumberCountry['numberCountry'] = numberList
    
    df9 = df9.join(dfNumberCountry.set_index('country'), on='country')

    df9 = df9.groupby(['numberCountry','retailer_id','s_utm_term'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfNumberCountry.set_index('numberCountry'), on='numberCountry')
    df10 = df4.assign()
    df10 = df10[['retailer','retailer_id']].drop_duplicates()
    df9 = df9.join(df10.set_index('retailer_id'), on='retailer_id')
    df9 = df9.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df11 = df4.assign()
    df11 = df11[['Account','has_generated_sale_on_account_brand','touchpoint','s_utm_termBis','retailer','PoP','has_sale']]
    df11.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df11['leads'] = 1
    df11.loc[(df11['Account']==account)&(df11['has_sale']== 'has sale') ,'cpt']=2
    df11 = df11.groupby(['has_generated_sale_on_account_brand','retailer','s_utm_term'], as_index=False).sum()
    df11 = df11[df11['cpt'] > 0]
    df11 = df11.join(dfColors.set_index('s_utm_term'), on='s_utm_term')


    all_nodes = df5.s_utm_term.values.tolist() + df4.country.values.tolist() + df4.retailer.values.tolist() + df11.has_generated_sale_on_account_brand.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_term] 

  target_indices = []
  for country in df8.country : 
    target_indices.append(all_nodes.index(country))

  for country in df9.country : 
    source_indices.append(all_nodes.index(country))

  for retailer in df9.retailer :  
    target_indices.append(all_nodes.index(retailer))

  for retailer in df11.retailer :  
    source_indices.append(all_nodes.index(retailer))

  for amount in df11.has_generated_sale_on_account_brand :  
    target_indices.append(all_nodes.index(amount))

  values = []
  node_colors = []

  for leads in df8.leads : 
    values.append(leads)

  for leads in df9.leads : 
    values.append(leads)

  for leads in df11.leads : 
    values.append(leads)


  
  for color in df8.color : 
    node_colors.append(color)

  for color in df9.color : 
    node_colors.append(color)

  for color in df11.color : 
    node_colors.append(color)




  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors,
  ))])

  
  fig.update_layout(title_text="UTM {} > Countries > Retailers > Product's origin".format(utmType),
                      font=dict(size = 10, color = 'black'))
  
  return fig
  
  
sankeyUtmSource4(False, retailersSales(True, False,analysisByPopS4), analysisUtmTypeS4, analysisAccount, analysisOperator, analysisCountry,analysisByPopS4)

"""### <font size='3px' color='#007FFF'>Sankey : UTM > Retailers > Has sale</font>"""

# Indications : 
# bestRetailers = True, it only takes top retailers that have the highest sales conversion rates and leads 
# bestRetailers = False, it takes all retailers
# utmType must be defined
# A PoP filter can be added
# Colors of Swaven : ["#426C9B","#70BCCE","#89E8E9",'#000000']

def sankeyUtmSource5(bestRetailers, listRetailers, utmType, account, operator, country,pop) :

  df = necessaryData_account1OnlyAccount.assign()
  df3 = necessaryData_product1OnlyAccount.assign()

  df4 = df3.assign()


  df4['has_sale'] = df4['has_sale'].replace(False, "has not sale")
  df4['has_sale'] = df4['has_sale'].replace(True, "has sale")

  df4.loc[df4['s_utm_source'].isnull() == True, 's_utm_sourceBis']= "null"
  df4.loc[df4['s_utm_source'].isnull() == False, 's_utm_sourceBis']= df3['s_utm_source']
  df4.loc[df4['s_utm_medium'].isnull() == True, 's_utm_mediumBis']= "null"
  df4.loc[df4['s_utm_medium'].isnull() == False, 's_utm_mediumBis']= df3['s_utm_medium']
  df4.loc[df4['s_utm_campaign'].isnull() == True, 's_utm_campaignBis']= "null"
  df4.loc[df4['s_utm_campaign'].isnull() == False, 's_utm_campaignBis']= df3['s_utm_campaign']
  df4.loc[df4['s_utm_term'].isnull() == True, 's_utm_termBis']= "null"
  df4.loc[df4['s_utm_term'].isnull() == False, 's_utm_termBis']= df3['s_utm_term']

  
  df4['currency_rate'] = df4['currency_rate'].astype(float)
  df4.loc[df4['has_sale'] == "has sale", 'total_amount']= df4['total_amount']*df4['currency_rate']

  if utmType == 'source':
    
    df4 = df4[df4['s_utm_sourceBis'] != 'null']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_sourceBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    dfColors = dfColors[['s_utm_source','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_sourceBis','has_sale']]
    df5.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account),'cpt']=2
    df5 = df5.groupby(['s_utm_source'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df8 = df4.assign()
    df8 = df8[['Account','PoP','country','touchpoint','s_utm_sourceBis','retailer','retailer_id','has_sale']]
    df8.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account),'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_source'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_source'), on='s_utm_source')

    df9 = df4.assign()
    df9 = df9[['Account','PoP','country','touchpoint','s_utm_sourceBis','retailer','has_sale']]
    df9.rename(columns={'s_utm_sourceBis': 's_utm_source'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account) ,'cpt']=2
    df9 = df9.groupby(['retailer','s_utm_source','has_sale'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfColors.set_index('s_utm_source'), on='s_utm_source')


    all_nodes = df5.s_utm_source.values.tolist() + df8.retailer.values.tolist() + df9.has_sale.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_source]

  elif utmType == 'medium':
    
    df4 = df4[df4['s_utm_mediumBis'] != 'null']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_mediumBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    dfColors = dfColors[['s_utm_medium','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_mediumBis','has_sale']]
    df5.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account),'cpt']=2
    df5 = df5.groupby(['s_utm_medium'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df8 = df4.assign()
    df8 = df8[['Account','PoP','country','touchpoint','s_utm_mediumBis','retailer','retailer_id','has_sale']]
    df8.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account),'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_medium'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')

    df9 = df4.assign()
    df9 = df9[['Account','PoP','country','touchpoint','s_utm_mediumBis','retailer','has_sale']]
    df9.rename(columns={'s_utm_mediumBis': 's_utm_medium'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account) ,'cpt']=2
    df9 = df9.groupby(['retailer','s_utm_medium','has_sale'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfColors.set_index('s_utm_medium'), on='s_utm_medium')


    all_nodes = df5.s_utm_medium.values.tolist() + df8.retailer.values.tolist() + df9.has_sale.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_medium]

  elif utmType == 'campaign':
    
    df4 = df4[df4['s_utm_campaignBis'] != 'null']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_campaignBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    dfColors = dfColors[['s_utm_campaign','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_campaignBis','has_sale']]
    df5.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account),'cpt']=2
    df5 = df5.groupby(['s_utm_campaign'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    df8 = df4.assign()
    df8 = df8[['Account','PoP','country','touchpoint','s_utm_campaignBis','retailer','retailer_id','has_sale']]
    df8.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account),'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_campaign'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')

    df9 = df4.assign()
    df9 = df9[['Account','PoP','country','touchpoint','s_utm_campaignBis','retailer','has_sale']]
    df9.rename(columns={'s_utm_campaignBis': 's_utm_campaign'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account) ,'cpt']=2
    df9 = df9.groupby(['retailer','s_utm_campaign','has_sale'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfColors.set_index('s_utm_campaign'), on='s_utm_campaign')


    all_nodes = df5.s_utm_campaign.values.tolist() + df8.retailer.values.tolist() + df9.has_sale.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_campaign]

  elif utmType == 'term':

    df4 = df4[df4['s_utm_termBis'] != 'null']

    dfColors = df4.assign()
    
    dfColors.loc[(dfColors['Account']==account),'cpt']=2
    dfColors = dfColors.groupby(['s_utm_termBis'], as_index=False).sum()
    dfColors = dfColors[dfColors['cpt'] > 0]
    colors = px.colors.qualitative.D3
    colorsSource = []
    while len(colorsSource) != dfColors.shape[0] : 
      for i in range(dfColors.shape[0]) : 
        color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
        colorsSource.append(color)
      colorsSource = list(set(colorsSource))
    dfColors['color'] = colorsSource
    dfColors.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    dfColors = dfColors[['s_utm_term','color']]


    df5 = df4.assign()
    df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_termBis','has_sale']]
    df5.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df5['leads'] = 1
    df5.loc[(df5['Account']==account),'cpt']=2
    df5 = df5.groupby(['s_utm_term'], as_index=False).sum()
    df5 = df5[df5['cpt'] > 0]
    df5 = df5.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df8 = df4.assign()
    df8 = df8[['Account','PoP','country','touchpoint','s_utm_termBis','retailer','retailer_id','has_sale']]
    df8.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df8['leads'] = 1
    df8.loc[(df8['Account']==account),'cpt']=2
    df8 = df8.groupby(['retailer','s_utm_term'], as_index=False).sum()
    df8 = df8[df8['cpt'] > 0]
    df8 = df8.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

    df9 = df4.assign()
    df9 = df9[['Account','PoP','country','touchpoint','s_utm_termBis','retailer','has_sale']]
    df9.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
    df9['leads'] = 1
    df9.loc[(df9['Account']==account) ,'cpt']=2
    df9 = df9.groupby(['retailer','s_utm_term','has_sale'], as_index=False).sum()
    df9 = df9[df9['cpt'] > 0]
    df9 = df9.join(dfColors.set_index('s_utm_term'), on='s_utm_term')


    all_nodes = df5.s_utm_term.values.tolist() + df8.retailer.values.tolist() + df9.has_sale.values.tolist()
    source_indices = [all_nodes.index(source) for source in df8.s_utm_term]
 

  target_indices = []

  for retailer in df8.retailer :  
    target_indices.append(all_nodes.index(retailer))

  for retailer in df9.retailer :  
    source_indices.append(all_nodes.index(retailer))

  for minimum_item_qty in df9.has_sale :  
    target_indices.append(all_nodes.index(minimum_item_qty))

  values = []
  node_colors = []


  for leads in df8.leads : 
    values.append(leads)
  
  for leads in df9.leads : 
    values.append(leads)


  for color in df8.color : 
    node_colors.append(color)

  for color in df9.color : 
    node_colors.append(color)



  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors,
  ))])

  fig.update_layout(title_text="UTM {} > Retailers > Has sale/Has not sale".format(utmType),
                    font=dict(size = 10, color = 'black'))
  
  return fig
  #pio.write_image(fig, 'sankey_five.png', width=1400, height=700)
  
sankeyUtmSource5(False, retailersSales(True, False,analysisByPoPS5), analysisUtmTypeS5, analysisAccount, analysisOperator, analysisCountry,analysisByPoPS5)

"""### <font size='3px' color='#007FFF'>ONLY HUGO BOSS Sankey : UTM Term > Retailers > Has sale</font>"""

# Indications : 
# bestRetailers = True, it only takes top retailers that have the highest sales conversion rates and leads 
# bestRetailers = False, it takes all retailers
# utmType, pop and product can be changed in the "Filters" tab

def sankeyUtmSource6(bestRetailers, listRetailers, utmType, account, operator, country,pop) :

  df = necessaryData_account1.assign()
  df3 = necessaryData_product1.assign()

  if (operator == 'null') & (country == 'null') : 
      df = df[(df['Account'] == account)]
      df3 = df3[(df3['Account'] == account)]
  elif (operator != 'null') & (country == 'null') :
      df = df[(df['Account'] == account) & (df['Operator'] == operator)]
      df3 = df3[(df3['Account'] == account) & (df3['Operator'] == operator)]
  elif (operator == 'null') & (country != 'null') : 
      df = df[(df['Account'] == account) & (df['country'] == country)]
      df3 = df3[(df3['Account'] == account) & (df3['country'] == country)]
  else : 
      df = df[(df['Account'] == account) & (df['Operator'] == operator) & (df['country'] == country)]
      df3 = df3[(df3['Account'] == account) & (df3['Operator'] == operator) & (df3['country'] == country)]

  df4 = df3.assign()


  df4['has_sale'] = df4['has_sale'].replace(False, "has not sale")
  df4['has_sale'] = df4['has_sale'].replace(True, "has sale")

  df4.loc[df4['s_utm_medium'].isnull() == True, 's_utm_mediumBis']= "null"
  df4.loc[df4['s_utm_medium'].isnull() == False, 's_utm_mediumBis']= df3['s_utm_medium']
  df4.loc[df4['s_utm_campaign'].isnull() == True, 's_utm_campaignBis']= "null"
  df4.loc[df4['s_utm_campaign'].isnull() == False, 's_utm_campaignBis']= df3['s_utm_campaign']
  df4.loc[df4['s_utm_term'].isnull() == True, 's_utm_termBis']= "null"
  df4.loc[df4['s_utm_term'].isnull() == False, 's_utm_termBis']= df3['s_utm_term']

  df4bis = df4[df4['has_sale']=="has not sale"]
  df4bis.loc[(df4bis['retailer'] == "Boots")&(df4bis['s_utm_campaignBis'] == 'traffic'), 'cat']= "1"
  df4bis.loc[(df4bis['retailer'] == "Boots")&(df4bis['s_utm_campaignBis'] == 'reach'), 'cat']= "2"
  df4bis.loc[(df4bis['retailer'] == "Boots")&(df4bis['s_utm_campaignBis'] == 'null'), 'cat']= "3"
  df4bis.loc[(df4bis['retailer'] == "The Fragrance Shop")&(df4bis['s_utm_campaignBis'] == 'traffic'), 'cat']= "4"
  df4bis.loc[(df4bis['retailer'] == "The Fragrance Shop")&(df4bis['s_utm_campaignBis'] == 'reach'), 'cat']= "5"
  df4bis.loc[(df4bis['retailer'] == "The Fragrance Shop")&(df4bis['s_utm_campaignBis'] == 'null'), 'cat']= "6"
  df4bis.loc[(df4bis['retailer'] == "The Perfume Shop")&(df4bis['s_utm_campaignBis'] == 'traffic'), 'cat']= "7"
  df4bis.loc[(df4bis['retailer'] == "The Perfume Shop")&(df4bis['s_utm_campaignBis'] == 'reach'), 'cat']= "8"
  df4bis.loc[(df4bis['retailer'] == "The Perfume Shop")&(df4bis['s_utm_campaignBis'] == 'null'), 'cat']= "9"
  df4bis.loc[(df4bis['retailer'] == "Fragrance Direct")&(df4bis['s_utm_campaignBis'] == 'traffic'), 'cat']= "10"
  df4bis.loc[(df4bis['retailer'] == "Fragrance Direct")&(df4bis['s_utm_campaignBis'] == 'reach'), 'cat']= "11"
  df4bis.loc[(df4bis['retailer'] == "Fragrance Direct")&(df4bis['s_utm_campaignBis'] == 'null'), 'cat']= "12"
  df4bis['cat'] = df4bis['cat'].drop_duplicates()
  df4bis = df4bis[['date','PoP','Account','Operator','country','retailer','retailer_id','swaven_provider_id','Provider','prc','pid','touchpoint','has_sale','currency_rate','leadid','s_utm_mediumBis',	's_utm_campaignBis',	's_utm_termBis',	'cat']]
  df4bis = df4bis.dropna()

  df4 = df4[df4['has_sale']=="has sale"]
 
  df4 = pd.concat([df4,df4bis])
  
  df4['currency_rate'] = df4['currency_rate'].astype(float)
  df4.loc[df4['has_sale'] == "has sale", 'total_amount']= df4['total_amount']*df4['currency_rate']

  df4 = df4[df4['s_utm_termBis'] != 'null']


  dfColors = df4.assign()
  
  dfColors.loc[(dfColors['Account']==account),'cpt']=2
  dfColors = dfColors.groupby(['s_utm_termBis'], as_index=False).sum()
  dfColors = dfColors[dfColors['cpt'] > 0]
  colors = px.colors.qualitative.D3
  colorsSource = []
  while len(colorsSource) != dfColors.shape[0] : 
    for i in range(dfColors.shape[0]) : 
      color = "#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
      colorsSource.append(color)
    colorsSource = list(set(colorsSource))
  colorsSourceBis = ["#426C9B","#70BCCE","#89E8E9"]
  dfColors['color'] = colorsSourceBis
  dfColors.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
  dfColors = dfColors[['s_utm_term','color']]


  df5 = df4.assign()
  df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_termBis','has_sale']]
  df5.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
  df5['leads'] = 1
  df5.loc[(df5['Account']==account),'cpt']=2
  df5 = df5.groupby(['s_utm_term'], as_index=False).sum()
  df5 = df5[df5['cpt'] > 0]
  df5 = df5.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

  df8 = df4.assign()
  df8 = df8[['Account','PoP','country','touchpoint','s_utm_termBis','retailer','retailer_id','has_sale']]
  df8.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
  df8['leads'] = 1
  df8.loc[(df8['Account']==account),'cpt']=2
  df8 = df8.groupby(['retailer','s_utm_term'], as_index=False).sum()
  df8 = df8[df8['cpt'] > 0]
  df8 = df8.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

  df9 = df4.assign()
  df9 = df9[['Account','PoP','country','touchpoint','s_utm_termBis','retailer','has_sale']]
  df9.rename(columns={'s_utm_termBis': 's_utm_term'}, inplace=True)
  df9['leads'] = 1
  df9.loc[(df9['Account']==account) ,'cpt']=2
  df9 = df9.groupby(['retailer','s_utm_term','has_sale'], as_index=False).sum()
  df9 = df9[df9['cpt'] > 0]
  df9 = df9.join(dfColors.set_index('s_utm_term'), on='s_utm_term')


  all_nodes = df5.s_utm_term.values.tolist() + df8.retailer.values.tolist() + df9.has_sale.values.tolist()
  source_indices = [all_nodes.index(source) for source in df8.s_utm_term]
 

  target_indices = []

  for retailer in df8.retailer :  
    target_indices.append(all_nodes.index(retailer))

  for retailer in df9.retailer :  
    source_indices.append(all_nodes.index(retailer))

  for minimum_item_qty in df9.has_sale :  
    target_indices.append(all_nodes.index(minimum_item_qty))

  values = []
  node_colors = []


  for leads in df8.leads : 
    values.append(leads)
  
  for leads in df9.leads : 
    values.append(leads)


  for color in df8.color : 
    node_colors.append(color)

  for color in df9.color : 
    node_colors.append(color)



  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors,
  ))])

  fig.update_layout(title_text="UTM Term > Retailers > Has sale/Has not sale",
                    font=dict(size = 10, color = 'black'), height = 700)
  
  return fig

#if analysisAccount == 'PUBLICIS'  :
  #sankeyUtmSource6(False, retailersSales(False,False,analysisByPoPR1), 'term', 'PUBLICIS', 'COTY - HUGO BOSS', 'null','GB - IP - COTY - Hugo Boss - TRAFFIC')

"""### <font size='3px' color='#007FFF'>ONLY IF INVESTMENT HUGO BOSS Sankey : Investments > UTM Campaign > UTM Term > Retailers > Sales conversion rate</font>"""

def sankeyInvestment() :

  #["#426C9B","#70BCCE","#89E8E9"]

  df = pd.read_excel("Sankey_analysis_Hugo_Boss.xlsx")
  df['ROAS'] = df['sales_value']/df['investment']*100
  df['ROAS'] = df['ROAS'].round(2)
  df['ROAS'] = df['ROAS'].astype(str)+ ' %'
  
  dfColors = df.assign()
  dfColors = dfColors.groupby(['s_utm_term'], as_index=False).sum()
  dfColors = dfColors[['s_utm_term']]
  dfColors['color'] = ["#426C9B","#70BCCE","#89E8E9"]
  
  df = df.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

  df['sumInvest'] = 'investment'


  all_nodes = df.sumInvest.values.tolist() + df.s_utm_campaign.values.tolist() + df.s_utm_term.values.tolist() + df.ROAS.values.tolist()
  source_indices = [all_nodes.index(source) for source in df.sumInvest]
 
  target_indices = []

  for s_utm_campaign in df.s_utm_campaign :  
    target_indices.append(all_nodes.index(s_utm_campaign))
  
  for s_utm_campaign in df.s_utm_campaign :  
    source_indices.append(all_nodes.index(s_utm_campaign))

  for s_utm_term in df.s_utm_term :  
    target_indices.append(all_nodes.index(s_utm_term))

  for s_utm_term in df.s_utm_term :  
    source_indices.append(all_nodes.index(s_utm_term))

  for ROAS in df.ROAS :  
    target_indices.append(all_nodes.index(ROAS))

  values = []
  node_colors = []


  for investment in df.investment : 
    values.append(investment)
  
  for investment in df.investment : 
    values.append(investment)
  
  for investment in df.investment : 
    values.append(investment)

  for color in df.color : 
    node_colors.append(color)

  for color in df.color : 
    node_colors.append(color)
  
  for color in df.color : 
    node_colors.append(color)


  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors
  ))])

  fig.update_layout(title_text="Investment > UTM Campaign > UTM Term > ROAS (sales value/investment)",
                    font=dict(size = 10, color = 'black'), height = 700)
  
  fig.show()

  #return df
#if os.path.isfile('invest_imp.xlsx') == True : 
  #sankeyInvestment()

"""### <font size='3px' color='#007FFF'>ONLY BEIERSDORF NIVEA SPAIN Sankey : Investments > UTM Campaign > UTM Term > Retailers > Sales conversion rate</font>"""

# Indications : 
# bestRetailers = True, it only takes top retailers that have the highest sales conversion rates and leads 
# bestRetailers = False, it takes all retailers
# utmType, pop and product can be changed in the "Filters" tab

def sankeyUtmSource7(bestRetailers, listRetailers, utmType, account, operator, country,pop) :

  df = necessaryData_account1OnlyAccount.assign()
  df3 = necessaryData_product1OnlyAccount.assign()
  df1 = necessaryDataSales1OnlyAccount.assign()

  df4 = df3.assign()

  #df4 = df4[df4['has_sale']==True]

  #df4['currency_rate'] = df4['currency_rate'].astype(float)

  #df4 = df4[df4['s_utm_termBis'] != 'null']
  #df0 = df0[df0['s_utm_term'] != 'null']


  dfColors = df4.assign()
  
  dfColors.loc[(dfColors['Account']==account),'cpt']=2
  dfColors = dfColors.groupby(['s_utm_term'], as_index=False).sum()
  dfColors = dfColors[dfColors['cpt'] > 0]
  colorsSourcebis = ["#5DE1E1","#9f9f9f","#70BCCE","#426C9B","#CEF6F6"]
  dfColors['color'] = colorsSourcebis
  dfColors = dfColors[['s_utm_term','color']]


  df5 = df4.assign()
  df5 = df5[['Account','PoP','touchpoint','country','retailer','s_utm_content','s_utm_term']]
  df5['leads'] = 1
  df5.loc[(df5['Account']==account),'cpt']=2
  df5 = df5.groupby(['s_utm_content','s_utm_term'], as_index=False).sum()
  df5 = df5[df5['cpt'] > 0]
  df5 = df5.join(dfColors.set_index('s_utm_term'), on='s_utm_term')

  

  df8 = df4.assign()
  df8 = df8[['Account','PoP','country','touchpoint','s_utm_content','s_utm_term','retailer','retailer_id','has_sale']]
  df8['leads'] = 1
  df8.loc[(df8['Account']==account),'cpt']=2
  df8 = df8.groupby(['s_utm_term','retailer'], as_index=False).sum()
  df8 = df8[df8['cpt'] > 0]
  df8 = df8.join(dfColors.set_index('s_utm_term'), on='s_utm_term')


  df1Sales = df1.assign()

  #df1Amazon = df1.assign()
  #df1Amazon = df1Amazon.groupby(['swaven_retailer_id'], as_index=False).sum()
  #df1Amazon = df1Amazon[df1Amazon['swaven_retailer_id'] == 185]

  df1Sales = df1Sales.groupby(['swaven_retailer_id','s_utm_term'], as_index=False).sum()
  df1Sales = df1Sales[['swaven_retailer_id','s_utm_term','line_item_value','minimum_item_qty']]
  df1Sales.rename(columns={'swaven_retailer_id': 'retailer_id'}, inplace=True)


  df9 = df4.assign()
  df9 = df9[['Account','PoP','country','touchpoint','s_utm_content','s_utm_term','retailer','retailer_id','prc']]
  df9['leads'] = 1
  df9.loc[(df9['Account']==account),'cpt']=2
  df9 = df9.groupby(['retailer','s_utm_term'], as_index=False).sum()
  df9 = df9[df9['cpt'] > 0]
  del df9['cpt']

  df9Amazon = df9.assign()
  df9Amazon = df9Amazon[df9Amazon['retailer'] == 'Amazon']
 
  df9Druni = df9.assign()
  df9Druni = df9Druni[(df9Druni['retailer'] == 'Druni')&(df9Druni['s_utm_term'] != 'skin-effect')]

  df10 = df4.assign()
  df10 = df10[['retailer','retailer_id']].drop_duplicates()


  df0 = df4.assign()
  df0 = df0[['Account','PoP','country','touchpoint','s_utm_content','s_utm_term','retailer','retailer_id','prc']]
  df0['leads'] = 1
  df0.loc[(df0['Account']==account),'cpt']=2
  df0 = df0.groupby(['s_utm_term','retailer_id'],as_index=False).sum()
  df0 = df0[df0['cpt'] > 0]
  df0 =  df0[df0['retailer_id']!=185]
  df0 = df0.join(dfColors.set_index('s_utm_term'), on='s_utm_term')
  df0 = df0[['s_utm_term','retailer_id','leads','prc','color']]
  df0 = df0.join(df10.set_index('retailer_id'), on='retailer_id')
  df0 = pd.merge(df0,df1Sales,on=['retailer_id','s_utm_term'])
  df0['saleConv'] = df0['line_item_value']/df0['prc']*100
  df0['saleConv'] = round(df0['saleConv'], 2).astype(str) + " %"
  df0['line_item_value'] = round(df0['line_item_value'], 2).astype(str) + " €"
  df0['saleValueConv'] = df0[['line_item_value', 'saleConv']].apply(' | '.join, axis=1)
  #df0['line_item_value'].loc[3] = '978.36 €'
  #df0['saleValueConv'].loc[3] = '978.36 € | 4.53 %'
  

  df0.loc[df0.shape[0]+1] = ['null',185,df9Amazon['leads'].sum(),' ','#9f9f9f','Amazon','398.5 €',' ',' ','398.5 € | 1.13 %']
  df0.loc[df0.shape[0]+1] = ['feed_undefined',488,29,' ','#5DE1E1','Arenal','0 €',' ',' ','0 € | 0 %']
  df0.loc[df0.shape[0]+1] = ['null',488,1,' ','#9f9f9f','Arenal','0 € ',' ',' ','0 € | 0 % ']
  df0.loc[df0.shape[0]+1] = ['product-rate',488,144,' ','#70BCCE','Arenal',' 0 €',' ',' ',' 0 € | 0 %']
  df0.loc[df0.shape[0]+1] = ['story',488,93,' ','#CEF6F6','Arenal','0 €  ',' ',' ',' 0 € | 0 % ']
  df0['saleValueConv'].loc[1] = df0['line_item_value'].loc[1]

 
    



  all_nodes = df5.s_utm_content.values.tolist() + df8.s_utm_term.values.tolist() + df8.retailer.values.tolist() + df0.saleValueConv.values.tolist()
  source_indices = [all_nodes.index(source) for source in df5.s_utm_content]
 

  target_indices = []

  for s_utm_term in df5.s_utm_term :  
    target_indices.append(all_nodes.index(s_utm_term))

  for s_utm_term in df8.s_utm_term :  
    source_indices.append(all_nodes.index(s_utm_term))

  for retailer in df8.retailer :  
    target_indices.append(all_nodes.index(retailer))

  for retailer in df0.retailer :  
    source_indices.append(all_nodes.index(retailer))

  for saleValueConv in df0.saleValueConv :  
    target_indices.append(all_nodes.index(saleValueConv))



  values = []
  node_colors = []


  for leads in df5.leads : 
    values.append(leads)
  
  for leads in df8.leads : 
    values.append(leads)

  for leads in df0.leads : 
    values.append(leads)



  for color in df5.color : 
    node_colors.append(color)

  for color in df8.color : 
    node_colors.append(color)

  for color in df0.color : 
    node_colors.append(color)





  fig = go.Figure(data=[go.Sankey(
      # Define nodes
      node = dict(
        label = all_nodes,
        color = 'gray',
      ),

      # Add links
      link = dict(
        source = source_indices,
        target = target_indices,
        value =  values,
        color = node_colors,
  ))])

  fig.update_layout(title_text="UTM Content > UTM Term > Retailers > Sales value | Sales conversion rate",
                    font=dict(size = 10, color = 'black'), height = 700)
  
  return fig


#sankeyUtmSource7(False, retailersSales(True, False,analysisByPoPR1), 'term', analysisAccount, analysisOperator, analysisCountry,analysisByPoPR1)

"""## <font size='4px' color='#0066CC'>**Competitors**</font>

### <font size='3px' color='#007FFF'>Main figures of PoP's competitors</font>
"""

# Indication :
# Displays all major competitor figures
# To change competitor information, the file "Analysis_Filter" must be changed

def competitiorComparisonMainFigures(account, operator, country, accountCompetitor, operatorCompetitor, countryCompetitor, popTypeCompetitor, popCompetitor, catCompetitor) : 


  mainFiguresPoP = pop(account, operator, country,'N', 'N','all','null','null','O').assign()

  for a in range(len(accountCompetitor)) : 

    if (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
        mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null',countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a])])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null',countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null','null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null','null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], 'null','null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], "null",catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], 'null','null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], "null",countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], "null",catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], "null",countryCompetitor[a], 'N', 'N',"null", popCompetitor[a],"null",'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], "null","null", 'N', 'N',popTypeCompetitor[a], "null",catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], "null","null", 'N', 'N',popTypeCompetitor[a], "null","null",'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null',countryCompetitor[a], 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null',countryCompetitor[a], 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null','null', 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a],'null','null', 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all','null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all','null','null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N','all', 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], operatorCompetitor[a],'null', 'N', 'N','all', 'null','null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null',countryCompetitor[a], 'N', 'N','all', 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null',countryCompetitor[a], 'N', 'N','all', 'null','null','Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null','null', 'N', 'N','all', 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] != "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop(accountCompetitor[a], 'null','null', 'N', 'N','all', 'null','null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null',countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null',countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null','null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null','null', 'N', 'N',popTypeCompetitor[a], popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], 'null','null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],'null', 'N', 'N',popTypeCompetitor[a], 'null','null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null',countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null',countryCompetitor[a], 'N', 'N',popTypeCompetitor[a], 'null','null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null','null', 'N', 'N',popTypeCompetitor[a], 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] != "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null','null', 'N', 'N',popTypeCompetitor[a], 'null','null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],'null', 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],'null', 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null',countryCompetitor[a], 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null',countryCompetitor[a], 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null','null', 'N', 'N','all', popCompetitor[a],catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] != "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', 'null','null', 'N', 'N','all', popCompetitor[a],'null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all', 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],countryCompetitor[a], 'N', 'N','all', 'null','null','Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop('null', operatorCompetitor[a],'null', 'N', 'N','all', 'null',catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] != "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop("null", operatorCompetitor[a],"null", 'N', 'N',"all", "null","null",'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] != "null"):
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop("null", "null",countryCompetitor[a], 'N', 'N','"all', "null",catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] != "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop("null", "null",countryCompetitor[a], 'N', 'N','"all', "null","null",'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] != "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop("null", "null","null", 'N', 'N','"all', "null",catCompetitor[a],'Y')])
    elif (accountCompetitor[a] == "null") & (popTypeCompetitor[a] == "null") & (popCompetitor[a] == "null") & (operatorCompetitor[a] == "null") & (countryCompetitor[a] == "null") & (catCompetitor[a] == "null"): 
      mainFiguresPoP = pd.concat([mainFiguresPoP,pop("null", "null","null", 'N', 'N','"all', "null","null",'Y')])

  mainFiguresCompetitor = mainFiguresPoP.assign()
  mainFiguresCompetitor = mainFiguresCompetitor.drop_duplicates() 

  return mainFiguresCompetitor

competitorsAllAccount = competitiorComparisonMainFigures(analysisAccount, analysisOperator, analysisCountry, competitorsAccount, competitorsOperator, competitorsCountry, competitorsTypePoP, competitorsPoP, competitorsCat)

"""### <font size='3px' color='#007FFF'>Comparison of lead conversion rate with competitors</font>"""

# Indications : 
# touchpointType must be defined
# To change competitor information, the file "Analysis_Filter" must be changed
# The threshold is calculated based on the data of the analysed account and its competitors

def competitiorComparisonLeadConversionRate(touchpointType, account, operator, country, accountCompetitor, operatorCompetitor, countryCompetitor) : 

  df = competitorsAllAccount.assign()
  df = df[df['touchpoint'] == touchpointType]


  threshold = thresholdLeadConversionRate(df, touchpointType)*100
  df['leadConversionRate'] = df['leadConversionRate']*100
  df['typeAccount'] = 'Competitors'
  df['PoP'] = df[['country', 'PoP']].apply(' | '.join, axis=1)
  df0 = pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','O')
  df0['PoP'] = df0[['country', 'PoP']].apply(' | '.join, axis=1)
  for i in range(len(df['PoP'].tolist())) : 
    if df['PoP'].tolist()[i] in df0['PoP'].tolist() :
      df.loc[df['PoP'] == df['PoP'].tolist()[i], 'typeAccount']= 'Original'

  df2 = df.assign()
  df2 = df2[df2['leadConversionRate'] < threshold]

  fig = px.scatter(df, x="leads", y="leadConversionRate", log_x=True,
                 hover_name="PoP", hover_data=["leadConversionRate"], color="typeAccount", size="total_lead_value_incltaxes",size_max=25,title= 'Repartition of PoP {} per lead conversion rate per leads (threshold = {}%)'.format(touchpointType, f"{threshold:.2f}"))
    # Threshold line
  fig.add_trace(go.Scatter(
        name='Lead conversion rate threshold',
        x = [0, df['leads'].max()*2],
        y = [threshold, threshold],
        mode = "lines",
        marker = dict(color = 'rgb(255,0,0, 0.8)')
    ),row=1, col=1)
  fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))
  return fig
  #pio.write_image(fig, 'competitors_LCR.png', width=1700, height=700)

if competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0] : 
  competitiorComparisonLeadConversionRate(analysisTouchpointTypeC1, analysisAccount, analysisOperator, analysisCountry, competitorsAccount, competitorsOperator, competitorsCountry)

"""### <font size='3px' color='#007FFF'>Comparison of UTM completion rate with competitors</font>"""

# Indications : 
# utmType and touchpointType must be defined
# To change competitor information, the file "Analysis_Filter" must be changed
# The threshold is calculated based on the data of the analysed account and its competitors

def competitiorComparisonUtmCompletionRate(utmType, touchpointType, account, operator, country, accountCompetitor, operatorCompetitor, countryCompetitor) : 

  if utmType == 'source' : 
      utmCompletion = 'utmSourceCompletionRate'
  elif utmType == 'medium' : 
      utmCompletion = 'utmMediumCompletionRate'
  else :
      utmCompletion = 'utmCampaignCompletionRate'

  df = competitorsAllAccount.assign()
  df = df[df['touchpoint'] == touchpointType]
  
  
  threshold = thresholdUtmCompletionRate(df, touchpointType, utmType)*100
  df[utmCompletion] = df[utmCompletion]*100
  df['typeAccount'] = 'Competitors'
  df['PoP'] = df[['country', 'PoP']].apply(' | '.join, axis=1)
  df0 = pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','O')
  df0['PoP'] = df0[['country', 'PoP']].apply(' | '.join, axis=1)
  for i in range(len(df['PoP'].tolist())) : 
    if df['PoP'].tolist()[i] in df0['PoP'].tolist() :
      df.loc[df['PoP'] == df['PoP'].tolist()[i], 'typeAccount']= 'Original'


  df2 = df.assign()
  df2 = df2[df2[utmCompletion] < threshold]

  fig = px.scatter(df, x="leads", y=utmCompletion, log_x=True,
                 hover_name="PoP", hover_data=[utmCompletion], color="typeAccount", size="total_lead_value_incltaxes",size_max=25, title= 'Repartition of PoP {} per UTM {} completion rate per leads (threshold = {}%)'.format(touchpointType, utmType, f"{threshold:.2f}"))
    # Threshold line
  fig.add_trace(go.Scatter(
        name='UTM completion rate threshold',
        x = [0, df['leads'].max()*2],
        y = [threshold, threshold],
        mode = "lines",
        marker = dict(color = 'rgb(255,0,0, 0.8)')
    ),row=1, col=1)
  fig.update_traces(marker_sizemin=3, selector=dict(type='scatter'))
  return fig
  #pio.write_image(fig, 'competitors_UTM.png', width=1700, height=700)

if competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0] : 
  competitiorComparisonUtmCompletionRate(analysisUtmTypeC2, analysisTouchpointTypeC2, analysisAccount, analysisOperator, analysisCountry, competitorsAccount, competitorsOperator, competitorsCountry)

"""## <font size='4px' color='#0066CC'>**Funnel**</font>"""

# Exemple of a Funnel graph for Augustin

data = dict(
    number=[39, 27.4, 20.6, 11, 2],
    stage=["Website visit", "Downloads", "Potential customers", "Requested price", "Invoice sent"])
fig = px.funnel(data, x='number', y='stage')
fig.show()

"""# <font color='#00458A'>**Recommendations**</font>

## <font size='4px' color='#0066CC'>**HTML Format**</font>

### <font size='3px' color='#007FFF'>TITLE</font>
"""

f = open('recommendations.html', 'w') 

period = "Period : {} to {}".format(analysisDate1,analysisDate2)
  
if (competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 != 'all') & (analysisTouchpointTypeUTM1 != 'all')  : 
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title2" href="#competitors">7. Competitors</a></p><p><a class="title3" href="#competitors1">a. Comparison of lead conversion rate with competitors</a></p><p><a class="title3" href="#competitors2">b. Comparison of UTM completion rate with competitors</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco1">1. Lead conversion rate by type of PoP</a></p><p><a class="title2" href="#reco2">2. UTM completion rate by type of PoP and type of UTM</a></p><p><a class="title2" href="#reco3">3. Sales conversion rate by retailer</a></p></div><body></body></html>'
elif (competitorsAllAccount.shape[0] <= pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 != 'all') & (analysisTouchpointTypeUTM1 != 'all'): 
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco1">1. Lead conversion rate by type of PoP</a></p><p><a class="title2" href="#reco2">2. UTM completion rate by type of PoP and type of UTM</a></p><p><a class="title2" href="#reco3">3. Sales conversion rate by retailer</a></p></div><body></body></html>'
elif (competitorsAllAccount.shape[0] <= pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 == 'all') & (analysisTouchpointTypeUTM1 != 'all') :
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco2">1. UTM completion rate by type of PoP and type of UTM</a></p><p><a class="title2" href="#reco3">2. Sales conversion rate by retailer</a></p></div><body></body></html>'
elif (competitorsAllAccount.shape[0] <= pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 == 'all') & (analysisTouchpointTypeUTM1 == 'all') :
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco3">1. Sales conversion rate by retailer</a></p></div><body></body></html>'
elif (competitorsAllAccount.shape[0] <= pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 != 'all') & (analysisTouchpointTypeUTM1 == 'all') :
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco1">1. Lead conversion rate by type of PoP</a></p><p><a class="title2" href="#reco3">2. Sales conversion rate by retailer</a></p></div><body></body></html>'
elif (competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 != 'all') & (analysisTouchpointTypeUTM1 == 'all')  : 
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title2" href="#competitors">7. Competitors</a></p><p><a class="title3" href="#competitors1">a. Comparison of lead conversion rate with competitors</a></p><p><a class="title3" href="#competitors2">b. Comparison of UTM completion rate with competitors</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco1">1. Lead conversion rate by type of PoP</a></p><p><a class="title2" href="#reco3">2. Sales conversion rate by retailer</a></p></div><body></body></html>'
elif (competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 == 'all') & (analysisTouchpointTypeUTM1 == 'all')  : 
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title2" href="#competitors">7. Competitors</a></p><p><a class="title3" href="#competitors1">a. Comparison of lead conversion rate with competitors</a></p><p><a class="title3" href="#competitors2">b. Comparison of UTM completion rate with competitors</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco3">1. Sales conversion rate by retailer</a></p></div><body></body></html>'
elif (competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0]) & (analysisTouchpointTypeLCR1 == 'all') & (analysisTouchpointTypeUTM1 != 'all')  : 
  html_template = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><style>html{padding-left: 20px;padding-top: 20px;padding-bottom: 20px}#arrow{position: -webkit-sticky; position: sticky; top: 570px;left:1200px;border-radius: 50%;}#arrow:hover{background-color: rgb(158,158,158,0.6);}a{text-decoration: none;}a:hover{color : rgb(0, 60, 120);text-decoration: underline; }.title1{color:rgb(0,127,255);font: 17px Arial, sans-serif;font-weight: bold; }.title2{color:rgb(0,127,255);font: 14px Arial, sans-serif; padding-left : 20px }.title3{color:rgb(0,127,255);font: 12px Arial, sans-serif; padding-left : 40px }h1{font: 23px Arial, sans-serif;font-weight: bold;text-align: center;}p,td{font: 11px Arial, sans-serif}h2{color:rgb(0,69,138);font: 19px Arial, sans-serif;font-weight: bold;padding-top: 20px;}h3{color:rgb(0,102,204);font: 16px Arial, sans-serif;font-weight: bold;padding-top: 10px;}h4{color:rgb(0,127,255);font: 13px Arial, sans-serif;padding-top: 10px;padding-left: 40px;}table{border: 1px solid;border-collapse: collapse;}td{padding:5px;text-align: center;border : 1px solid;}</style></head><h1 id="title">Analysis Growth Hacking</h1><p style="text-align: center;font-style: italic;padding-bottom : 20px">'+period+'</p><a href="#title"><svg id="arrow" version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="30.000000pt" viewBox="0 0 1280.000000 1280.000000" preserveAspectRatio="xMidYMid meet"><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"><path d="M6288 11770 c-172 -21 -372 -107 -511 -220 -40 -32 -786 -773 -1659 -1647 -1716 -1718 -1653 -1651 -1729 -1835 -55 -132 -73 -227 -72 -383 0 -119 4 -155 27 -240 171 -648 919 -938 1482 -573 64 41 221 193 836 807 l758 755 3 -3289 2 -3290 22 -80 c113 -417 441 -702 855 -744 519 -52 984 310 1063 829 13 81 15 556 15 3335 l0 3240 758 -757 c808 -807 820 -818 987 -887 140 -59 215 -74 375 -75 195 -1 330 32 487 120 507 283 652 940 315 1424 -48 70 -3156 3189 -3273 3285 -72 60 -217 144 -291 169 -157 53 -317 73 -450 56z"/></g></svg></a><p id="contents" style = "font: 19px Arial, sans-serif; font-weight : bold; padding-bottom : 10px">Table of contents :</p><div id="contents2"><p><a class="title1" href="#figures">I. Figures</a></p><p><a class="title2" href="#figures1">1. Main account figures</a></p><p><a class="title2" href="#figures2">2. Growth rates account</a></p><p><a class="title2" href="#figures3">3. Main PoPs figures</a></p><p><a class="title2" href="#figures4">4. Growth rates PoPs</a></p><p><a class="title1" href="#analysis">II. Analysis</a></p><p><a class="title2" href="#countries">1. Countries</a></p><p><a class="title3" href="#countries1">a. TOP countries by account</a></p><p><a class="title2" href="#LCR">2. Lead conversion rate</a></p><p><a class="title3" href="#LCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title3" href="#LCR2">b. Lead conversion rate by source by PoP</a></p><p><a class="title2" href="#UTMCR">3. UTM completion rate</a></p><a class="title3" href="#UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</a></p><p><a class="title2" href="#products">4. Products</a></p><a class="title3" href="#products1">a. Average price of products</a></p><a class="title3" href="#products2">b. TOP Products by Account, Operator, Country AND/OR PoP</a></p><p><a class="title2" href="#retailers">5. Retailers</a></p><p><a class="title3" href="#retailers1">a. Sales conversion rate by leads</a></p><p><a class="title3" href="#retailers2">b. Sales conversion rate by AVG lead value</a></p><p><a class="title2" href="#sankeys">6. Sankeys</a></p><p><a class="title3" href="#sankey1">a. UTM > PoP > Products > Retailers > Minimum item quantity</a></p><p><a class="title3" href="#sankey2">b. UTM > PoP > Products > Retailers > Sale Value</a></p><p><a class="title3" href="#sankey3">c. UTM > Countries > Retailers > minimum_item_qty</a></p><p><a class="title3" href="#sankey4">d. UTM > Countries > Retailers > Product origin</a></p><p><a class="title3" href="#sankey5">e. UTM > Retailers > Has sale</a></p><p><a class="title2" href="#competitors">7. Competitors</a></p><p><a class="title3" href="#competitors1">a. Comparison of lead conversion rate with competitors</a></p><p><a class="title3" href="#competitors2">b. Comparison of UTM completion rate with competitors</a></p><p><a class="title1" href="#reco">III. Recommendations</a></p><p><a class="title2" href="#reco2">1. UTM completion rate by type of PoP and type of UTM</a></p><p><a class="title2" href="#reco3">2. Sales conversion rate by retailer</a></p></div><body></body></html>'

f.write(html_template) 
  
f.close()

"""### <font size='3px' color='#007FFF'>I. FIGURES</font>

#### <font size='2px' color='#606060'>**1. Main account figures**</font>
"""

f = open('recommendations.html', 'a') 

period = "Period : {} to {}".format(analysisDate1,analysisDate2)

mainFiguresAccount = mainFigures(analysisAccount, 'N', 'N').assign()
if mainFiguresAccount.shape[0] > 0 : 
  leads	= mainFiguresAccount['leads'].tolist()[0]
  impressions	= mainFiguresAccount['impressions'].tolist()[0]
  total_lead_value_incltaxes	= f"{mainFiguresAccount['total_lead_value_incltaxes'].tolist()[0]:.2f} " + currencyName
  leadUnitValue	= f"{mainFiguresAccount['leadUnitValue'].tolist()[0]:.2f} " + currencyName
  impressionUnitValue	= f"{mainFiguresAccount['impressionUnitValue'].tolist()[0]:.2f} " + currencyName
  leadConversionRate	= f"{mainFiguresAccount['leadConversionRate'].tolist()[0]*100:.2f} %"
  utmSourceCompletionRate	= f"{mainFiguresAccount['utmSourceCompletionRate'].tolist()[0]*100:.2f} %"
  utmMediumCompletionRate	= f"{mainFiguresAccount['utmMediumCompletionRate'].tolist()[0]*100:.2f} %"
  utmCampaignCompletionRate= f"{mainFiguresAccount['utmCampaignCompletionRate'].tolist()[0]*100:.2f} %"

  
html_template = '<h2 id="figures">I. FIGURES</h2><h3 id="figures1" >1. Main account figures</h3><table><tr><td style="font-weight: bold">Leads</td><td style="font-weight: bold">Impressions</td><td style="font-weight: bold">Lead Value '+currencyName+'</td><td style="font-weight: bold">Lead UV '+currencyName+'</td><td style="font-weight: bold">Imp UV '+currencyName+'</td><td style="font-weight: bold">LCR</td><td style="font-weight: bold">UTMSCR</td><td style="font-weight: bold">UTMMCR</td><td style="font-weight: bold">UTMCCR</td></tr><tr><td>'+str(leads)+'</td><td>'+str(impressions)+'</td><td>'+total_lead_value_incltaxes+'</td><td>'+leadUnitValue+'</td><td>'+impressionUnitValue+'</td><td>'+leadConversionRate+'</td><td>'+utmSourceCompletionRate+'</td><td>'+utmMediumCompletionRate+'</td><td>'+utmCampaignCompletionRate+'</td></tr></table><p>UV : unit value</p><p>LCR : lead conversion rate (leads/impressions)</p><p>UTMSCR : UTM Source completion rate (sessions with UTM Source filled/sessions)</p><p>UTMMCR : UTM Medium completion rate (sessions with UTM Medium filled/sessions)</p><p>UTMCCR : UTM Campaign completion rate (sessions with UTM Campaign filled/sessions)</p>'
f.write(html_template) 
  
f.close()

"""#### <font size='2px' color='#606060'>**2. Growth rates account**</font>"""

f = open('recommendations.html', 'a') 

growthRates = growthRatesAccount(analysisAccount)
if growthRates.shape[0] > 0 : 
  title = "2. Growth rates account (comparison period : {} to {})".format(comparisonDate1,comparisonDate2)
  leadsGrowthRate	= f"{growthRates['leadsGrowthRate'].tolist()[0]:.2f} %"
  impressionsGrowthRate	= f"{growthRates['impressionsGrowthRate'].tolist()[0]:.2f} %"
  leadRevenueGrowthRate	= f"{growthRates['leadRevenueGrowthRate'].tolist()[0]:.2f} %"
  leadUnitValueGrowthRate	= f"{growthRates['leadUnitValueGrowthRate'].tolist()[0]:.2f} %"
  impressionUnitValueGrowthRate	= f"{growthRates['impressionUnitValueGrowthRate'].tolist()[0]:.2f} %"
  leadConversionRateGrowthRate	= f"{growthRates['leadConversionRateGrowthRate'].tolist()[0]:.2f} %"

  f.write('<h3 id="figures2">'+title+'</h3>') 
    
  html_template = '<table><tr><td style="font-weight: bold">Leads GR</td><td style="font-weight: bold">Impressions GR</td><td style="font-weight: bold">Lead Value '+currencyName+' GR</td><td style="font-weight: bold">Lead UV '+currencyName+' GR</td><td style="font-weight: bold">Imp UV '+currencyName+' GR</td><td style="font-weight: bold">LCR GR</td></tr><tr><td>'+leadsGrowthRate+'</td><td>'+impressionsGrowthRate+'</td><td>'+leadRevenueGrowthRate+'</td><td>'+leadUnitValueGrowthRate+'</td><td>'+impressionUnitValueGrowthRate+'</td><td>'+leadConversionRateGrowthRate+'</td></tr></table>'
  f.write(html_template) 
  
f.close()

"""#### <font size='2px' color='#606060'>**3. Main PoPs figures**</font>"""

f = open('recommendations.html', 'a') 

title = "3. Main PoPs figures"

f.write('<h3 id="figures3">'+title+'</h3>')

mainFiguresPop = pop(analysisAccount, analysisOperator,analysisCountry, 'N', 'N','all','null','null','N').assign()
if mainFiguresPop.shape[0] > 0 :
  for k in range(mainFiguresPop.shape[0]) : 
    countryPoP	= mainFiguresPop['country'].tolist()[k]
    PoP	= mainFiguresPop['PoP'].tolist()[k]
    txt2 = countryPoP + " | "+PoP+" :"
    f.write('<p>'+txt2+'</p>')
    leads	= mainFiguresPop['leads'].tolist()[k]
    impressions	= mainFiguresPop['impressions'].tolist()[k]
    total_lead_value_incltaxes	= f"{mainFiguresPop['total_lead_value_incltaxes'].tolist()[k]:.2f} " + currencyName
    leadUnitValue	= f"{mainFiguresPop['leadUnitValue'].tolist()[k]:.2f} " + currencyName
    impressionUnitValue	= f"{mainFiguresPop['impressionUnitValue'].tolist()[k]:.2f} " + currencyName
    leadConversionRate	= f"{mainFiguresPop['leadConversionRate'].tolist()[k]*100:.2f} %"
    utmSourceCompletionRate	= f"{mainFiguresPop['utmSourceCompletionRate'].tolist()[k]*100:.2f} %"
    utmMediumCompletionRate	= f"{mainFiguresPop['utmMediumCompletionRate'].tolist()[k]*100:.2f} %"
    utmCampaignCompletionRate= f"{mainFiguresPop['utmCampaignCompletionRate'].tolist()[k]*100:.2f} %"

 
    html_template = '<table><tr><td style="font-weight: bold">Leads</td><td style="font-weight: bold">Impressions</td><td style="font-weight: bold">Lead Value '+currencyName+'</td><td style="font-weight: bold">Lead UV '+currencyName+'</td><td style="font-weight: bold">Imp UV '+currencyName+'</td><td style="font-weight: bold">LCR</td><td style="font-weight: bold">UTMSCR</td><td style="font-weight: bold">UTMMCR</td><td style="font-weight: bold">UTMCCR</td></tr><tr><td>'+str(leads)+'</td><td>'+str(impressions)+'</td><td>'+total_lead_value_incltaxes+'</td><td>'+leadUnitValue+'</td><td>'+impressionUnitValue+'</td><td>'+leadConversionRate+'</td><td>'+utmSourceCompletionRate+'</td><td>'+utmMediumCompletionRate+'</td><td>'+utmCampaignCompletionRate+'</td></tr></table>'
    f.write(html_template) 
  
f.close()

"""#### <font size='2px' color='#606060'>**4.  Growth rates PoPs**</font>"""

f = open('recommendations.html', 'a') 

growthRatesPop = growthRatesPoP(analysisAccount, analysisOperator, analysisCountry).assign()
if growthRatesPop.shape[0] > 0 :
  
  title = "4. Growth rates PoPs (comparison period : {} to {})".format(comparisonDate1,comparisonDate2)

  f.write('<h3 id="figures4">'+title+'</h3>') 
  for k in range(growthRatesPop.shape[0]) : 
    countryPoP	= growthRatesPop['country'].tolist()[k]
    PoP	= growthRatesPop['PoP'].tolist()[k]
    txt2 = countryPoP + " | "+PoP+" :"
    f.write('<p>'+txt2+'</p>')
    leadsGrowthRate	= f"{growthRatesPop['leadsGrowthRate'].tolist()[k]:.2f} %"
    impressionsGrowthRate	= f"{growthRatesPop['impressionsGrowthRate'].tolist()[k]:.2f} %"
    leadRevenueGrowthRate	= f"{growthRatesPop['leadRevenueGrowthRate'].tolist()[k]:.2f} %"
    leadUnitValueGrowthRate	= f"{growthRatesPop['leadUnitValueGrowthRate'].tolist()[k]*100:.2f} %"
    impressionUnitValueGrowthRate	= f"{growthRatesPop['impressionUnitValueGrowthRate'].tolist()[k]:.2f} %"
    leadConversionRateGrowthRate	= f"{growthRatesPop['leadConversionRateGrowthRate'].tolist()[k]:.2f} %"

    html_template = '<table><tr><td style="font-weight: bold">Leads GR</td><td style="font-weight: bold">Impressions GR</td><td style="font-weight: bold">Lead Value '+currencyName+' GR</td><td style="font-weight: bold">Lead UV '+currencyName+' GR</td><td style="font-weight: bold">Imp UV '+currencyName+' GR</td><td style="font-weight: bold">LCR GR</td></tr><tr><td>'+leadsGrowthRate+'</td><td>'+impressionsGrowthRate+'</td><td>'+leadRevenueGrowthRate+'</td><td>'+leadUnitValueGrowthRate+'</td><td>'+impressionUnitValueGrowthRate+'</td><td>'+leadConversionRateGrowthRate+'</td></tr></table>'
    f.write(html_template) 
  
f.close()

"""### <font size='3px' color='#007FFF'>II. ANALYSIS</font>

#### <font size='2px' color='#606060'>**1. Countries**</font>

##### <font size='2px' color='#606060'>**a. TOP countries by account**</font>
"""

f = open('recommendations.html', 'a') 

f.write('<h2 id="analysis">II. ANALYSIS</h2><h3 id="countries">1. Countries</h3><h4 id="countries1">a. TOP countries by account</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(topCountries(), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>On this graph the size of a round corresponds to the sale value in GBP.</p><p>If countries appear in legend but not on the graph, the sale value is 0.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p style="padding-bottom:10px">No filters are needed.</p>')


  
f.close()

"""#### <font size='2px' color='#606060'>**2. Lead conversion rate**</font>

##### <font size='2px' color='#606060'>**a. TOP PoP by Account, Operator AND/OR Country**</font>
"""

f = open('recommendations.html', 'a') 

period = "{} to {}".format(benchmarkDate1,benchmarkDate2)

f.write('<h3 id="LCR">2. Lead conversion rate</h3><h4 id="LCR1">a. TOP PoP by Account, Operator AND/OR Country</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(topPoPLCR(analysisByOperatorLCR1, analysisByCountryLCR1, analysisTouchpointTypeLCR1), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>Threshold calculation period : '+period+'</p><p>The metric measured is the lead conversion rate, which corresponds to the leads/impressions ratio.</p><p>On this graph the size of a round corresponds to the lead value in GBP.</p><p>The red line represents the lead conversion rate threshold for the given PoP type.</p><p>If PoPs appear in legend but not on the graph, the lead value is 0.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p>For this graph it is mandatory to give a PoP type.</p><p style="padding-bottom:10px">You can add a filter on operators and/or countries.</p>')

  
f.close()

"""##### <font size='2px' color='#606060'>**b. Lead conversion rate by source by PoP**</font>"""

f = open('recommendations.html', 'a') 

period = "{} to {}".format(benchmarkDate1,benchmarkDate2)

f.write('<h4 id="LCR2">b. Lead conversion rate by source by PoP</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(sourceUTMPop(analysisUtmTypeLCR3, analysisByPopLCR3, analysisByCountryLCR3, 'N','Y'), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>Threshold calculation period : '+period+'</p><p>The metric measured is the lead conversion rate, which corresponds to the leads/impressions ratio.</p><p>On this graph the size of a round corresponds to the number of instances.</p><p>The red line represents the lead conversion rate threshold for the given PoP type.</p><p>If sources appear in legend but not on the graph, it has 0 instances.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p>For this graph it is mandatory to give a PoP AND a UTM type (source, medium or campaign).</p><p style="padding-bottom:10px">You can add a filter on countries.</p>')

  
f.close()

"""#### <font size='2px' color='#606060'>**3. UTM completion rate**</font>

##### <font size='2px' color='#606060'>**a. TOP PoP by Account, Operator AND/OR Country**</font>
"""

utmCompletionRateDef(analysisByOperatorUTM1, analysisByCountryUTM1, analysisUtmTypeUTM1, analysisTouchpointTypeUTM1, analysisAccount, analysisOperator, analysisCountry)
f = open('recommendations.html', 'a') 

period = "{} to {}".format(benchmarkDate1,benchmarkDate2)

f.write('<h3 id="UTMCR">3. UTM completion rate</h3><h4 id="UTMCR1">a. TOP PoP by Account, Operator AND/OR Country</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(utmCompletionRateDef(analysisByOperatorUTM1, analysisByCountryUTM1, analysisUtmTypeUTM1, analysisTouchpointTypeUTM1, analysisAccount, analysisOperator, analysisCountry), include_plotlyjs=False, output_type="div")+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>Threshold calculation period : '+period+'</p><p>The metric measured is the UTM completion rate, which corresponds to the sessions with utm filled/sessions ratio.</p><p>On this graph the size of a round corresponds to the lead value in GBP.</p><p>The red line represents the UTM completion rate threshold for the given PoP type and UTM type.</p><p>If PoPs appear in legend but not on the graph, the lead value is 0.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p>For this graph it is mandatory to give a PoP type AND a UTM type (source, medium or campaign).</p><p style="padding-bottom:10px">You can add a filter on operators and/or countries.</p>')

  
f.close()

"""#### <font size='2px' color='#606060'>**4. Products**</font>

##### <font size='2px' color='#606060'>**a. Average price of products**</font>
"""

f = open('recommendations.html', 'a') 


f.write('<h3 id="products">4. Products</h3><h4 id="products1">a. Average price of products</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(meanPriceProduct(), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>The metric measured is the average price of products where there is a lead.</p><p>On this graph all rounds are the same size, this does not provide any information.</p><p>The red line represents the average price of products for the entire account being analysed.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p style="padding-bottom:10px">No filters are needed.</p>')

  
f.close()

"""##### <font size='2px' color='#606060'>**b. TOP Products by Account, Operator, Country OR/AND PoP**</font>"""

f = open('recommendations.html', 'a') 


f.write('<h4 id="products2">b. TOP Products by Account, Operator, Country OR/AND PoP</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(analysisProductMinItemQty(analysisByPopP1, analysisByOperatorP1, analysisByCountryP1), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>The metric measured is the number of minimum item quantity.</p><p>On this graph the size of a round corresponds to the price of the product in GBP.</p><p>The red line represents the average of minimum item quantity for a product of the account being analysed.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p style="padding-bottom:10px">You can add a filter on operators, PoPs and/or countries.</p>')

  
f.close()

"""#### <font size='2px' color='#606060'>**5. Retailers**</font>

##### <font size='2px' color='#606060'>**a. Sales conversion rate by leads**</font>
"""

f = open('recommendations.html', 'a') 

f.write('<h3 id="retailers">5. Retailers</h3><h4 id="retailers1">a. Sales conversion rate by leads</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(retailersSales(False,False,analysisByPoPR1), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>The metric measured is the sales conversion rate, which corresponds to the sale value*coefficient TTB max/lead value ratio.</p><p>On this graph the size of a round corresponds to the sale value in GBP.</p><p>The red line represents the sales conversion rate threshold for the retailers of the account being analysed.</p><p>The blue line represents the leads threshold for the retailers of the account being analysed.</p><p>If retailers appear in legend but not on the graph, the sale value is 0.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p style="padding-bottom:10px">No filters are needed.</p>')

  
f.close()

"""##### <font size='2px' color='#606060'>**b. Sales conversion rate by AVG lead value**</font>"""

f = open('recommendations.html', 'a') 

f.write('<h4 id="retailers2">b. Sales conversion rate by AVG lead value</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(retailersSalesAVGLeadValue(False,False,analysisByPoPR2), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Description : </p><p>The metric measured is the sales conversion rate, which corresponds to the sale value*coefficient TTB max/lead value ratio.</p><p>On this graph the size of a round corresponds to the sale value in GBP.</p><p>The red line represents the sales conversion rate threshold for the retailers of the account being analysed.</p><p>The blue line represents the AVG lead value threshold for the retailers of the account being analysed.</p><p>If retailers appear in legend but not on the graph, the sale value is 0.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p style="padding-bottom:10px">No filters are needed.</p>')

  
f.close()

"""#### <font size='2px' color='#606060'>**6. Sankeys**</font>

##### <font size='2px' color='#606060'>**a. Sankey : UTM > PoP > Products > Retailers > Minimum item quantity**</font>
"""

f = open('recommendations.html', 'a') 

f.write('<h3 id="sankeys">6. Sankeys</h3><h4 id="sankey1">a. Sankey : UTM > PoP > Products > Retailers > Minimum item quantity</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(sankeyUtmSource1(False,retailersSales(True, False,analysisPopSankeyS1),analysisUtmTypeS1, analysisPopSankeyS1, analysisByCountryS1, analysisProductS1), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Filters in addition to the file "Account_Filters" : </p><p>For this graph it is mandatory to give a UTM type (source, medium or campaign), a PoP AND a product.</p><p style="padding-bottom:10px">You can add a filter on countries.</p>')

  
f.close()

"""##### <font size='2px' color='#606060'>**b. Sankey : UTM > PoP > Products > Retailers > Sale Value**</font>"""

f = open('recommendations.html', 'a') 

f.write('<h4 id="sankey2">b. Sankey : UTM > PoP > Products > Retailers > Sale Value ('+currencyName+')</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(sankeyUtmSource2(False,retailersSales(True, False,analysisPopSankeyS2),analysisUtmTypeS2, analysisPopSankeyS2, analysisByCountryS2, analysisProductS2), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Filters in addition to the file "Account_Filters" : </p><p>For this graph it is mandatory to give a UTM type (source, medium or campaign), a PoP AND a product.</p><p style="padding-bottom:10px">You can add a filter on countries.</p>')

  
f.close()

"""##### <font size='2px' color='#606060'>**c. Sankey : UTM > Countries > Retailers > minimum_item_qty**</font>"""

f = open('recommendations.html', 'a') 

f.write('<h4 id="sankey3">c. Sankey : UTM > Countries > Retailers > minimum_item_qty</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(sankeyUtmSource3(False, retailersSales(True, False,analysisByPoPS3), analysisUtmTypeS3, analysisAccount, analysisOperator, analysisCountry, analysisByPoPS3), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Filters in addition to the file "Account_Filters" : </p><p style="padding-bottom:10px">For this graph it is mandatory to give a UTM type (source, medium or campaign), a PoP AND a product.</p>')

  
f.close()

"""##### <font size='2px' color='#606060'>**d. Sankey : UTM > Countries > Retailers > Product's origin**</font>"""

f = open('recommendations.html', 'a') 

f.write("<h4 id='sankey4'>d. Sankey : UTM > Countries > Retailers > Product's origin</h4>") 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(sankeyUtmSource4(False, retailersSales(True, False,analysisByPopS4), analysisUtmTypeS4, analysisAccount, analysisOperator, analysisCountry,analysisByPopS4), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Filters in addition to the file "Account_Filters" : </p><p style="padding-bottom:10px">For this graph it is mandatory to give a UTM type (source, medium or campaign), a PoP AND a product.</p>')

  
f.close()

"""##### <font size='2px' color='#606060'>**e. Sankey : UTM > Retailers > Has sale**</font>"""

f = open('recommendations.html', 'a') 

f.write('<h4 id="sankey5">e. Sankey : UTM > Retailers > Has sale</h4>') 
f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(sankeyUtmSource5(False, retailersSales(True, False,analysisByPoPS5), analysisUtmTypeS5, analysisAccount, analysisOperator, analysisCountry,analysisByPoPS5), include_plotlyjs=False, output_type='div')+'</p>') 
f.write('<p style="font-weight: bold">Filters in addition to the file "Account_Filters" : </p><p style="padding-bottom:10px">For this graph it is mandatory to give a UTM type (source, medium or campaign), a PoP AND a product.</p>')

  
f.close()

"""#### <font size='2px' color='#606060'>**7. Competitors**</font>

##### <font size='2px' color='#606060'>**a. Comparison of lead conversion rate with competitors**</font>
"""

if competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0] : 

  f = open('recommendations.html', 'a') 
  period = "{} to {}".format(benchmarkDate1,benchmarkDate2)
  f.write("<h3 id='competitors'>7. Competitors</h3><h4 id='competitors1'>a. Comparison of lead conversion rate with competitors</h4>") 
  f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(competitiorComparisonLeadConversionRate(analysisTouchpointTypeC1, analysisAccount, analysisOperator, analysisCountry, competitorsAccount, competitorsOperator, competitorsCountry), include_plotlyjs=False, output_type='div')+'</p>') 
  f.write('<p style="font-weight: bold">Description : </p><p>Period : '+period+'</p><p>The metric measured is the lead conversion rate, which corresponds to the leads/impressions ratio.</p><p>On this graph the size of a round corresponds to the lead value in '+currencyName+'.</p><p>The red line represents the lead conversion rate threshold for the given PoP type, only for the account being analysed and its competitors.</p><p>If PoPs do not appear on the graph, the lead value is 0.</p><p>Competitors are added with the "Account_Filters" file.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p style="padding-bottom:10px">For this graph it is mandatory to give a PoP type.</p>')

    
  f.close()

"""##### <font size='2px' color='#606060'>**b. Comparison of UTM completion rate with competitors**</font>"""

if competitorsAllAccount.shape[0] > pop(analysisAccount, analysisOperator, analysisCountry,'N', 'N','all','null','null','O').shape[0] : 

  f = open('recommendations.html', 'a') 

  period = "{} to {}".format(benchmarkDate1,benchmarkDate2)

  f.write("<h4 id='competitors2'>b. Comparison of UTM completion rate with competitors</h4>") 
  f.write('<p><script src="https://cdn.plot.ly/plotly-latest.min.js"></script> '+offline.plot(competitiorComparisonUtmCompletionRate(analysisUtmTypeC2, analysisTouchpointTypeC2, analysisAccount, analysisOperator, analysisCountry, competitorsAccount, competitorsOperator, competitorsCountry), include_plotlyjs=False, output_type='div')+'</p>') 
  f.write('<p style="font-weight: bold">Description : </p><p>Period : '+period+'</p><p>The metric measured is the UTM completion rate, which corresponds to the sessions with utm filled/sessions ratio.</p><p>On this graph the size of a round corresponds to the lead value in '+currencyName+'.</p><p>The red line represents the UTM completion rate threshold for the given PoP type and UTM type, only for the account being analysed and its competitors.</p><p>If PoPs do not appear on the graph, the lead value is 0.</p><p>Competitors are added with the "Account_Filters" file.</p><p style="font-weight: bold">Filters in addition to the file "Account_Filters" :</p><p style="padding-bottom:10px">For this graph it is mandatory to give a PoP type AND a UTM type (source, medium or campaign).</p>')

    
  f.close()

"""### <font size='3px' color='#007FFF'>III. RECOMMENDATIONS</font>

#### <font size='2px' color='#606060'>**1. Lead conversion rate by type of PoP**</font>
"""

def listAlphabet():
  return list(map(chr, range(97, 123)))

if analysisTouchpointTypeLCR1 != 'all' : 
  f = open('recommendations.html', 'a') 
  f.write("<h2 id='reco'>III. RECOMMENDATIONS</h2><h3 id='reco1'>1. Lead conversion rate by type of PoP</h3><p style='font-weight: bold'>The PoPs below have a lead conversion rate under the minimum threshold they should have. Action is needed to improve these rates.</p>") 

  touchpoint = ['ST','IP','LP','DP']
  utm = ['source','medium','campaign']

  cpt = 0
  for i in touchpoint : 
    threshold = thresholdLeadConversionRateByPop(i)*100
    popLeadConversionRate = popUnderThresholdLeadConversionRate(i).assign()
    if popLeadConversionRate.shape[0] > 0 : 
      letter = listAlphabet()[cpt]
      f.write("<h4>"+letter+". For "+i+" PoPs, the threshold is " + f"{threshold:.2f}" + "%</h4>") 
      for k in range(popLeadConversionRate.shape[0]) :
        PoP = popLeadConversionRate['PoP'].tolist()[k]
        lead = popLeadConversionRate['leads'].tolist()[k]
        leadConversionRate = popLeadConversionRate['leadConversionRate'].tolist()[k]
        if lead == 1 : 
          f.write("<p  style='font-weight:bold'>"+PoP + " : "+ f"{leadConversionRate:.2f}" + "%  ("+ str(lead) + " lead)</p>") 
        else : 
          f.write("<p style='font-weight: bold' >"+PoP + " : "+ f"{leadConversionRate:.2f}" + "%  ("+ str(lead) + " leads)</p>") 
    
        # Lead conversion rate by UTM
        popSplit = PoP.split(" | ")
        caseSource = []
        caseMedium = []
        caseCampaign = []
        cptS = 0 
        for j in utm : 
          utmName = "s_utm_"+j
          sourceUtm = sourceUTMPop(j, popSplit[1], popSplit[0],'Y','N').assign()
          for l in range(len(sourceUtm)) : 
            s_utm = sourceUtm[utmName].tolist()[l]
            s_utmInstances = sourceUtm["impressions"].tolist()[l]
            s_utmLeadConv = sourceUtm["leadConversionRate"].tolist()[l]
            if type(sourceUtm["leadConversionRate"].tolist()[l]) == str :
              txt = s_utm + " : "+ s_utmLeadConv + "%  ("+ str(s_utmInstances) + " impressions)"
            else :
              txt = s_utm + " : "+ f"{s_utmLeadConv:.2f}" + "%  ("+ str(s_utmInstances) + " impressions)"
            if j == "source" : 
              caseSource.append(txt) 
            elif j == "medium" : 
              caseMedium.append(txt) 
            elif j == "campaign" : 
              caseCampaign.append(txt) 

        lenCase = [len(caseSource),len(caseMedium),len(caseCampaign)]
        allCase = [caseSource,caseMedium,caseCampaign]
        maxCase = max(lenCase)
        for caseS in allCase : 
          if len(caseS) < maxCase : 
            diff = maxCase - len(caseS)
            for z in range(diff) : 
              caseS.append("null")
        f.write('<table><tr><td style="font-weight: bold">UTM source</td><td style="font-weight: bold">UTM medium</td><td style="font-weight: bold">UTM campaign</td></tr>')
        for m in range(0,maxCase) :
          html_template = '<tr><td>'+caseSource[m]+'</td><td>'+caseMedium[m]+'</td><td>'+caseCampaign[m]+'</td></tr>'
          f.write(html_template)
        f.write('</table>')
        f.write("<p>Corrections if the lead conversion rate is equal to the threshold :</p>")

        # Corrections
        correctionLCR = correction(popUnderThresholdLeadConversionRate(i), i).assign()

        leads	= str(correctionLCR["leads"].tolist()[k])
        leadsCorrection	= str(round(correctionLCR["leadsCorrection"].tolist()[k]))
        leadsGrowth	= correctionLCR["leadsGrowth"].tolist()[k]
        total_lead_value_incltaxes	= correctionLCR["total_lead_value_incltaxes"].tolist()[k]
        total_lead_value_incltaxesCorrection	= correctionLCR["total_lead_value_incltaxesCorrection"].tolist()[k]
        total_lead_value_incltaxesGrowth	= correctionLCR["total_lead_value_incltaxesGrowth"].tolist()[k]
        leadConversionRate	= correctionLCR["leadConversionRate"].tolist()[k]
        leadConversionRateCorrection	= correctionLCR["leadConversionRateCorrection"].tolist()[k]
        leadConversionRateGrowth = correctionLCR["leadConversionRateGrowth"].tolist()[k]
        leadsGrowth	= "+ "+f"{leadsGrowth:.0f}"
        total_lead_value_incltaxes	= f"{total_lead_value_incltaxes:.2f} "+ currencyName
        total_lead_value_incltaxesCorrection	= f"{total_lead_value_incltaxesCorrection:.2f} "+currencyName
        total_lead_value_incltaxesGrowth	= "+ "+f"{total_lead_value_incltaxesGrowth:.2f} "+currencyName
        leadConversionRate	= f"{leadConversionRate:.2f}"+"%"
        leadConversionRateCorrection	= f"{leadConversionRateCorrection:.2f}"+"%"
        leadConversionRateGrowth = "+ "+f"{leadConversionRateGrowth:.2f}"+"%"

        html_template = '<table style="padding-bottom:20px;"><tr><td style="font-weight: bold">Leads</td><td style="font-weight: bold">Leads correction</td><td style="font-weight: bold">Leads growth</td><td style="font-weight: bold">LV</td><td style="font-weight: bold">LV correction</td><td style="font-weight: bold">LV growth</td><td style="font-weight: bold">LCR</td><td style="font-weight: bold">LCR correction</td><td style="font-weight: bold">LCR growth</td></tr><tr><td>'+leads+'</td><td>'+leadsCorrection+'</td><td>'+leadsGrowth+'</td><td>'+total_lead_value_incltaxes+'</td><td>'+total_lead_value_incltaxesCorrection+'</td><td>'+total_lead_value_incltaxesGrowth+'</td><td>'+leadConversionRate+'</td><td>'+leadConversionRateCorrection+'</td><td>'+leadConversionRateGrowth+'</td></tr></table>'
        f.write(html_template)

        del correctionLCR
      cpt = cpt+1

    if (i == 'ST')&(popLeadConversionRate.shape[0] == 0) : 
      f.write("<p>There is no underperforming PoP.</p>")
    del popLeadConversionRate
    
  f.close()

"""#### <font size='2px' color='#606060'>**2. UTM completion rate by type of PoP and type of UTM**</font>"""

if analysisTouchpointTypeUTM1 != 'all' : 
  f = open('recommendations.html', 'a') 
  f.write("<h3 id='reco2'>2. UTM completion rate by type of PoP and type of UTM</h3>") 

  newListTouchpoint = ['ST','IP','LP','DP','DL']
  utm = ['source','medium','campaign']

  cpt = 0
  for i in newListTouchpoint : 
    cptbis = 1
    for j in utm : 
        threshold = thresholdUtmCompletionRateByPop(i, j)*100
        popUtmCompletionRate = popUnderThresholdUtmCompletionRate(i, j, analysisAccount, analysisOperator, analysisCountry).assign()
        if popUtmCompletionRate.shape[0] > 0 : 
          if cptbis == 1 : 
            letter = listAlphabet()[cpt]
            f.write("<h4>"+letter+". "+i+" PoPs</h4>") 
          f.write("<p style='font-weight: bold;'>UTM "+j.upper()+ " completion rate threshold is " + f"{threshold:.2f}" + "%</p>") 
          for k in range(popUtmCompletionRate.shape[0]) : 
            PoP = popUtmCompletionRate['PoP'].tolist()[k]
            lead = popUtmCompletionRate['leads'].tolist()[k]
            a = "utm"+j.capitalize()+"CompletionRate"
            utmCompletionRate = popUtmCompletionRate[a].tolist()[k]
            if lead == 1 : 
              f.write("<p>"+PoP + " : "+ f"{utmCompletionRate:.2f}" + "%  ("+ str(lead) + " lead)") 
            else : 
              f.write("<p>"+PoP + " : "+ f"{utmCompletionRate:.2f}" + "%  ("+ str(lead) + " leads)") 
        cptbis = cptbis+1    
    if popUtmCompletionRate.shape[0] > 0  :
      cpt = cpt+1
    
  f.close()

"""#### <font size='2px' color='#606060'>**3. Sales conversion rate by retailer**</font>"""

f = open('recommendations.html', 'a')

if analysisTouchpointTypeLCR2 != 'all' : 
  f.write("<h3 id='reco3'>3. Sales conversion rate by retailer</h3><p style='font-weight: bold'>Retailers below have a sales conversion rate and number of leads under the minimum thresholds they should have.</p>") 
else : 
  f.write("<h3 id='reco3'>1. Sales conversion rate by retailer</h3><p style='font-weight: bold'>Retailers below have a sales conversion rate and number of leads under the minimum thresholds they should have.</p>") 


retailerSCR = retailersSales(False,True,analysisByPoPR1)
if retailerSCR.shape[0] > 0 : 
  thresholdSCR = retailerSCR['thresholdSCR'].tolist()[0]
  thresholdLead = str(round(retailerSCR['thresholdLead'].tolist()[0]))
  f.write("<p style='font-weight: bold'>Sales conversion rate threshold : "+f"{thresholdSCR:.2f}"+ "% ; Leads threshold : "+thresholdLead + " leads</p>") 
  if retailerSCR.shape[0] > 0 :
    for i in range (retailerSCR.shape[0]) : 
      retailer = retailerSCR['retailer'].tolist()[i]
      leads = round(retailerSCR['leads'].tolist()[i])
      SalesConversionRate = retailerSCR['SalesConversionRate'].tolist()[i]
      f.write("<p>"+retailer +  " : "+  f"{SalesConversionRate:.2f}" + "%  ("+ str(leads) + " leads)</p>") 
else : 
  f.write("<p>There is no underperforming retailer.</p>") 

f.close() 

files.download('recommendations.html')

"""## <font size='4px' color='#0066CC'>**PDF Format**</font>"""

# If we can download the graphs in png, it works

a = 0
def listAlphabet():
  return list(map(chr, range(97, 123)))


def pdfResult(account, operator, country) : 

  pdf = FPDF()
  pdf.add_page()
  pdf.set_font("Arial", "B", size = 13)

  # Title 1
  if (operator != "null") & (country == "null") : 
    pdf.cell(200, 10, txt = "{} - {} Analysis".format(account,operator),
        ln = 1, align = 'C') 
  elif (operator != "null") & (country != "null") : 
    pdf.cell(200, 10, txt = "{} - {} - {} Analysis".format(account,operator,country),
        ln = 1, align = 'C')  
  elif (operator == "null") & (country != "null") : 
    pdf.cell(200, 10, txt = "{} - {} Analysis".format(account,country),
        ln = 1, align = 'C')
  elif (operator == "null") & (country == "null") : 
    pdf.cell(200, 10, txt = "{} Analysis".format(account),
        ln = 1, align = 'C')
  pdf.set_font("Arial", "I",size = 9)
  pdf.cell(200, 10, txt = "Period : {} to {}".format(analysisDate1,analysisDate2),
        ln = 1, align = 'C') 

  ########################################## FIGURES ##########################################

  pdf.set_font("Arial", "B",size = 12)
  pdf.set_text_color(0,69,138)
  pdf.cell(200, 10, txt = "I. FIGURES",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)

  ############## Main Account Figures ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "1. Main account figures",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",'B',size = 7)
  mainFiguresAccount = mainFigures(account, operator, country, 'N', 'N').assign()
  if mainFiguresAccount.shape[0] > 0 : 
    pdf.cell(21.1, 6, "Leads" ,1, 0, 'C')
    pdf.cell(21.1, 6, "Impressions" ,1, 0, 'C')
    pdf.cell(21.1, 6, "Lead value {}".format(currencyName) ,1, 0, 'C')
    pdf.cell(21.1, 6, "Lead UV {}".format(currencyName)  ,1, 0, 'C')
    pdf.cell(21.1, 6, "Imp UV {}".format(currencyName)  ,1, 0, 'C')
    pdf.cell(21.1, 6, "LCR" ,1, 0, 'C')
    pdf.cell(21.1, 6, "UTMSCR" ,1, 0, 'C')
    pdf.cell(21.1, 6, "UTMMCR" ,1, 0, 'C')
    pdf.cell(21.1, 6, "UTMCCR" ,1, 1, 'C')
    leads	= mainFiguresAccount['leads'].tolist()[0]
    impressions	= mainFiguresAccount['impressions'].tolist()[0]
    total_lead_value_incltaxes	= f"{mainFiguresAccount['total_lead_value_incltaxes'].tolist()[0]:.2f} " + currencyName
    leadUnitValue	= f"{mainFiguresAccount['leadUnitValue'].tolist()[0]:.2f} " + currencyName
    impressionUnitValue	= f"{mainFiguresAccount['impressionUnitValue'].tolist()[0]:.2f} " + currencyName
    leadConversionRate	= f"{mainFiguresAccount['leadConversionRate'].tolist()[0]*100:.2f} %"
    utmSourceCompletionRate	= f"{mainFiguresAccount['utmSourceCompletionRate'].tolist()[0]*100:.2f} %"
    utmMediumCompletionRate	= f"{mainFiguresAccount['utmMediumCompletionRate'].tolist()[0]*100:.2f} %"
    utmCampaignCompletionRate= f"{mainFiguresAccount['utmCampaignCompletionRate'].tolist()[0]*100:.2f} %"
    pdf.set_font("Arial",size = 6)
    pdf.cell(21.1, 6, str(leads) ,1, 0, 'C')
    pdf.cell(21.1, 6, str(impressions) ,1, 0, 'C')
    pdf.cell(21.1, 6,total_lead_value_incltaxes,1, 0, 'C')
    pdf.cell(21.1, 6, leadUnitValue ,1, 0, 'C')
    pdf.cell(21.1, 6, impressionUnitValue ,1, 0, 'C')
    pdf.cell(21.1, 6, leadConversionRate ,1, 0, 'C')
    pdf.cell(21.1, 6, utmSourceCompletionRate ,1, 0, 'C')
    pdf.cell(21.1, 6, utmMediumCompletionRate ,1, 0, 'C')
    pdf.cell(21.1, 6, utmCampaignCompletionRate ,1, 1, 'C')
    pdf.cell(50, 5, " ", 0, 1, 'C')
    pdf.set_font("Arial",size = 5)
    pdf.cell(200, 3, txt = "UV : unit value",ln = 1, align = 'L')
    pdf.cell(200, 3, txt = "LCR : lead conversion rate (leads/impressions)",ln = 1, align = 'L')
    pdf.cell(200, 3, txt = "UTMSCR : UTM Source completion rate (sessions with UTM Source filled/sessions)",ln = 1, align = 'L')
    pdf.cell(200, 3, txt = "UTMMCR : UTM Medium completion rate (sessions with UTM Medium filled/sessions)",ln = 1, align = 'L')
    pdf.cell(200, 3, txt = "UTMCCR : UTM Campaign completion rate (sessions with UTM Campaign filled/sessions)",ln = 1, align = 'L')
    pdf.cell(50, 5, " ", 0, 1, 'C')

  ############## Growth Rates Account ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  txtGR = "2. Growth rates account (comparison period : {} to {})".format(comparisonDate1,comparisonDate2)
  pdf.cell(200, 10, txt = txtGR ,ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",'B',size = 7)
  growthRates = growthRatesAccount(account, operator, country).assign()
  if growthRates.shape[0] > 0 : 
    pdf.cell(25, 6, "Leads GR" ,1, 0, 'C')
    pdf.cell(25, 6, "Impressions GR" ,1, 0, 'C')
    pdf.cell(25, 6, "Lead value {} GR".format(currencyName)  ,1, 0, 'C')
    pdf.cell(25, 6, "Lead UV {} GR".format(currencyName) ,1, 0, 'C')
    pdf.cell(25, 6, "Imp UV {} GR".format(currencyName) ,1, 0, 'C')
    pdf.cell(25, 6, "LCR GR" ,1, 1, 'C')
    leadsGrowthRate	= f"{growthRates['leadsGrowthRate'].tolist()[0]*100:.2f} %"
    impressionsGrowthRate	= f"{growthRates['impressionsGrowthRate'].tolist()[0]*100:.2f} %"
    leadRevenueGrowthRate	= f"{growthRates['leadRevenueGrowthRate'].tolist()[0]*100:.2f} %"
    leadUnitValueGrowthRate	= f"{growthRates['leadUnitValueGrowthRate'].tolist()[0]*100:.2f} %"
    impressionUnitValueGrowthRate	= f"{growthRates['impressionUnitValueGrowthRate'].tolist()[0]*100:.2f} %"
    leadConversionRateGrowthRate	= f"{growthRates['leadConversionRateGrowthRate'].tolist()[0]*100:.2f} %"
    pdf.set_font("Arial",size = 6)
    pdf.cell(25, 6, leadsGrowthRate ,1, 0, 'C')
    pdf.cell(25, 6, impressionsGrowthRate ,1, 0, 'C')
    pdf.cell(25, 6,leadRevenueGrowthRate,1, 0, 'C')
    pdf.cell(25, 6, leadUnitValueGrowthRate ,1, 0, 'C')
    pdf.cell(25, 6, impressionUnitValueGrowthRate ,1, 0, 'C')
    pdf.cell(25, 6, leadConversionRateGrowthRate ,1, 1, 'C')
    pdf.cell(50, 5, " ", 0, 1, 'C')
  else : 
    pdf.cell(200, 10, txt = "Can't compare.",ln = 1, align = 'L')

  ############## Main PoPs Figures ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "3. Main PoPs figures",ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  mainFiguresPop = pop(account, operator,country, 'N', 'N','all','null','null','N').assign()
  if mainFiguresPop.shape[0] > 0 :
    for k in range(mainFiguresPop.shape[0]) : 
      countryPoP	= mainFiguresPop['country'].tolist()[k]
      PoP	= mainFiguresPop['PoP'].tolist()[k]
      pdf.set_font("Arial",size = 7)
      txt2 = countryPoP + " | "+PoP+" :"
      pdf.cell(200, 10, txt = txt2 ,ln = 1, align = 'L')
      pdf.set_font("Arial","B",size = 7)
      pdf.cell(21.1, 6, "Leads" ,1, 0, 'C')
      pdf.cell(21.1, 6, "Impressions" ,1, 0, 'C')
      pdf.cell(21.1, 6, "Lead value {}".format(currencyName),1, 0, 'C')
      pdf.cell(21.1, 6, "Lead UV {}".format(currencyName) ,1, 0, 'C')
      pdf.cell(21.1, 6, "Imp UV {}".format(currencyName) ,1, 0, 'C')
      pdf.cell(21.1, 6, "LCR" ,1, 0, 'C')
      pdf.cell(21.1, 6, "UTMSCR" ,1, 0, 'C')
      pdf.cell(21.1, 6, "UTMMCR" ,1, 0, 'C')
      pdf.cell(21.1, 6, "UTMCCR" ,1, 1, 'C')
      leads	= mainFiguresPop['leads'].tolist()[k]
      impressions	= mainFiguresPop['impressions'].tolist()[k]
      total_lead_value_incltaxes	= f"{mainFiguresPop['total_lead_value_incltaxes'].tolist()[k]:.2f} " + currencyName
      leadUnitValue	= f"{mainFiguresPop['leadUnitValue'].tolist()[k]:.2f} " + currencyName
      impressionUnitValue	= f"{mainFiguresPop['impressionUnitValue'].tolist()[k]:.2f} " + currencyName
      leadConversionRate	= f"{mainFiguresPop['leadConversionRate'].tolist()[k]*100:.2f} %"
      utmSourceCompletionRate	= f"{mainFiguresPop['utmSourceCompletionRate'].tolist()[k]*100:.2f} %"
      utmMediumCompletionRate	= f"{mainFiguresPop['utmMediumCompletionRate'].tolist()[k]*100:.2f} %"
      utmCampaignCompletionRate= f"{mainFiguresPop['utmCampaignCompletionRate'].tolist()[k]*100:.2f} %"
      pdf.set_font("Arial",size = 6)
      pdf.cell(21.1, 6, str(leads) ,1, 0, 'C')
      pdf.cell(21.1, 6, str(impressions) ,1, 0, 'C')
      pdf.cell(21.1, 6,total_lead_value_incltaxes,1, 0, 'C')
      pdf.cell(21.1, 6, leadUnitValue ,1, 0, 'C')
      pdf.cell(21.1, 6, impressionUnitValue ,1, 0, 'C')
      pdf.cell(21.1, 6, leadConversionRate ,1, 0, 'C')
      pdf.cell(21.1, 6, utmSourceCompletionRate ,1, 0, 'C')
      pdf.cell(21.1, 6, utmMediumCompletionRate ,1, 0, 'C')
      pdf.cell(21.1, 6, utmCampaignCompletionRate ,1, 1, 'C')
      pdf.cell(50, 5, " ", 0, 1, 'C')

  # SEULEMENT POUR COTY - HUGO BOSS
  a = 0
  if a == 1 : 
    pdf.set_font("Arial",size = 7)
    pdf.cell(200, 8, "Corrections if the lead conversion rate of the PoP REACH is equal to the lead conversion rate of the PoP TRAFFIC :  ", 0, 1, 'L')

    correctionLCR = correctionHugoBoss()
    pdf.set_font("Arial","B",size = 7)
    pdf.cell(21.1, 6, "Leads" ,1, 0, 'C')
    pdf.cell(21.1, 6, "Leads correction" ,1, 0, 'C')
    pdf.cell(21.1, 6, "Leads growth" ,1, 0, 'C')
    pdf.cell(21.1, 6, "LR" ,1, 0, 'C')
    pdf.cell(21.1, 6, "LR correction" ,1, 0, 'C')
    pdf.cell(21.1, 6, "LR growth" ,1, 0, 'C')
    pdf.cell(21.1, 6, "Min Item Qty" ,1, 0, 'C')
    pdf.cell(21.1, 6, "MIQ correction" ,1, 0, 'C')
    pdf.cell(21.1, 6, "MIQ growth" ,1, 1, 'C')
    leads	= str(correctionLCR["leads"].tolist()[0])
    leadsCorrection	= str(round(correctionLCR["leadsCorrection"].tolist()[0]))
    leadsGrowth	= correctionLCR["leadsGrowth"].tolist()[0]
    total_lead_value_incltaxes	= correctionLCR["total_lead_value_incltaxes"].tolist()[0]
    total_lead_value_incltaxesCorrection	= correctionLCR["total_lead_value_incltaxesCorrection"].tolist()[0]
    total_lead_value_incltaxesGrowth	= correctionLCR["total_lead_value_incltaxesGrowth"].tolist()[0]
    minItemQty = str(round(correctionLCR["minimum_item_qty"].tolist()[0]))
    minItemQtyCorrection = str(round(correctionLCR["minItemQtyCorrection"].tolist()[0]))
    minItemQtyGrowth = correctionLCR["minItemQtyGrowth"].tolist()[0]
    leadConversionRate = correctionLCR["leadConversionRate"].tolist()[0]
    leadConversionRateCorrection = correctionLCR["leadConversionRateCorrection"].tolist()[0]
    leadConversionRateGrowth = correctionLCR["leadConversionRateGrowth"].tolist()[0]
    leadsGrowth	= "+ "+f"{leadsGrowth:.0f}"
    minItemQtyGrowth = "+ "+f"{minItemQtyGrowth:.0f}"
    total_lead_value_incltaxes = f"{total_lead_value_incltaxes:.2f} "+ currencyName
    total_lead_value_incltaxesCorrection = f"{total_lead_value_incltaxesCorrection:.2f} "+currencyName
    total_lead_value_incltaxesGrowth = "+ "+f"{total_lead_value_incltaxesGrowth:.2f} "+currencyName
    leadConversionRate = f"{leadConversionRate:.2f}"+"%"
    leadConversionRateCorrection = f"{leadConversionRateCorrection:.2f}"+"%"
    leadConversionRateGrowth = "+ "+f"{leadConversionRateGrowth:.2f}"+"%"
    pdf.set_font("Arial",size = 6)
    pdf.cell(21.1, 6, leads ,1, 0, 'C')
    pdf.cell(21.1, 6, leadsCorrection ,1, 0, 'C')
    pdf.cell(21.1, 6, leadsGrowth,1, 0, 'C')
    pdf.cell(21.1, 6, total_lead_value_incltaxes ,1, 0, 'C')
    pdf.cell(21.1, 6, total_lead_value_incltaxesCorrection ,1, 0, 'C')
    pdf.cell(21.1, 6, total_lead_value_incltaxesGrowth ,1, 0, 'C')
    pdf.cell(21.1, 6, minItemQty ,1, 0, 'C')
    pdf.cell(21.1, 6, minItemQtyCorrection ,1, 0, 'C')
    pdf.cell(21.1, 6, minItemQtyGrowth,1, 1, 'C')
    pdf.set_font("Arial","B",size = 7)
    pdf.cell(21.1, 6, "LCR" ,1, 0, 'C')
    pdf.cell(21.1, 6, "LCR correction" ,1, 0, 'C')
    pdf.cell(21.1, 6, "LCR growth" ,1, 1, 'C')
    pdf.set_font("Arial",size = 6)
    pdf.cell(21.1, 6, leadConversionRate ,1, 0, 'C')
    pdf.cell(21.1, 6, leadConversionRateCorrection ,1, 0, 'C')
    pdf.cell(21.1, 6, leadConversionRateGrowth ,1, 1, 'C')
    pdf.set_font("Arial",size = 7)
    pdf.cell(50, 5, " ", 0, 1, 'C')
    del correctionLCR

  ############## Growth Rates PoPs ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  txtGRP = "4. Growth rates PoPs (comparison period : "+str(comparisonDate1)+" to "+str(comparisonDate2)+")"
  pdf.cell(200, 10, txt = txtGRP,ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",'B',size = 7)
  growthRatesPop = growthRatesPoP(account, operator, country).assign()
  if growthRatesPop.shape[0] > 0 :
    for k in range(growthRatesPop.shape[0]) : 
      countryPoP	= growthRatesPop['country'].tolist()[k]
      PoP	= growthRatesPop['PoP'].tolist()[k]
      pdf.set_font("Arial",size = 7)
      txt2 = countryPoP + " | "+PoP+" :"
      pdf.cell(200, 10, txt = PoP ,ln = 1, align = 'L')
      pdf.set_font("Arial","B",size = 7)
      pdf.cell(25, 6, "Leads GR" ,1, 0, 'C')
      pdf.cell(25, 6, "Impressions GR" ,1, 0, 'C')
      pdf.cell(25, 6, "Lead value {} GR".format(currencyName) ,1, 0, 'C')
      pdf.cell(25, 6, "Lead UV {} GR".format(currencyName) ,1, 0, 'C')
      pdf.cell(25, 6, "Imp UV {} GR".format(currencyName) ,1, 0, 'C')
      pdf.cell(25, 6, "LCR GR" ,1, 1, 'C')
      leadsGrowthRate	= f"{growthRatesPop['leadsGrowthRate'].tolist()[k]*100:.2f} %"
      impressionsGrowthRate	= f"{growthRatesPop['impressionsGrowthRate'].tolist()[k]*100:.2f} %"
      leadRevenueGrowthRate	= f"{growthRatesPop['leadRevenueGrowthRate'].tolist()[k]*100:.2f} %"
      leadUnitValueGrowthRate	= f"{growthRatesPop['leadUnitValueGrowthRate'].tolist()[k]*100:.2f} %"
      impressionUnitValueGrowthRate	= f"{growthRatesPop['impressionUnitValueGrowthRate'].tolist()[k]*100:.2f} %"
      leadConversionRateGrowthRate	= f"{growthRatesPop['leadConversionRateGrowthRate'].tolist()[k]*100:.2f} %"
      pdf.set_font("Arial",size = 6)
      pdf.cell(25, 6, leadsGrowthRate ,1, 0, 'C')
      pdf.cell(25, 6, impressionsGrowthRate ,1, 0, 'C')
      pdf.cell(25, 6,leadRevenueGrowthRate,1, 0, 'C')
      pdf.cell(25, 6, leadUnitValueGrowthRate ,1, 0, 'C')
      pdf.cell(25, 6, impressionUnitValueGrowthRate ,1, 0, 'C')
      pdf.cell(25, 6, leadConversionRateGrowthRate ,1, 1, 'C')
      pdf.cell(50, 5, " ", 0, 1, 'C')
  else : 
    pdf.cell(200, 10, txt = "Can't compare.",ln = 1, align = 'L')


  ########################################## ANALYSIS ##########################################

  pdf.set_text_color(0,69,138)
  pdf.set_font("Arial", "B",size = 12)
  pdf.cell(200, 10, txt = "II. ANALYSIS",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  ############## Countries ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "1. Countries",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       a. TOP Countries by account",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_countries.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the sale value in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If countries appear in legend but not on the graph, the sale value is 0.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "No filters are needed.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')


  ############## Lead conversion rate ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "2. Lead conversion rate",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       a. TOP PoP by Account, Operator AND/OR Country",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_pop.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "Threshold calculation period : {} to {}".format(benchmarkDate1,benchmarkDate2),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The metric measured is the lead conversion rate, which corresponds to the leads/impressions ratio.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the lead value in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the lead conversion rate threshold for the given PoP type.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If PoPs appear in legend but not on the graph, the lead value is 0.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a PoP type.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "You can add a filter on operators and/or countries.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       b. Lead conversion rate by source by PoP",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_sources.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "Threshold calculation period : {} to {}".format(benchmarkDate1,benchmarkDate2),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The metric measured is the lead conversion rate, which corresponds to the leads/impressions ratio.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the number of instances.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the lead conversion rate threshold for the given PoP type.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If sources appear in legend but not on the graph, it has 0 instances.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a PoP AND a UTM type (source, medium or campaign).",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "You can add a filter on countries.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  
  ############## UTM completion rate ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "3. UTM completion rate",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       a. TOP PoP by Account, Operator AND/OR Country",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_pop_utm.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "Threshold calculation period : {} to {}".format(benchmarkDate1,benchmarkDate2),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The metric measured is the UTM completion rate, which corresponds to the sessions with utm filled/sessions ratio.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the lead value in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the UTM completion rate threshold for the given PoP type and UTM type.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If PoPs appear in legend but not on the graph, the lead value is 0.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a PoP type AND a UTM type (source, medium or campaign).",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "You can add a filter on operators and/or countries.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')
  
  
  ############## Products ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "4. Products",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.set_text_color(0,127,255)
  pdf.set_font("Arial",size = 8)
  pdf.cell(200, 10, txt = "       a. Average price of products",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_pop_prc_product.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "The metric measured is the average price of products where there is a lead.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph all rounds are the same size, this does not provide any information.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the average price of products for the entire account being analysed.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "No filters are needed.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')
  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       b. TOP Products by Account, Operator, Country OR/AND PoP",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_products.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "The metric measured is the number of minimum item quantity.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the price of the product in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the average of minimum item quantity for a product of the account being analysed.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "You can add a filter on operators, PoPs and/or countries.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  
  ############## Retailers ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "5. Retailers",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       a. Sales conversion rate",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_retailers.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "The metric measured is the sales conversion rate, which corresponds to the sale value*coefficient TTB max/lead value ratio.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the sale value in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the sales conversion rate threshold for the retailers of the account being analysed.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The blue line represents the leads threshold for the retailers of the account being analysed.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If retailers appear in legend but not on the graph, the sale value is 0.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "No filters are needed.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       b. Lead value",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('top_retailersLeadValueVertical.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "The metric measured is the sales conversion rate.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the sale value in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the sales conversion rate threshold for the retailers of the account being analysed.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The blue line represents the lead value threshold for the retailers of the account being analysed.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If retailers appear in legend but not on the graph, the sale value is 0.",ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "No filters are needed.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "6. Sankeys",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)

  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       a. Sankey : UTM > PoP > Products > Retailers > Minimum item quantity",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('sankey_one.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a UTM type (source, medium or campaign), a PoP AND a product.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "You can add a filter on countries.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       b. Sankey : UTM > PoP > Products > Retailers > Sale Value ({})".format(currencyName),
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('sankey_two.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a UTM type (source, medium or campaign), a PoP AND a product.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "You can add a filter on countries.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       c. Sankey : UTM > Countries > Retailers > Minimum item quantity",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('sankey_three.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a UTM type (source, medium or campaign).",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')

  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       d. Sankey : UTM > Countries > Retailers > Product's origin",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('sankey_four.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a UTM type (source, medium or campaign).",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')


  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       e. Sankey : UTM > Retailers > Has sale",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('sankey_five.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a UTM type (source, medium or campaign).",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')
  
  ############## Competitors ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "7. Competitors (Period : {} to {})".format(benchmarkDate1,benchmarkDate2),
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       a. Main figures of PoP's competitors",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  mainFiguresPoPCompetitors = competitiorComparisonMainFigures(account, operator, country, competitorsAccount, competitorsOperator, competitorsCountry, competitorsTypePoP, competitorsPoP, competitorsCat).assign()
  if mainFiguresPoPCompetitors.shape[0] > 0 :
    for k in range(mainFiguresPoPCompetitors.shape[0]) : 
      accountComp	= mainFiguresPoPCompetitors['Account'].tolist()[k]
      operatorComp	= mainFiguresPoPCompetitors['Operator'].tolist()[k]
      countryComp	= mainFiguresPoPCompetitors['country'].tolist()[k]
      PoP	= mainFiguresPoPCompetitors['PoP'].tolist()[k]
      pdf.set_font("Arial",size = 7)
      txt2 = countryComp + " | "+PoP+" ("+accountComp+", "+operatorComp+") :"
      pdf.cell(200, 10, txt = txt2 ,ln = 1, align = 'L')
      pdf.set_font("Arial","B",size = 7)
      pdf.cell(21.1, 6, "Leads" ,1, 0, 'C')
      pdf.cell(21.1, 6, "Impressions" ,1, 0, 'C')
      pdf.cell(21.1, 6, "Lead value {}".format(currencyName) ,1, 0, 'C')
      pdf.cell(21.1, 6, "Lead UV {}".format(currencyName) ,1, 0, 'C')
      pdf.cell(21.1, 6, "Imp UV {}".format(currencyName) ,1, 0, 'C')
      pdf.cell(21.1, 6, "LCR" ,1, 0, 'C')
      pdf.cell(21.1, 6, "UTMSCR" ,1, 0, 'C')
      pdf.cell(21.1, 6, "UTMMCR" ,1, 0, 'C')
      pdf.cell(21.1, 6, "UTMCCR" ,1, 1, 'C')
      leads	= mainFiguresPoPCompetitors['leads'].tolist()[k]
      impressions	= mainFiguresPoPCompetitors['impressions'].tolist()[k]
      total_lead_value_incltaxes	= f"{mainFiguresPoPCompetitors['total_lead_value_incltaxes'].tolist()[k]:.2f} " + currencyName
      leadUnitValue	= f"{mainFiguresPoPCompetitors['leadUnitValue'].tolist()[k]:.2f} " + currencyName
      impressionUnitValue	= f"{mainFiguresPoPCompetitors['impressionUnitValue'].tolist()[k]:.2f} " + currencyName
      leadConversionRate	= f"{mainFiguresPoPCompetitors['leadConversionRate'].tolist()[k]*100:.2f} %"
      utmSourceCompletionRate	= f"{mainFiguresPoPCompetitors['utmSourceCompletionRate'].tolist()[k]*100:.2f} %"
      utmMediumCompletionRate	= f"{mainFiguresPoPCompetitors['utmMediumCompletionRate'].tolist()[k]*100:.2f} %"
      utmCampaignCompletionRate= f"{mainFiguresPoPCompetitors['utmCampaignCompletionRate'].tolist()[k]*100:.2f} %"
      pdf.set_font("Arial",size = 6)
      pdf.cell(21.1, 6, str(leads) ,1, 0, 'C')
      pdf.cell(21.1, 6, str(impressions) ,1, 0, 'C')
      pdf.cell(21.1, 6,total_lead_value_incltaxes,1, 0, 'C')
      pdf.cell(21.1, 6, leadUnitValue ,1, 0, 'C')
      pdf.cell(21.1, 6, impressionUnitValue ,1, 0, 'C')
      pdf.cell(21.1, 6, leadConversionRate ,1, 0, 'C')
      pdf.cell(21.1, 6, utmSourceCompletionRate ,1, 0, 'C')
      pdf.cell(21.1, 6, utmMediumCompletionRate ,1, 0, 'C')
      pdf.cell(21.1, 6, utmCampaignCompletionRate ,1, 1, 'C')
      pdf.cell(50, 5, " ", 0, 1, 'C')

  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       b. Comparison of lead conversion rate with competitors",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('competitors_LCR.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "Period : {} to {}".format(benchmarkDate1,benchmarkDate2),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The metric measured is the lead conversion rate, which corresponds to the leads/impressions ratio.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the lead value in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the lead conversion rate threshold for the given PoP type, only for the account being analysed and its competitors.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If PoPs do not appear on the graph, the lead value is 0.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = 'Competitors are added with the "Account_Filters" file.',ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a PoP type.",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')


  pdf.set_font("Arial",size = 8)
  pdf.set_text_color(0,127,255)
  pdf.cell(200, 10, txt = "       c. Comparison of UTM completion rate with competitors",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  pdf.image('competitors_UTM.png', x=None, y=None, w=200,h=0, type='', link='')

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = "Description : ",ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "Period : {} to {}".format(benchmarkDate1,benchmarkDate2),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The metric measured is the UTM completion rate, which corresponds to the sessions with utm filled/sessions ratio.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "On this graph the size of a round corresponds to the lead value in {}.".format(currencyName),ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "The red line represents the UTM completion rate threshold for the given PoP type and UTM type, only for the account being analysed and its competitors.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = "If PoPs do not appear on the graph, the lead value is 0.",ln = 1, align = 'L')
  pdf.cell(200, 5, txt = 'Competitors are added with the "Account_Filters" file.',ln = 1, align = 'L')
  pdf.cell(200, 2, txt = " ",ln = 1, align = 'L')
  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 8, txt = 'Filters in addition to the file "Account_Filters" : ',ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  pdf.cell(200, 5, txt = "For this graph it is mandatory to give a PoP type AND a UTM type (source, medium or campaign).",ln = 1, align = 'L')
  pdf.cell(50, 5, " ", 0, 1, 'C')
  


  ########################################## RECOMMENDATIONS ##########################################

  pdf.set_text_color(0,69,138)
  pdf.set_font("Arial", "B",size = 12)
  pdf.cell(200, 10, txt = "III. RECOMMENDATIONS",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)

  touchpoint = ['ST','IP','LP','DP']
  utm = ['source','medium','campaign']
  
  
  
  
  ############## UTM completion rate ##############
  pdf.set_font("Arial", "B",size = 9)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "2. UTM completion rate by type of PoP and type of UTM",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)
  
  newListTouchpoint = ['ST','IP','LP','DP','DL']

  cpt = 0
  for i in newListTouchpoint : 
    cptbis = 1
    for j in utm : 
        threshold = thresholdUtmCompletionRateByPop(i, j)*100
        popUtmCompletionRate = popUnderThresholdUtmCompletionRate(i, j, account, operator, country).assign()
        if popUtmCompletionRate.shape[0] > 0 : 
          pdf.set_font("Arial",size = 8)
          pdf.set_text_color(0,127,255)
          if cptbis == 1 : 
            letter = listAlphabet()[cpt]
            pdf.cell(200, 10, txt = "       "+letter+". "+i+" PoPs",
                ln = 1, align = 'L')
          pdf.set_text_color(0,0,0)
          pdf.set_font("Arial",'B',size = 7)
          pdf.cell(200, 10, txt = "UTM "+j.upper()+ " completion rate threshold is " + f"{threshold:.2f}" + "%" ,
              ln = 1, align = 'L')  
          pdf.set_font("Arial",size = 7)
          for k in range(popUtmCompletionRate.shape[0]) : 
            PoP = popUtmCompletionRate['PoP'].tolist()[k]
            lead = popUtmCompletionRate['leads'].tolist()[k]
            a = "utm"+j.capitalize()+"CompletionRate"
            utmCompletionRate = popUtmCompletionRate[a].tolist()[k]
            if lead == 1 : 
              pdf.cell(200, 10, txt = PoP + " : "+ f"{utmCompletionRate:.2f}" + "%  ("+ str(lead) + " lead)" ,
                ln = 1, align = 'L')
            else : 
              pdf.cell(200, 10, txt = PoP + " : "+ f"{utmCompletionRate:.2f}" + "%  ("+ str(lead) + " leads)" ,
                ln = 1, align = 'L')
        cptbis = cptbis+1    
    if popUtmCompletionRate.shape[0] > 0  :
      cpt = cpt+1

  pdf.set_font("Arial", "B",size = 7)
  pdf.cell(200, 10, txt = "Recommendations : ...",
      ln = 2, align = 'L')
  pdf.cell(200, 10, txt = " ",
      ln = 2, align = 'L')

  ############## Sales conversion rate ##############
  pdf.set_font("Arial", "B",size = 11)
  pdf.set_text_color(0,102,204)
  pdf.cell(200, 10, txt = "3. Sales conversion rate by retailer",
      ln = 1, align = 'L')
  pdf.set_text_color(0,0,0)
  pdf.set_font("Arial",size = 7)

  pdf.set_font("Arial",'B',size = 7)
  pdf.cell(200, 10, txt = "Retailers below have a sales conversion rate and number of leads under the minimum thresholds they should have.",
      ln = 1, align = 'L')
  pdf.set_font("Arial",size = 7)
  
  retailerSCR = retailersSales(account, operator, country, False,True,analysisByPop)
  if retailerSCR.shape[0] > 0 : 
    thresholdSCR = retailerSCR['thresholdSCR'].tolist()[0]
    thresholdLead = str(round(retailerSCR['thresholdLead'].tolist()[0]))
    pdf.set_font("Arial", "B",size = 7)
    pdf.cell(200, 10, txt = "Sales conversion rate threshold : "+f"{thresholdSCR:.2f}"+ "% ; Leads threshold : "+thresholdLead + " leads",
        ln = 1, align = 'L')
    if retailerSCR.shape[0] > 0 :
      for i in range (retailerSCR.shape[0]) : 
        retailer = retailerSCR['retailer'].tolist()[i]
        leads = round(retailerSCR['leads'].tolist()[i])
        SalesConversionRate = retailerSCR['SalesConversionRate'].tolist()[i]
        pdf.set_font("Arial",size = 8)
        pdf.cell(200, 10, txt = retailer +  " : "+  f"{SalesConversionRate:.2f}" + "%  ("+ str(leads) + " leads)" ,
                  ln = 1, align = 'L')
    pdf.set_font("Arial", "B",size = 7)
    pdf.cell(200, 10, txt = "Recommendations : ...",
        ln = 2, align = 'L')
    pdf.cell(200, 10, txt = " ",
        ln = 2, align = 'L')
  else : 
    pdf.cell(200, 5, txt = "There is no underperforming retailer.",
        ln = 2, align = 'L')

  if (operator != "null") & (country != "null") : 
    account = account+"_"+operator+"_"+country
  elif (operator == "null") & (country != "null") : 
    account = account+"_"+country
  elif (operator != "null") & (country == "null") : 
    account = account+"_"+operator

  titlePdf = "recommendations_"+account+".pdf"

  # save the pdf with name .pdf
  pdf.output(titlePdf)
  files.download(titlePdf)

if a == 1 : 
  pdfResult(analysisAccount, analysisOperator, analysisCountry)

"""## <font size='4px' color='#0066CC'>**JSON Format**</font>"""

# Exemple of JSON format

#album_json_file = open("recommendations.txt", "r")
#album = json.load(album_json_file)
#album_json_file.close()


#album2 = {'album_title': 'Yellow Submarine', 'release_year': 1966, 'won_grammy': False, 
 #'band': 'The Beatles', 'album_sale': None, 'musicians': ['John Lennon', 'Paul McCartney', 'George   Harrison', 'Ringo Starr'], 
 #'studio': {'studio_name': 'Abbey Road Studios', 'location': 'London, England'}}
#file2 = open("recommendationsBis.txt", "w")
#json.dump(album2, file2)